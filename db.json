{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/maoblog/source/css/maoblog.styl","path":"css/maoblog.styl","modified":0,"renderable":1},{"_id":"themes/maoblog/source/css/prism.css","path":"css/prism.css","modified":0,"renderable":1},{"_id":"themes/maoblog/source/css/zoom.css","path":"css/zoom.css","modified":0,"renderable":1},{"_id":"themes/maoblog/source/img/favicon.ico","path":"img/favicon.ico","modified":0,"renderable":1},{"_id":"themes/maoblog/source/img/wallpaper-2311325.jpg","path":"img/wallpaper-2311325.jpg","modified":0,"renderable":1},{"_id":"themes/maoblog/source/img/wallpaper-2572384.jpg","path":"img/wallpaper-2572384.jpg","modified":0,"renderable":1},{"_id":"themes/maoblog/source/img/wallpaper-878514.jpg","path":"img/wallpaper-878514.jpg","modified":0,"renderable":1},{"_id":"themes/maoblog/source/js/maoblog.js","path":"js/maoblog.js","modified":0,"renderable":1},{"_id":"themes/maoblog/source/js/mermaid.min.js","path":"js/mermaid.min.js","modified":0,"renderable":1},{"_id":"themes/maoblog/source/js/prism.js","path":"js/prism.js","modified":0,"renderable":1},{"_id":"themes/maoblog/source/js/utterances-client.js","path":"js/utterances-client.js","modified":0,"renderable":1},{"_id":"themes/maoblog/source/css/math/katex.min.css","path":"css/math/katex.min.css","modified":0,"renderable":1},{"_id":"themes/maoblog/source/css/partials/about.styl","path":"css/partials/about.styl","modified":0,"renderable":1},{"_id":"themes/maoblog/source/css/partials/comment.styl","path":"css/partials/comment.styl","modified":0,"renderable":1},{"_id":"themes/maoblog/source/css/partials/meta.styl","path":"css/partials/meta.styl","modified":0,"renderable":1},{"_id":"themes/maoblog/source/css/partials/post.styl","path":"css/partials/post.styl","modified":0,"renderable":1},{"_id":"themes/maoblog/source/css/partials/search.styl","path":"css/partials/search.styl","modified":0,"renderable":1},{"_id":"themes/maoblog/source/css/partials/tags.styl","path":"css/partials/tags.styl","modified":0,"renderable":1},{"_id":"themes/maoblog/source/js/search/search.js","path":"js/search/search.js","modified":0,"renderable":1},{"_id":"themes/maoblog/source/js/zoom/bootstrap.min.js","path":"js/zoom/bootstrap.min.js","modified":0,"renderable":1},{"_id":"themes/maoblog/source/js/zoom/jquery.min.js","path":"js/zoom/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/maoblog/source/js/zoom/zoom.js","path":"js/zoom/zoom.js","modified":0,"renderable":1},{"_id":"themes/maoblog/source/fontawesome/fonts/FontAwesome.otf","path":"fontawesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/maoblog/source/css/math/style.css","path":"css/math/style.css","modified":0,"renderable":1},{"_id":"themes/maoblog/source/fontawesome/fonts/fontawesome-webfont.eot","path":"fontawesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/maoblog/source/fontawesome/fonts/fontawesome-webfont.svg","path":"fontawesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/maoblog/source/fontawesome/fonts/fontawesome-webfont.ttf","path":"fontawesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/maoblog/source/fontawesome/fonts/fontawesome-webfont.woff","path":"fontawesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/maoblog/source/fontawesome/fonts/fontawesome-webfont.woff2","path":"fontawesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/maoblog/source/fontawesome/css/font-awesome.css","path":"fontawesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/maoblog/source/fontawesome/css/font-awesome.min.css","path":"fontawesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"source/assets/images/posts/bfc/bfc-clearfix-1.png","path":"assets/images/posts/bfc/bfc-clearfix-1.png","modified":0,"renderable":0},{"_id":"source/assets/images/posts/bfc/bfc-clearfix.png","path":"assets/images/posts/bfc/bfc-clearfix.png","modified":0,"renderable":0},{"_id":"source/assets/images/posts/bfc/bfc-fluid-layout.png","path":"assets/images/posts/bfc/bfc-fluid-layout.png","modified":0,"renderable":0},{"_id":"source/assets/images/posts/bfc/margin-collapse.png","path":"assets/images/posts/bfc/margin-collapse.png","modified":0,"renderable":0},{"_id":"source/assets/images/posts/bfc/bfc-default-layout.png","path":"assets/images/posts/bfc/bfc-default-layout.png","modified":0,"renderable":0},{"_id":"source/assets/images/posts/bfc/margin-not-collapse.png","path":"assets/images/posts/bfc/margin-not-collapse.png","modified":0,"renderable":0},{"_id":"source/assets/images/posts/prototype/layout.jpg","path":"assets/images/posts/prototype/layout.jpg","modified":0,"renderable":0},{"_id":"source/assets/images/posts/git/git_commit.png","path":"assets/images/posts/git/git_commit.png","modified":0,"renderable":0},{"_id":"source/assets/images/posts/git/git_diff.png","path":"assets/images/posts/git/git_diff.png","modified":0,"renderable":0},{"_id":"source/assets/images/posts/git/git_draft.jpg","path":"assets/images/posts/git/git_draft.jpg","modified":0,"renderable":0},{"_id":"source/assets/images/posts/git/git_log.jpg","path":"assets/images/posts/git/git_log.jpg","modified":0,"renderable":0},{"_id":"source/assets/images/posts/git/git_status.png","path":"assets/images/posts/git/git_status.png","modified":0,"renderable":0},{"_id":"source/assets/images/posts/git/clone.jpg","path":"assets/images/posts/git/clone.jpg","modified":0,"renderable":0},{"_id":"source/assets/images/favicon.png","path":"assets/images/favicon.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/404/index.md","hash":"314b73509ec4034b4aa18eb852dc84b104694352","modified":1729577549384},{"_id":"source/tags/Untagged.md","hash":"b977974adf9f322e5ab2024c13ce2900f2cc7645","modified":1729577549404},{"_id":"source/about/index.md","hash":"71346f3b8e403a944369a734b5cf3b359b047052","modified":1729577549404},{"_id":"source/_posts/categories.md","hash":"55e41f9a07240241e4302fbdf679f7d5e9f3b668","modified":1729577549385},{"_id":"source/_posts/elements.md","hash":"79ac077581ca5c82323f80aa15e54492cace0baf","modified":1729577549387},{"_id":"source/tags/index.md","hash":"f5286831d03a20b9665bb3f8aa39c4b3951ba217","modified":1729577549405},{"_id":"source/_posts/code-highlight.md","hash":"334e0e84be834318e2b00fc0ef665e49d59ec47f","modified":1729577549386},{"_id":"source/_posts/excerpts.md","hash":"2ca7f1faf6ee65003cf12fd138a9213750b45a1b","modified":1729577549387},{"_id":"source/_posts/gallery-post.md","hash":"038ce1d9b52b7cb50ce3badaa45e2a6977e14bda","modified":1729577549388},{"_id":"source/_posts/hello-world.md","hash":"da53af306e59dbbd8156ac45e3e69f4ec7b1960e","modified":1729577549389},{"_id":"source/_posts/formulary.md","hash":"b84c71be9570cc396da56589ab123c27ce01e105","modified":1729577549388},{"_id":"source/_posts/heimu.md","hash":"9cc2254ebe1dbcdf09b88bfbb41feb8d56b7b363","modified":1729577549389},{"_id":"source/_posts/images.md","hash":"b013b243a4f93241d2d41c2f2667bac499c1b6ec","modified":1729577549390},{"_id":"source/_posts/markdown.md","hash":"5767125063f28f679a1add191657a242743ef417","modified":1729577549391},{"_id":"source/_posts/mermaid.md","hash":"99a74d1a0613a6229e28c963284d9883ad143a68","modified":1729577549391},{"_id":"source/_posts/long-title.md","hash":"c343177477257b3c9bbbacb24a4299570759abcd","modified":1729577549390},{"_id":"source/_posts/no-title.md","hash":"0b2db1f80e192b034db7fac4290ec90d5f90467c","modified":1729577549392},{"_id":"source/_posts/tag-plugins.md","hash":"7f69513352a57a062834937744783101f52345fd","modified":1729577549392},{"_id":"source/_posts/videos.md","hash":"c46628d13c561f6926ac86d9a131f1d2fc529fb2","modified":1729577549402},{"_id":"source/_posts/tags.md","hash":"51b54b6c76f22a8393da44a0b06a92ab3422502f","modified":1729577549399},{"_id":"source/_posts/中文測試.md","hash":"836232a13ea6832c5c22da7c813ed3fd2259e35a","modified":1729577549403},{"_id":"source/_posts/日本語テスト.md","hash":"a61d739c4fe6afafb2a7060fc87b2a797da186cc","modified":1729577549403},{"_id":"themes/maoblog/layout/untagged.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1729577549411},{"_id":"themes/maoblog/layout/index.ejs","hash":"bc3288e39e9fcb0fcaed8dddf3beed1793e705db","modified":1729577549407},{"_id":"themes/maoblog/layout/about.ejs","hash":"b4b270ccdbff7e13701fde79a88da586df2a62bf","modified":1729577549406},{"_id":"themes/maoblog/layout/404.ejs","hash":"4e7fd8e1fabfcc57c4d10de6a412e7bdf878e37f","modified":1729577549406},{"_id":"themes/maoblog/layout/layout.ejs","hash":"52e9d6a3c65ac64f4bf6742fdae4ec7a38d320ba","modified":1729577549407},{"_id":"themes/maoblog/package.json","hash":"96fb55792ae0e39a285a8acbee0baae0129ae346","modified":1729577549411},{"_id":"themes/maoblog/layout/tags.ejs","hash":"4e11dc5feb6e2214ca09068afed97112c9fcdde9","modified":1729577549410},{"_id":"themes/maoblog/layout/post.ejs","hash":"87a3367b14fac197828cc3f5b8ce57a5b00dd5de","modified":1729577549410},{"_id":"themes/maoblog/layout/partials/footer.ejs","hash":"3824961461f42a16b6347b97a814f779611b4c06","modified":1729577549408},{"_id":"themes/maoblog/source/css/maoblog.styl","hash":"15d8c2034ab29e0a2e3a91c7f1ae4ee3287591ea","modified":1729577549412},{"_id":"themes/maoblog/layout/partials/head.ejs","hash":"32d76fa2d5729c7ec2aec649ed55c5f39a6b3497","modified":1729577549408},{"_id":"themes/maoblog/layout/partials/search.ejs","hash":"aadda80f2b065d9b974736359b83b72df07a5418","modified":1729577549410},{"_id":"themes/maoblog/source/css/prism.css","hash":"dacd77a37683028fd71aacee15b565b987cf7bfc","modified":1729577549415},{"_id":"themes/maoblog/layout/partials/header.ejs","hash":"e34d9999202f5a49e127586a08a7e30f86dab5be","modified":1729577549409},{"_id":"themes/maoblog/source/css/zoom.css","hash":"e6feedd50deaf58cd27b33ed99f04f479c9fba31","modified":1729577549416},{"_id":"themes/maoblog/source/img/favicon.ico","hash":"a65bab97e22795aced6d36dc971e1c6df2d9ec29","modified":1729577549431},{"_id":"themes/maoblog/source/js/prism.js","hash":"a5647121d3c0d9d39cf7c9bfcb9d8e29991961dc","modified":1729577549453},{"_id":"themes/maoblog/source/js/maoblog.js","hash":"a3884c0ba62b3b769b107ef29a96d3a0def9d9fc","modified":1729577549443},{"_id":"themes/maoblog/source/css/math/katex.min.css","hash":"9c19c6203780564bf446622983911b9fc93868d8","modified":1729577549413},{"_id":"themes/maoblog/source/css/partials/comment.styl","hash":"e8efc0b9c99807d45a46e5df4136751bd2d35e61","modified":1729577549414},{"_id":"themes/maoblog/source/css/partials/about.styl","hash":"f1e4dba559d73ebbe8e30ef2363d1a80be9cbfdd","modified":1729577549414},{"_id":"themes/maoblog/source/css/partials/meta.styl","hash":"669f6803f7f73251ad98e6c5ece8001adde8aba9","modified":1729577549414},{"_id":"themes/maoblog/source/css/partials/search.styl","hash":"6fca5b507caeecd131e16216b20b0f8b18754102","modified":1729577549415},{"_id":"themes/maoblog/source/css/partials/post.styl","hash":"5598d3d1b3716e89610c0acabff5bb6b55231fe4","modified":1729577549414},{"_id":"themes/maoblog/source/css/partials/tags.styl","hash":"84956d2dfd63a547fa99deef720de4a91acb9ee5","modified":1729577549415},{"_id":"themes/maoblog/source/js/search/search.js","hash":"90d6caf139d91bad8fc8532dd7891ea9aabbee99","modified":1729577549454},{"_id":"themes/maoblog/source/js/zoom/bootstrap.min.js","hash":"75a42212affc118fef849aba4b9326a7da2acda1","modified":1729577549455},{"_id":"themes/maoblog/source/css/math/style.css","hash":"f1b7f8eec29844515d918e4955b316cb0694bcd7","modified":1729577549413},{"_id":"themes/maoblog/source/js/zoom/zoom.js","hash":"0778fe1a7b3a3b736977bcbc937999626d6b2dc8","modified":1729577549457},{"_id":"themes/maoblog/source/js/utterances-client.js","hash":"092a77ce3b9ea6dc1d344a5726624cec089d783a","modified":1729577549455},{"_id":"themes/maoblog/source/fontawesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1729577549418},{"_id":"themes/maoblog/source/fontawesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1729577549417},{"_id":"themes/maoblog/source/js/zoom/jquery.min.js","hash":"b66ed708717bf0b4a005a4d0113af8843ef3b8ff","modified":1729577549457},{"_id":"themes/maoblog/source/fontawesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1729577549430},{"_id":"themes/maoblog/source/fontawesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1729577549430},{"_id":"themes/maoblog/source/fontawesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1729577549419},{"_id":"themes/maoblog/source/fontawesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1729577549421},{"_id":"themes/maoblog/source/fontawesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1729577549428},{"_id":"themes/maoblog/source/img/wallpaper-2572384.jpg","hash":"1df3620ab8c69fe2498a746f8ead057162df0637","modified":1729577549437},{"_id":"themes/maoblog/source/fontawesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1729577549424},{"_id":"themes/maoblog/source/img/wallpaper-878514.jpg","hash":"9f9705a377c42320b335b3c66b023e62b80e56e3","modified":1729577549442},{"_id":"themes/maoblog/source/img/wallpaper-2311325.jpg","hash":"ddaaaeb4fa04a05c83053c1f8149720d18c9c8de","modified":1729577549434},{"_id":"themes/maoblog/source/js/mermaid.min.js","hash":"bb450af2b99ae0904a7264b06ef9d98017a8f417","modified":1729577549452},{"_id":"source/_posts/My-New-Post.md","hash":"46a0b1cd4992c508f97aaa2ea1d697e039361cdd","modified":1729578275489},{"_id":"public/atom.xml","hash":"242b50379a8ad704ce5b023de63615a9affd853d","modified":1729582662432},{"_id":"public/search.xml","hash":"8554020ddd592c8f7b8366498a96bff97fdf60b6","modified":1729582662432},{"_id":"public/tags/Untagged.html","hash":"4100db27b19eb221638e6364357926f9be968f10","modified":1729582662432},{"_id":"public/tags/index.html","hash":"351df5a60c8ed0c4bc08c25977cb9159a13097f1","modified":1729582662432},{"_id":"public/about/index.html","hash":"88cf3ceb380908800c8a91b39c61469bcc5b7238","modified":1729582662432},{"_id":"public/404/index.html","hash":"545d0daf5e4d47a016dc91d6ed853b45f33deed6","modified":1729582662432},{"_id":"public/2024/10/My-New-Post/index.html","hash":"75063b9ad77ffe5ae5760c0513e899213cf185ed","modified":1729578063341},{"_id":"public/2023/08/heimu/index.html","hash":"4e220edff1e61d01862aa760b7cb9ee4d02b7898","modified":1729578063341},{"_id":"public/2023/08/mermaid/index.html","hash":"ed0adc1c060025cf810a82dfbfa90ea654daeb4a","modified":1729578063341},{"_id":"public/2019/07/code-highlight/index.html","hash":"d98afa5b413ca4fdf3a4c75cdd6e7c6033affbb3","modified":1729578063341},{"_id":"public/2018/07/markdown/index.html","hash":"9c9600dc6838eb49327559d79e7890cdf994bc09","modified":1729578063341},{"_id":"public/2013/12/images/index.html","hash":"1d3ef61fb3b822d0a123624e31a4d09776d892f0","modified":1729578063341},{"_id":"public/2013/12/no-title/index.html","hash":"a48e63a0daa4716014cae4c68eeafd1f7948245a","modified":1729578063341},{"_id":"public/2013/12/excerpts/index.html","hash":"9add8a6844a9fbc98c8cccf243bc464cda209ea9","modified":1729578063341},{"_id":"public/2013/12/videos/index.html","hash":"ff2a17273197b3ccdb6251e5913ed938243d12b2","modified":1729578063341},{"_id":"public/2013/12/gallery-post/index.html","hash":"63d67fcb2b51e3cafa61af23427a48f5f4d7764e","modified":1729578063341},{"_id":"public/2013/12/tag-plugins/index.html","hash":"87f4dc920914748f1fde9121c4009ea5180d3765","modified":1729578063341},{"_id":"public/2013/12/formulary/index.html","hash":"e4dca8c4b4773b9eff3816c423cb7eb7d517aa33","modified":1729578063341},{"_id":"public/2013/12/日本語テスト/index.html","hash":"8ede53ba9ba69d2f66970f24d080d1258118bdcc","modified":1729578063341},{"_id":"public/2013/12/中文測試/index.html","hash":"a1b69856898fa725d2ef86a0462eb2a3ca39d54b","modified":1729578063341},{"_id":"public/2013/12/categories/index.html","hash":"c8fd1f1385fb748a6e60decc52650d9887f6a7f8","modified":1729578063341},{"_id":"public/2013/12/tags/index.html","hash":"0552590289ff4c1505f08f9a5cab57f53b78f2c5","modified":1729578063341},{"_id":"public/2013/12/elements/index.html","hash":"950701f8dd667a95d0340ec6616f16d448a82f9a","modified":1729578063341},{"_id":"public/2013/12/hello-world/index.html","hash":"d6205b458e01e9a93995a011f869b49c3b981a00","modified":1729578063341},{"_id":"public/archives/2013/index.html","hash":"d5f37a0a74ef180cce8d2d81d7a1899ddb48cfac","modified":1729578063341},{"_id":"public/archives/index.html","hash":"48378597a51864bb909ea7d8c274c3490659b75a","modified":1729582662432},{"_id":"public/archives/2013/12/index.html","hash":"d5f37a0a74ef180cce8d2d81d7a1899ddb48cfac","modified":1729578063341},{"_id":"public/archives/2018/index.html","hash":"b2ca9536b3d35f1a9544e71ac1f207072a299784","modified":1729578063341},{"_id":"public/archives/2018/07/index.html","hash":"b2ca9536b3d35f1a9544e71ac1f207072a299784","modified":1729578063341},{"_id":"public/archives/2019/index.html","hash":"2f4da57bfe95147f18be43e3aa17e8453ae25b31","modified":1729578063341},{"_id":"public/archives/2019/07/index.html","hash":"2f4da57bfe95147f18be43e3aa17e8453ae25b31","modified":1729578063341},{"_id":"public/archives/2023/index.html","hash":"69005caf93f960eb4f75a02e9a2e2c7e5763dbf6","modified":1729578063341},{"_id":"public/archives/2023/08/index.html","hash":"69005caf93f960eb4f75a02e9a2e2c7e5763dbf6","modified":1729578063341},{"_id":"public/archives/2024/index.html","hash":"fffc3d18379ce6b7f173d13001af9fec4c8e33b1","modified":1729582662432},{"_id":"public/archives/2024/10/index.html","hash":"fffc3d18379ce6b7f173d13001af9fec4c8e33b1","modified":1729582662432},{"_id":"public/categories/Foo/index.html","hash":"515615dff3cfa38eb563b0d50aa2fe79a28035b8","modified":1729578063341},{"_id":"public/2013/12/long-title/index.html","hash":"f4e336a4eb25556a178cce330cef44cc5a651f5b","modified":1729578063341},{"_id":"public/categories/Foo/Bar/index.html","hash":"515615dff3cfa38eb563b0d50aa2fe79a28035b8","modified":1729578063341},{"_id":"public/categories/Foo/Bar/Baz/index.html","hash":"515615dff3cfa38eb563b0d50aa2fe79a28035b8","modified":1729578063341},{"_id":"public/tags/Test/index.html","hash":"8b15aad10dcb1d598f285bf65ef2404bdcc5ee64","modified":1729578063341},{"_id":"public/tags/Foo/index.html","hash":"09fdf7e8077ad4e16f2a05ba318a58b1d3cfb993","modified":1729578063341},{"_id":"public/tags/Bar/index.html","hash":"09fdf7e8077ad4e16f2a05ba318a58b1d3cfb993","modified":1729578063341},{"_id":"public/tags/Baz/index.html","hash":"501c74e546b7bee0e5e3a4ad91be759ce184869b","modified":1729578063341},{"_id":"public/index.html","hash":"48378597a51864bb909ea7d8c274c3490659b75a","modified":1729582662432},{"_id":"public/img/favicon.ico","hash":"a65bab97e22795aced6d36dc971e1c6df2d9ec29","modified":1729582662432},{"_id":"public/fontawesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1729582662432},{"_id":"public/fontawesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1729582662432},{"_id":"public/css/zoom.css","hash":"e6feedd50deaf58cd27b33ed99f04f479c9fba31","modified":1729582662432},{"_id":"public/css/prism.css","hash":"dacd77a37683028fd71aacee15b565b987cf7bfc","modified":1729582662432},{"_id":"public/js/utterances-client.js","hash":"092a77ce3b9ea6dc1d344a5726624cec089d783a","modified":1729582662432},{"_id":"public/js/prism.js","hash":"a5647121d3c0d9d39cf7c9bfcb9d8e29991961dc","modified":1729582662432},{"_id":"public/js/maoblog.js","hash":"a3884c0ba62b3b769b107ef29a96d3a0def9d9fc","modified":1729582662432},{"_id":"public/css/maoblog.css","hash":"7a822706364753c5046dd54f515f43f4e26e6453","modified":1729582662432},{"_id":"public/css/partials/meta.css","hash":"ffbe11a6a667fe1e8a29ed73a3501d24b43e8e98","modified":1729582662432},{"_id":"public/css/partials/post.css","hash":"d11e1ab6462f4f2c4f6b00901ae6be6d3d8e020d","modified":1729582662432},{"_id":"public/css/math/katex.min.css","hash":"9c19c6203780564bf446622983911b9fc93868d8","modified":1729582662432},{"_id":"public/css/partials/search.css","hash":"048f6827610554127ed2941a30e7b41dd363cbd0","modified":1729582662432},{"_id":"public/css/partials/tags.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1729582662432},{"_id":"public/js/search/search.js","hash":"90d6caf139d91bad8fc8532dd7891ea9aabbee99","modified":1729582662432},{"_id":"public/js/zoom/bootstrap.min.js","hash":"75a42212affc118fef849aba4b9326a7da2acda1","modified":1729582662432},{"_id":"public/js/zoom/zoom.js","hash":"0778fe1a7b3a3b736977bcbc937999626d6b2dc8","modified":1729582662432},{"_id":"public/css/partials/comment.css","hash":"17bf5100ca352bc8e965a45ed6d10bb3dee42a63","modified":1729582662432},{"_id":"public/css/math/style.css","hash":"f1b7f8eec29844515d918e4955b316cb0694bcd7","modified":1729582662432},{"_id":"public/css/partials/about.css","hash":"5de21e078002cdf0f33be3c9bcfce93ab7180a58","modified":1729582662432},{"_id":"public/js/zoom/jquery.min.js","hash":"b66ed708717bf0b4a005a4d0113af8843ef3b8ff","modified":1729582662432},{"_id":"public/fontawesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1729582662432},{"_id":"public/fontawesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1729582662432},{"_id":"public/fontawesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1729582662432},{"_id":"public/fontawesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1729582662432},{"_id":"public/fontawesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1729582662432},{"_id":"public/img/wallpaper-2572384.jpg","hash":"1df3620ab8c69fe2498a746f8ead057162df0637","modified":1729582662432},{"_id":"public/js/mermaid.min.js","hash":"bb450af2b99ae0904a7264b06ef9d98017a8f417","modified":1729582662432},{"_id":"public/fontawesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1729582662432},{"_id":"public/img/wallpaper-878514.jpg","hash":"9f9705a377c42320b335b3c66b023e62b80e56e3","modified":1729582662432},{"_id":"public/img/wallpaper-2311325.jpg","hash":"ddaaaeb4fa04a05c83053c1f8149720d18c9c8de","modified":1729582662432},{"_id":"source/_posts/New-Posts.md","hash":"dd8bfa0f8b481ca4e0aa36dc3ccb1a8064ed6fec","modified":1729579235914},{"_id":"source/assets/images/posts/bfc/bfc-clearfix.png","hash":"1c333bb74b3d569492875506015000c5a0cfa879","modified":1729154998886},{"_id":"source/assets/images/posts/bfc/bfc-fluid-layout.png","hash":"0ca830488f027d8adae492d81eddfb2321f91a23","modified":1729154998892},{"_id":"source/assets/images/posts/bfc/margin-collapse.png","hash":"1278ccd5ce5a57f589964d2f642816cfede2917a","modified":1729154998894},{"_id":"source/assets/images/posts/bfc/margin-not-collapse.png","hash":"66e9376e72dbbc981f90f11530ed27d23895dc14","modified":1729154998896},{"_id":"source/assets/images/posts/bfc/bfc-default-layout.png","hash":"c2fc8a301e20fc427d8e8f46d03533e34f6c4743","modified":1729154998891},{"_id":"source/assets/images/posts/bfc/bfc-clearfix-1.png","hash":"048c608dc212e2b36ba5a3ca214356dec17f2402","modified":1729154998881},{"_id":"source/assets/images/posts/git/git_commit.png","hash":"8704265d3dc9867a176e7716dabd6f12e638cc67","modified":1729154998901},{"_id":"source/assets/images/posts/git/git_draft.jpg","hash":"7e606f52e92c01226a807403c9b33c1891ce6b14","modified":1729154998908},{"_id":"source/assets/images/posts/git/git_log.jpg","hash":"5be99ad071ed89ae45f9903c4606711dbafa2f01","modified":1729154998912},{"_id":"source/assets/images/posts/git/git_status.png","hash":"ddba8f82b50094c2f71339acb2bd5f685e06e1d2","modified":1729154998915},{"_id":"source/assets/images/posts/prototype/layout.jpg","hash":"5779480a3804589973d67dbbfabb5f20e881e085","modified":1729154998918},{"_id":"source/assets/images/posts/git/git_diff.png","hash":"21f73f2e0f8f843148aa51832bbe4f8ea5edecd3","modified":1729154998905},{"_id":"source/assets/images/posts/git/clone.jpg","hash":"838e20e8f4b18626da8c24d7f3212fb7bd61a0df","modified":1729154998899},{"_id":"source/assets/images/favicon.png","hash":"01fec5bc7b8d7a26b5e85b7f2db8642e1c104945","modified":1729154998865},{"_id":"source/_posts/3-col-layout.md","hash":"ed6bcb22aac03c63b5c42cee67c13268c35d2f8d","modified":1729580516479},{"_id":"source/_posts/array-like-objects.md","hash":"d1806a659596a64c07d81fccd48fce1323c6d8b9","modified":1729580408952},{"_id":"source/_posts/bfc.md","hash":"cf081898fa306d70a8ab45e6e06fbd51b3d295a6","modified":1729580447599},{"_id":"source/_posts/comfortably-numb.md","hash":"1ced58024882969c87eaa59ea061010e638c8e05","modified":1729581121446},{"_id":"source/_posts/call-apply-bind.md","hash":"d7c701ab72b32840579a433ef0e64874ba1357b7","modified":1729580542116},{"_id":"source/_posts/cookie-localstorage-sessionstorage.md","hash":"d671e03c45703a5dc4bff2f78ce7386119ff7481","modified":1729580073691},{"_id":"source/_posts/git-n-operations.md","hash":"4d225ac491f653a07d7da420b93537752211069a","modified":1729580631634},{"_id":"source/_posts/javascript-this.md","hash":"eb6a0425304ffa421bbaac6f6ff4f5f003d96876","modified":1729579918957},{"_id":"source/_posts/advantages-and-disadvantages-of-social-media.md","hash":"aab9662a127472aee1aa65357965b1412c3c32a4","modified":1729579863127},{"_id":"source/_posts/farewell-address-to-the-nation-by-bill-clinton.md","hash":"fd6a499174acfe0fa92c6bfbd7703fcc6aa866f3","modified":1729579823022},{"_id":"source/_posts/how-to-improve-spoken-english.md","hash":"ed58b8f0d7e6f49130b9ea8ccfcc0894ec1f4e5e","modified":1729579853459},{"_id":"source/_posts/margin-collapse.md","hash":"980016494d746e133fc2886014acac79d314c62b","modified":1729580484187},{"_id":"source/_posts/lie.md","hash":"c85d59aef195c50380697ab1875a5299c524eee3","modified":1729581193420},{"_id":"source/_posts/nice-to-meet-you.md","hash":"b90efdac33c03a2013534d29b00dcefa60d4f490","modified":1729581217317},{"_id":"source/_posts/pardon.md","hash":"eaecda7c12a783e5e1179274a52e5b3ba3de6213","modified":1729581181467},{"_id":"source/_posts/how-to-claim-your-leadership-power.md","hash":"2872172656a853ffcf14ba27eaa3583e310877d2","modified":1729579793369},{"_id":"source/_posts/prototype.md","hash":"e5ddd7c2c97799c02d4f7c1439458f2766c2cfbf","modified":1729580331070},{"_id":"source/_posts/semver.md","hash":"c79f585bebae522fcfe7939082ad0c04311b0788","modified":1729580665922},{"_id":"source/_posts/standards-mode-quirks-mode.md","hash":"e60a4cbef9df6bdba4dbf2547dbf44c4f2086f7f","modified":1729579968251},{"_id":"source/_posts/string-trim.md","hash":"bba78bd169e6c74ab7b25a6a13734ba19c81a217","modified":1729580568763},{"_id":"source/_posts/what-a-life.md","hash":"cd181d085a6d58e18413226f43382b61846261ef","modified":1729581154411},{"_id":"source/_posts/typeof.md","hash":"640ae2414e5ae4b178c1a11d9534a855c2c982ec","modified":1729580360033},{"_id":"source/_posts/wish-you-were-here.md","hash":"3341306c035f26d866fa8f082462a1c37cf08269","modified":1729580994630},{"_id":"themes/maoblog/.DS_Store","hash":"8725e5ed43c292a085df966f991dffa63a1c30d2","modified":1729582402715},{"_id":"source/.DS_Store","hash":"1be944545194084203e5af9b60c30b1ca8167472","modified":1729582402718},{"_id":"public/2024/10/advantages-and-disadvantages-of-social-media/index.html","hash":"4461316ba9be6e3177c307712e1a103793f3ac88","modified":1729582662432},{"_id":"public/2024/10/farewell-address-to-the-nation-by-bill-clinton/index.html","hash":"6aec4f8d6737dbf7a4d9111247d59914209ffac3","modified":1729582662432},{"_id":"public/2024/10/how-to-improve-spoken-english/index.html","hash":"e702d955d5a69bf781f1b1d93c4228b3728a9440","modified":1729582662432},{"_id":"public/2024/10/how-to-claim-your-leadership-power/index.html","hash":"84d0c7454f8059b022c585ea8ffa444cda696931","modified":1729582662432},{"_id":"public/2017/05/javascript-this/index.html","hash":"2e4be419a017d8dd4029b9b075e9941a4d2b27db","modified":1729582662432},{"_id":"public/2017/05/cookie-localstorage-sessionstorage/index.html","hash":"36d90953388a7581fed599942235ed58b3749cdc","modified":1729582662432},{"_id":"public/2017/05/standards-mode-quirks-mode/index.html","hash":"52211bd68f9e2e1f712891dcbcca0c3acb22f9b4","modified":1729582662432},{"_id":"public/2016/11/prototype/index.html","hash":"1eb94e0dd262208e21be902fed60d9f3624cc520","modified":1729582662432},{"_id":"public/2016/11/typeof/index.html","hash":"02835215b77ef3a453a79dbe6cbc4d6bf074e409","modified":1729582662432},{"_id":"public/2016/11/array-like-objects/index.html","hash":"fed8a052ffd01475bf5bddac2561890549d6a924","modified":1729582662432},{"_id":"public/2016/11/bfc/index.html","hash":"2ffd73cf0feeea92e75385c86ba0e8af85f3fc1a","modified":1729582662432},{"_id":"public/2016/11/margin-collapse/index.html","hash":"dbbdb404c5055725cef771a95ce8490913510f1c","modified":1729582662432},{"_id":"public/2016/11/3-col-layout/index.html","hash":"cb5fdf88a8e0aa931715e224ae7f5ca07ca4fe0f","modified":1729582662432},{"_id":"public/2016/11/call-apply-bind/index.html","hash":"4bdf7ed48cdcb53803a0bd575f263cb6c3ffb84f","modified":1729582662432},{"_id":"public/2016/11/string-trim/index.html","hash":"351ff2b0b1577fff59787424d716d9a07d425599","modified":1729582662432},{"_id":"public/2016/10/git-n-operations/index.html","hash":"b1c09c25303dbf60e3cdb16cb79b1632c91c45d1","modified":1729582662432},{"_id":"public/2016/10/semver/index.html","hash":"fe84198e4040b58cceeb9f8fba820a4e34b5c127","modified":1729582662432},{"_id":"public/2016/05/nice-to-meet-you/index.html","hash":"62ba02dd250f054dc019db413713ec0431b8563d","modified":1729582662432},{"_id":"public/2016/05/lie/index.html","hash":"be485609013f8b8879a6a4a67e80e76d5e1cd888","modified":1729582662432},{"_id":"public/2016/04/pardon/index.html","hash":"602f571f8b59b9c36c640bb098e84bef5d1210ee","modified":1729582662432},{"_id":"public/2016/04/wish-you-were-here/index.html","hash":"764a62d45a0df734a5810462e9cb2aaf0711d4f9","modified":1729582662432},{"_id":"public/2016/04/what-a-life/index.html","hash":"fde79a1881e04d3b0b835fa8a9c073608901646e","modified":1729582662432},{"_id":"public/2016/04/comfortably-numb/index.html","hash":"29bd3dbe5810d75b23a2fa1d6602a71fcc2b6bee","modified":1729582662432},{"_id":"public/tags/speech/index.html","hash":"9874791e833fa7093536032bd723033abe5fd8a0","modified":1729582662432},{"_id":"public/tags/self-improvement/index.html","hash":"e6c67343ead8f596feab501b6fd34cbcf53d3316","modified":1729582662432},{"_id":"public/tags/ielts/index.html","hash":"08bbb36628a339447873fe304b57a1c67bd4dd03","modified":1729582662432},{"_id":"public/tags/english-learning/index.html","hash":"1ab2d7a45433ddaca243d744c3a08020e5bb2dcc","modified":1729582662432},{"_id":"public/tags/tech/index.html","hash":"8685b856d3a8bf9436b5830b73d7dcf4fde3c1e4","modified":1729582662432},{"_id":"public/tags/life/index.html","hash":"ec95808c865f408fdfdaeebd0175e7b2f9ed9993","modified":1729582662432},{"_id":"public/tags/music/index.html","hash":"7c7fe91529b27838fd15636b8d787db33a3e2b71","modified":1729582662432},{"_id":"public/archives/2016/index.html","hash":"b5a6bcf6bcfc9561917a3bac6fb04949bbd4cd68","modified":1729582662432},{"_id":"public/archives/2016/04/index.html","hash":"b6dfe73462ca63113db6a1caed518363e20d4b22","modified":1729582662432},{"_id":"public/archives/2016/05/index.html","hash":"636a4cf5445c26ed904bb6692fe485964953a963","modified":1729582662432},{"_id":"public/archives/2016/10/index.html","hash":"16bd7d49a454ce88ee40169d9006fcd28e77f835","modified":1729582662432},{"_id":"public/archives/2016/11/index.html","hash":"35038859c7b5801e62a7198ccee7789fb92e9934","modified":1729582662432},{"_id":"public/archives/2017/index.html","hash":"80489b05ebb953729453b90aa220d99121d7ab3f","modified":1729582662432},{"_id":"public/archives/2017/05/index.html","hash":"80489b05ebb953729453b90aa220d99121d7ab3f","modified":1729582662432},{"_id":"public/assets/images/posts/bfc/bfc-clearfix-1.png","hash":"048c608dc212e2b36ba5a3ca214356dec17f2402","modified":1729582662432},{"_id":"public/assets/images/posts/bfc/bfc-fluid-layout.png","hash":"0ca830488f027d8adae492d81eddfb2321f91a23","modified":1729582662432},{"_id":"public/assets/images/posts/bfc/bfc-clearfix.png","hash":"1c333bb74b3d569492875506015000c5a0cfa879","modified":1729582662432},{"_id":"public/assets/images/posts/bfc/margin-collapse.png","hash":"1278ccd5ce5a57f589964d2f642816cfede2917a","modified":1729582662432},{"_id":"public/assets/images/posts/bfc/bfc-default-layout.png","hash":"c2fc8a301e20fc427d8e8f46d03533e34f6c4743","modified":1729582662432},{"_id":"public/assets/images/posts/bfc/margin-not-collapse.png","hash":"66e9376e72dbbc981f90f11530ed27d23895dc14","modified":1729582662432},{"_id":"public/assets/images/posts/git/git_commit.png","hash":"8704265d3dc9867a176e7716dabd6f12e638cc67","modified":1729582662432},{"_id":"public/assets/images/posts/git/git_draft.jpg","hash":"7e606f52e92c01226a807403c9b33c1891ce6b14","modified":1729582662432},{"_id":"public/assets/images/posts/git/git_log.jpg","hash":"5be99ad071ed89ae45f9903c4606711dbafa2f01","modified":1729582662432},{"_id":"public/assets/images/posts/git/git_status.png","hash":"ddba8f82b50094c2f71339acb2bd5f685e06e1d2","modified":1729582662432},{"_id":"public/assets/images/favicon.png","hash":"01fec5bc7b8d7a26b5e85b7f2db8642e1c104945","modified":1729582662432},{"_id":"public/assets/images/posts/git/git_diff.png","hash":"21f73f2e0f8f843148aa51832bbe4f8ea5edecd3","modified":1729582662432},{"_id":"public/assets/images/posts/prototype/layout.jpg","hash":"5779480a3804589973d67dbbfabb5f20e881e085","modified":1729582662432},{"_id":"public/assets/images/posts/git/clone.jpg","hash":"838e20e8f4b18626da8c24d7f3212fb7bd61a0df","modified":1729582662432}],"Category":[{"name":"Foo","_id":"cm2k1ul730006h404auq1bv7f"},{"name":"Bar","parent":"cm2k1ul730006h404auq1bv7f","_id":"cm2k1ul7d000ch404g7ochxpu"},{"name":"Baz","parent":"cm2k1ul7d000ch404g7ochxpu","_id":"cm2k1ul7g000gh4042ezx10b2"}],"Data":[],"Page":[{"title":"Untagged","date":"2023-08-17T09:31:00.000Z","type":"tags","layout":"untagged","_content":"","source":"tags/Untagged.md","raw":"title: Untagged\ndate: 2023-08-17 17:31:00\ntype: \"tags\"\nlayout: \"untagged\"\n---\n","updated":"2024-10-22T06:12:29.404Z","path":"tags/Untagged.html","comments":1,"_id":"cm2k1ul6q0000h40404uz6b78","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Tags","date":"2023-08-17T09:31:00.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"title: Tags\ndate: 2023-08-17 17:31:00\ntype: \"tags\"\nlayout: \"tags\"\n---\n","updated":"2024-10-22T06:12:29.405Z","path":"tags/index.html","comments":1,"_id":"cm2k1ul6w0002h4049as0cq32","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"About","sitemap":"ture","layout":"about","_content":"\n随意留言。\n","source":"about/index.md","raw":"---\ntitle: About\nsitemap: ture\nlayout: \"about\"\n---\n\n随意留言。\n","date":"2024-10-22T06:12:29.404Z","updated":"2024-10-22T06:12:29.404Z","path":"about/index.html","comments":1,"_id":"cm2k1ul710004h4048lrca0v3","content":"<p>随意留言。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>随意留言。</p>\n"},{"title":"404","date":"2023-08-17T09:31:00.000Z","type":"404","layout":"404","_content":"\n","source":"404/index.md","raw":"title: 404\ndate: 2023-08-17 17:31:00\ntype: \"404\"\nlayout: \"404\"\n---\n\n","updated":"2024-10-22T06:12:29.384Z","path":"404/index.html","comments":1,"_id":"cm2k1ul760007h4043kb78djv","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Farewell Address to the Nation by Bill Clinton","date":"2024-10-22T04:00:00.000Z","_content":"\n>This address was delivered on January 18, 2001\n> \n> William J. Clinton (42nd President of the United States: 1993 - 2001), Farewell Address to the Nation Online by Gerhard Peters and John T. Woolley, The American Presidency Project [https://www.presidency.ucsb.edu/node/227701](https://www.presidency.ucsb.edu/node/227701)\n\nMy fellow citizens, tonight is my last opportunity to speak to you from the Oval Office as your President. I am profoundly grateful to you for twice giving me the honor to serve, to work for you and with you to prepare our Nation for the 21st century.\n\nAnd I'm grateful to Vice President Gore, to my Cabinet Secretaries, and to all those who have served with me for the last 8 years.\n\nThis has been a time of dramatic transformation, and you have risen to every new challenge. You have made our social fabric stronger, our families healthier and safer, our people more <mark>prosperous</mark>. You, the American people, have made our passage into the global information age an era of great American renewal.\n\nIn all the work I have done as President — every decision I have made, every executive action I have taken, every <mark>bill I have proposed and signed</mark> — I've tried to give all Americans the tools and conditions to build the future of our dreams in a good society with a strong economy, a cleaner environment, and a freer, safer, more <mark>prosperous</mark> world.\n\nI have steered my course by our enduring values: opportunity for all, responsibility from all, a community of all Americans. I have sought to give America a new kind of Government, smaller, more modern, more effective, full of ideas and policies appropriate to this new time, always putting people first, always focusing on the future.\n\nWorking together, America has done well. Our economy is breaking records with more than 22 million new jobs, the lowest unemployment in 30 years, the highest homeownership ever, the longest expansion in history. Our families and communities are stronger. Thirty-five million Americans have used the family leave law; 8 million have moved off welfare. Crime is at a 25-year low. Over 10 million Americans receive more college aid, and more people than ever are going to college. Our schools are better. Higher standards, greater <mark>accountability</mark>, and larger investments have brought higher test scores and higher graduation rates. More than 3 million children have health insurance now, and more than 7 million Americans have been lifted out of poverty. Incomes are rising across the board. Our air and water are cleaner. Our food and drinking water are safer. And more of our <mark>precious</mark> land has been <mark>preserved</mark> in the continental United States than at any time in a 100 years.\n\nAmerica has been a force for peace and <mark>prosperity</mark> in every corner of the globe. I'm very grateful to be able to turn over the <mark>reins</mark> of leadership to a new President with America in such a strong position to meet the challenges of the future.\n\nTonight I want to leave you with three thoughts about our future.\n\nFirst, America must maintain our record of <mark>fiscal</mark> responsibility. Through our last four budgets we've turned record <mark>deficits</mark> to record <mark>surpluses</mark>, and we've been able to pay down $600 billion of our national debt — on track to be debt-free by the end of the decade for the first time since 1835. Staying on that course will bring lower interest rates, greater <mark>prosperity</mark>, and the opportunity to meet our big challenges. If we choose wisely, we can pay down the debt, deal with the retirement of the baby boomers, invest more in our future, and provide tax relief.\n\nSecond, because the world is more connected every day, in every way, America's security and <mark>prosperity</mark> require us to continue to lead in the world. At this remarkable moment in history, more people live in freedom than ever before. Our alliances are stronger than ever. People all around the world look to America to be a force for peace and <mark>prosperity</mark>, freedom and security. The global economy is giving more of our own people and billions around the world the chance to work and live and raise their families with dignity. But the forces of <mark>integration</mark> that have created these good opportunities also make us more <mark>subject</mark> to global forces of destruction, to <mark>terrorism</mark>, organized crime and <mark>narcotrafficking</mark>, the spread of deadly weapons and disease, the <mark>degradation</mark> of the global environment.\n\nThe expansion of trade hasn't fully closed the gap between those of us who live on the cutting edge of the global economy and the billions around the world who live on the knife's edge of survival. This global gap requires more than <mark>compassion</mark>; it requires action. Global poverty is a <mark>powder keg</mark> that could be <mark>ignited</mark> by our <mark>indifference</mark>.\n\nIn his first <mark>Inaugural Address</mark>, Thomas Jefferson warned of <mark>entangling alliances</mark>. But in our times, America cannot and must not <mark>disentangle</mark> itself from the world. If we want the world to <mark>embody</mark> our shared values, then we must <mark>assume</mark> a shared responsibility.\n\nIf the wars of the 20th century, especially the recent ones in Kosovo and Bosnia, have taught us anything, it is that we achieve our aims by defending our values and leading the forces of freedom and peace. We must embrace boldly and <mark>resolutely</mark> that duty to lead — to stand with our <mark>allies</mark> in word and <mark>deed</mark> and to put a human face on the global economy, so that expanded trade benefits all peoples in all nations, lifting lives and hopes all across the world.\n\nThird, we must remember that America cannot lead in the world unless here at home we weave the threads of our coat of many colors into the fabric of one America. As we become ever more diverse, we must work harder to unite around our common values and our common humanity. We must work harder to overcome our differences, in our hearts and in our laws. We must treat all our people with fairness and dignity, regardless of their race, religion, gender, or sexual orientation, and regardless of when they arrived in our country — always moving toward the more perfect Union of our Founders' dreams.\n\nHillary, Chelsea, and I join all Americans in wishing our very best to the next President, George W. Bush, to his family and his administration, in meeting these challenges, and in leading freedom's march in this new century.\n\nAs for me, I'll leave the <mark>Presidency</mark> more <mark>idealistic</mark>, more full of hope than the day I arrived, and more confident than ever that America's best days lie ahead.\n\nMy days in this office are nearly through, but my days of service, I hope, are not. In the years ahead, I will never hold a position higher or a <mark>covenant</mark> more <mark>sacred</mark> than that of President of the United States. But there is no title I will wear more proudly than that of citizen.\n\nThank you. God bless you, and God bless America.\n\n*NOTE: The President spoke at 8 p.m. from the Oval Office at the White House.*\n\n<div id=\"marked-list\">\n  <h1>Marked</h1>\n</div>\n\n<script>\n  (function() {\n    const markedEl = document.querySelectorAll('mark');\n    const ul = document.createElement('ul');\n\n    const uniqueTexts = new Set();\n\n    markedEl.forEach(el => {\n      const text = el.textContent;\n\n      if (!uniqueTexts.has(text)) {\n        uniqueTexts.add(text);\n        \n        const li = document.createElement('li');\n        li.textContent = text;\n        \n        ul.appendChild(li);\n      }\n    });\n    \n    document.getElementById('marked-list').appendChild(ul);\n  })();\n</script>\n\n\n","source":"_posts/farewell-address-to-the-nation-by-bill-clinton.md","raw":"---\ntitle: Farewell Address to the Nation by Bill Clinton\ndate: 2024-10-22 12:00\ntags:\n- speech\n---\n\n>This address was delivered on January 18, 2001\n> \n> William J. Clinton (42nd President of the United States: 1993 - 2001), Farewell Address to the Nation Online by Gerhard Peters and John T. Woolley, The American Presidency Project [https://www.presidency.ucsb.edu/node/227701](https://www.presidency.ucsb.edu/node/227701)\n\nMy fellow citizens, tonight is my last opportunity to speak to you from the Oval Office as your President. I am profoundly grateful to you for twice giving me the honor to serve, to work for you and with you to prepare our Nation for the 21st century.\n\nAnd I'm grateful to Vice President Gore, to my Cabinet Secretaries, and to all those who have served with me for the last 8 years.\n\nThis has been a time of dramatic transformation, and you have risen to every new challenge. You have made our social fabric stronger, our families healthier and safer, our people more <mark>prosperous</mark>. You, the American people, have made our passage into the global information age an era of great American renewal.\n\nIn all the work I have done as President — every decision I have made, every executive action I have taken, every <mark>bill I have proposed and signed</mark> — I've tried to give all Americans the tools and conditions to build the future of our dreams in a good society with a strong economy, a cleaner environment, and a freer, safer, more <mark>prosperous</mark> world.\n\nI have steered my course by our enduring values: opportunity for all, responsibility from all, a community of all Americans. I have sought to give America a new kind of Government, smaller, more modern, more effective, full of ideas and policies appropriate to this new time, always putting people first, always focusing on the future.\n\nWorking together, America has done well. Our economy is breaking records with more than 22 million new jobs, the lowest unemployment in 30 years, the highest homeownership ever, the longest expansion in history. Our families and communities are stronger. Thirty-five million Americans have used the family leave law; 8 million have moved off welfare. Crime is at a 25-year low. Over 10 million Americans receive more college aid, and more people than ever are going to college. Our schools are better. Higher standards, greater <mark>accountability</mark>, and larger investments have brought higher test scores and higher graduation rates. More than 3 million children have health insurance now, and more than 7 million Americans have been lifted out of poverty. Incomes are rising across the board. Our air and water are cleaner. Our food and drinking water are safer. And more of our <mark>precious</mark> land has been <mark>preserved</mark> in the continental United States than at any time in a 100 years.\n\nAmerica has been a force for peace and <mark>prosperity</mark> in every corner of the globe. I'm very grateful to be able to turn over the <mark>reins</mark> of leadership to a new President with America in such a strong position to meet the challenges of the future.\n\nTonight I want to leave you with three thoughts about our future.\n\nFirst, America must maintain our record of <mark>fiscal</mark> responsibility. Through our last four budgets we've turned record <mark>deficits</mark> to record <mark>surpluses</mark>, and we've been able to pay down $600 billion of our national debt — on track to be debt-free by the end of the decade for the first time since 1835. Staying on that course will bring lower interest rates, greater <mark>prosperity</mark>, and the opportunity to meet our big challenges. If we choose wisely, we can pay down the debt, deal with the retirement of the baby boomers, invest more in our future, and provide tax relief.\n\nSecond, because the world is more connected every day, in every way, America's security and <mark>prosperity</mark> require us to continue to lead in the world. At this remarkable moment in history, more people live in freedom than ever before. Our alliances are stronger than ever. People all around the world look to America to be a force for peace and <mark>prosperity</mark>, freedom and security. The global economy is giving more of our own people and billions around the world the chance to work and live and raise their families with dignity. But the forces of <mark>integration</mark> that have created these good opportunities also make us more <mark>subject</mark> to global forces of destruction, to <mark>terrorism</mark>, organized crime and <mark>narcotrafficking</mark>, the spread of deadly weapons and disease, the <mark>degradation</mark> of the global environment.\n\nThe expansion of trade hasn't fully closed the gap between those of us who live on the cutting edge of the global economy and the billions around the world who live on the knife's edge of survival. This global gap requires more than <mark>compassion</mark>; it requires action. Global poverty is a <mark>powder keg</mark> that could be <mark>ignited</mark> by our <mark>indifference</mark>.\n\nIn his first <mark>Inaugural Address</mark>, Thomas Jefferson warned of <mark>entangling alliances</mark>. But in our times, America cannot and must not <mark>disentangle</mark> itself from the world. If we want the world to <mark>embody</mark> our shared values, then we must <mark>assume</mark> a shared responsibility.\n\nIf the wars of the 20th century, especially the recent ones in Kosovo and Bosnia, have taught us anything, it is that we achieve our aims by defending our values and leading the forces of freedom and peace. We must embrace boldly and <mark>resolutely</mark> that duty to lead — to stand with our <mark>allies</mark> in word and <mark>deed</mark> and to put a human face on the global economy, so that expanded trade benefits all peoples in all nations, lifting lives and hopes all across the world.\n\nThird, we must remember that America cannot lead in the world unless here at home we weave the threads of our coat of many colors into the fabric of one America. As we become ever more diverse, we must work harder to unite around our common values and our common humanity. We must work harder to overcome our differences, in our hearts and in our laws. We must treat all our people with fairness and dignity, regardless of their race, religion, gender, or sexual orientation, and regardless of when they arrived in our country — always moving toward the more perfect Union of our Founders' dreams.\n\nHillary, Chelsea, and I join all Americans in wishing our very best to the next President, George W. Bush, to his family and his administration, in meeting these challenges, and in leading freedom's march in this new century.\n\nAs for me, I'll leave the <mark>Presidency</mark> more <mark>idealistic</mark>, more full of hope than the day I arrived, and more confident than ever that America's best days lie ahead.\n\nMy days in this office are nearly through, but my days of service, I hope, are not. In the years ahead, I will never hold a position higher or a <mark>covenant</mark> more <mark>sacred</mark> than that of President of the United States. But there is no title I will wear more proudly than that of citizen.\n\nThank you. God bless you, and God bless America.\n\n*NOTE: The President spoke at 8 p.m. from the Oval Office at the White House.*\n\n<div id=\"marked-list\">\n  <h1>Marked</h1>\n</div>\n\n<script>\n  (function() {\n    const markedEl = document.querySelectorAll('mark');\n    const ul = document.createElement('ul');\n\n    const uniqueTexts = new Set();\n\n    markedEl.forEach(el => {\n      const text = el.textContent;\n\n      if (!uniqueTexts.has(text)) {\n        uniqueTexts.add(text);\n        \n        const li = document.createElement('li');\n        li.textContent = text;\n        \n        ul.appendChild(li);\n      }\n    });\n    \n    document.getElementById('marked-list').appendChild(ul);\n  })();\n</script>\n\n\n","slug":"farewell-address-to-the-nation-by-bill-clinton","published":1,"updated":"2024-10-22T06:50:23.022Z","_id":"cm2k2yhe5000oi804995f2v8p","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>This address was delivered on January 18, 2001</p>\n<p>William J. Clinton (42nd President of the United States: 1993 - 2001), Farewell Address to the Nation Online by Gerhard Peters and John T. Woolley, The American Presidency Project <a href=\"https://www.presidency.ucsb.edu/node/227701\">https://www.presidency.ucsb.edu/node/227701</a></p>\n</blockquote>\n<p>My fellow citizens, tonight is my last opportunity to speak to you from the Oval Office as your President. I am profoundly grateful to you for twice giving me the honor to serve, to work for you and with you to prepare our Nation for the 21st century.</p>\n<p>And I’m grateful to Vice President Gore, to my Cabinet Secretaries, and to all those who have served with me for the last 8 years.</p>\n<p>This has been a time of dramatic transformation, and you have risen to every new challenge. You have made our social fabric stronger, our families healthier and safer, our people more <mark>prosperous</mark>. You, the American people, have made our passage into the global information age an era of great American renewal.</p>\n<p>In all the work I have done as President — every decision I have made, every executive action I have taken, every <mark>bill I have proposed and signed</mark> — I’ve tried to give all Americans the tools and conditions to build the future of our dreams in a good society with a strong economy, a cleaner environment, and a freer, safer, more <mark>prosperous</mark> world.</p>\n<p>I have steered my course by our enduring values: opportunity for all, responsibility from all, a community of all Americans. I have sought to give America a new kind of Government, smaller, more modern, more effective, full of ideas and policies appropriate to this new time, always putting people first, always focusing on the future.</p>\n<p>Working together, America has done well. Our economy is breaking records with more than 22 million new jobs, the lowest unemployment in 30 years, the highest homeownership ever, the longest expansion in history. Our families and communities are stronger. Thirty-five million Americans have used the family leave law; 8 million have moved off welfare. Crime is at a 25-year low. Over 10 million Americans receive more college aid, and more people than ever are going to college. Our schools are better. Higher standards, greater <mark>accountability</mark>, and larger investments have brought higher test scores and higher graduation rates. More than 3 million children have health insurance now, and more than 7 million Americans have been lifted out of poverty. Incomes are rising across the board. Our air and water are cleaner. Our food and drinking water are safer. And more of our <mark>precious</mark> land has been <mark>preserved</mark> in the continental United States than at any time in a 100 years.</p>\n<p>America has been a force for peace and <mark>prosperity</mark> in every corner of the globe. I’m very grateful to be able to turn over the <mark>reins</mark> of leadership to a new President with America in such a strong position to meet the challenges of the future.</p>\n<p>Tonight I want to leave you with three thoughts about our future.</p>\n<p>First, America must maintain our record of <mark>fiscal</mark> responsibility. Through our last four budgets we’ve turned record <mark>deficits</mark> to record <mark>surpluses</mark>, and we’ve been able to pay down $600 billion of our national debt — on track to be debt-free by the end of the decade for the first time since 1835. Staying on that course will bring lower interest rates, greater <mark>prosperity</mark>, and the opportunity to meet our big challenges. If we choose wisely, we can pay down the debt, deal with the retirement of the baby boomers, invest more in our future, and provide tax relief.</p>\n<p>Second, because the world is more connected every day, in every way, America’s security and <mark>prosperity</mark> require us to continue to lead in the world. At this remarkable moment in history, more people live in freedom than ever before. Our alliances are stronger than ever. People all around the world look to America to be a force for peace and <mark>prosperity</mark>, freedom and security. The global economy is giving more of our own people and billions around the world the chance to work and live and raise their families with dignity. But the forces of <mark>integration</mark> that have created these good opportunities also make us more <mark>subject</mark> to global forces of destruction, to <mark>terrorism</mark>, organized crime and <mark>narcotrafficking</mark>, the spread of deadly weapons and disease, the <mark>degradation</mark> of the global environment.</p>\n<p>The expansion of trade hasn’t fully closed the gap between those of us who live on the cutting edge of the global economy and the billions around the world who live on the knife’s edge of survival. This global gap requires more than <mark>compassion</mark>; it requires action. Global poverty is a <mark>powder keg</mark> that could be <mark>ignited</mark> by our <mark>indifference</mark>.</p>\n<p>In his first <mark>Inaugural Address</mark>, Thomas Jefferson warned of <mark>entangling alliances</mark>. But in our times, America cannot and must not <mark>disentangle</mark> itself from the world. If we want the world to <mark>embody</mark> our shared values, then we must <mark>assume</mark> a shared responsibility.</p>\n<p>If the wars of the 20th century, especially the recent ones in Kosovo and Bosnia, have taught us anything, it is that we achieve our aims by defending our values and leading the forces of freedom and peace. We must embrace boldly and <mark>resolutely</mark> that duty to lead — to stand with our <mark>allies</mark> in word and <mark>deed</mark> and to put a human face on the global economy, so that expanded trade benefits all peoples in all nations, lifting lives and hopes all across the world.</p>\n<p>Third, we must remember that America cannot lead in the world unless here at home we weave the threads of our coat of many colors into the fabric of one America. As we become ever more diverse, we must work harder to unite around our common values and our common humanity. We must work harder to overcome our differences, in our hearts and in our laws. We must treat all our people with fairness and dignity, regardless of their race, religion, gender, or sexual orientation, and regardless of when they arrived in our country — always moving toward the more perfect Union of our Founders’ dreams.</p>\n<p>Hillary, Chelsea, and I join all Americans in wishing our very best to the next President, George W. Bush, to his family and his administration, in meeting these challenges, and in leading freedom’s march in this new century.</p>\n<p>As for me, I’ll leave the <mark>Presidency</mark> more <mark>idealistic</mark>, more full of hope than the day I arrived, and more confident than ever that America’s best days lie ahead.</p>\n<p>My days in this office are nearly through, but my days of service, I hope, are not. In the years ahead, I will never hold a position higher or a <mark>covenant</mark> more <mark>sacred</mark> than that of President of the United States. But there is no title I will wear more proudly than that of citizen.</p>\n<p>Thank you. God bless you, and God bless America.</p>\n<p><em>NOTE: The President spoke at 8 p.m. from the Oval Office at the White House.</em></p>\n<div id=\"marked-list\">\n  <h1>Marked</h1>\n</div>\n<script>\n  (function() {\n    const markedEl = document.querySelectorAll('mark');\n    const ul = document.createElement('ul');\n\n    const uniqueTexts = new Set();\n\n    markedEl.forEach(el => {\n      const text = el.textContent;\n\n      if (!uniqueTexts.has(text)) {\n        uniqueTexts.add(text);\n        \n        const li = document.createElement('li');\n        li.textContent = text;\n        \n        ul.appendChild(li);\n      }\n    });\n    \n    document.getElementById('marked-list').appendChild(ul);\n  })();\n</script>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>This address was delivered on January 18, 2001</p>\n<p>William J. Clinton (42nd President of the United States: 1993 - 2001), Farewell Address to the Nation Online by Gerhard Peters and John T. Woolley, The American Presidency Project <a href=\"https://www.presidency.ucsb.edu/node/227701\">https://www.presidency.ucsb.edu/node/227701</a></p>\n</blockquote>\n<p>My fellow citizens, tonight is my last opportunity to speak to you from the Oval Office as your President. I am profoundly grateful to you for twice giving me the honor to serve, to work for you and with you to prepare our Nation for the 21st century.</p>\n<p>And I’m grateful to Vice President Gore, to my Cabinet Secretaries, and to all those who have served with me for the last 8 years.</p>\n<p>This has been a time of dramatic transformation, and you have risen to every new challenge. You have made our social fabric stronger, our families healthier and safer, our people more <mark>prosperous</mark>. You, the American people, have made our passage into the global information age an era of great American renewal.</p>\n<p>In all the work I have done as President — every decision I have made, every executive action I have taken, every <mark>bill I have proposed and signed</mark> — I’ve tried to give all Americans the tools and conditions to build the future of our dreams in a good society with a strong economy, a cleaner environment, and a freer, safer, more <mark>prosperous</mark> world.</p>\n<p>I have steered my course by our enduring values: opportunity for all, responsibility from all, a community of all Americans. I have sought to give America a new kind of Government, smaller, more modern, more effective, full of ideas and policies appropriate to this new time, always putting people first, always focusing on the future.</p>\n<p>Working together, America has done well. Our economy is breaking records with more than 22 million new jobs, the lowest unemployment in 30 years, the highest homeownership ever, the longest expansion in history. Our families and communities are stronger. Thirty-five million Americans have used the family leave law; 8 million have moved off welfare. Crime is at a 25-year low. Over 10 million Americans receive more college aid, and more people than ever are going to college. Our schools are better. Higher standards, greater <mark>accountability</mark>, and larger investments have brought higher test scores and higher graduation rates. More than 3 million children have health insurance now, and more than 7 million Americans have been lifted out of poverty. Incomes are rising across the board. Our air and water are cleaner. Our food and drinking water are safer. And more of our <mark>precious</mark> land has been <mark>preserved</mark> in the continental United States than at any time in a 100 years.</p>\n<p>America has been a force for peace and <mark>prosperity</mark> in every corner of the globe. I’m very grateful to be able to turn over the <mark>reins</mark> of leadership to a new President with America in such a strong position to meet the challenges of the future.</p>\n<p>Tonight I want to leave you with three thoughts about our future.</p>\n<p>First, America must maintain our record of <mark>fiscal</mark> responsibility. Through our last four budgets we’ve turned record <mark>deficits</mark> to record <mark>surpluses</mark>, and we’ve been able to pay down $600 billion of our national debt — on track to be debt-free by the end of the decade for the first time since 1835. Staying on that course will bring lower interest rates, greater <mark>prosperity</mark>, and the opportunity to meet our big challenges. If we choose wisely, we can pay down the debt, deal with the retirement of the baby boomers, invest more in our future, and provide tax relief.</p>\n<p>Second, because the world is more connected every day, in every way, America’s security and <mark>prosperity</mark> require us to continue to lead in the world. At this remarkable moment in history, more people live in freedom than ever before. Our alliances are stronger than ever. People all around the world look to America to be a force for peace and <mark>prosperity</mark>, freedom and security. The global economy is giving more of our own people and billions around the world the chance to work and live and raise their families with dignity. But the forces of <mark>integration</mark> that have created these good opportunities also make us more <mark>subject</mark> to global forces of destruction, to <mark>terrorism</mark>, organized crime and <mark>narcotrafficking</mark>, the spread of deadly weapons and disease, the <mark>degradation</mark> of the global environment.</p>\n<p>The expansion of trade hasn’t fully closed the gap between those of us who live on the cutting edge of the global economy and the billions around the world who live on the knife’s edge of survival. This global gap requires more than <mark>compassion</mark>; it requires action. Global poverty is a <mark>powder keg</mark> that could be <mark>ignited</mark> by our <mark>indifference</mark>.</p>\n<p>In his first <mark>Inaugural Address</mark>, Thomas Jefferson warned of <mark>entangling alliances</mark>. But in our times, America cannot and must not <mark>disentangle</mark> itself from the world. If we want the world to <mark>embody</mark> our shared values, then we must <mark>assume</mark> a shared responsibility.</p>\n<p>If the wars of the 20th century, especially the recent ones in Kosovo and Bosnia, have taught us anything, it is that we achieve our aims by defending our values and leading the forces of freedom and peace. We must embrace boldly and <mark>resolutely</mark> that duty to lead — to stand with our <mark>allies</mark> in word and <mark>deed</mark> and to put a human face on the global economy, so that expanded trade benefits all peoples in all nations, lifting lives and hopes all across the world.</p>\n<p>Third, we must remember that America cannot lead in the world unless here at home we weave the threads of our coat of many colors into the fabric of one America. As we become ever more diverse, we must work harder to unite around our common values and our common humanity. We must work harder to overcome our differences, in our hearts and in our laws. We must treat all our people with fairness and dignity, regardless of their race, religion, gender, or sexual orientation, and regardless of when they arrived in our country — always moving toward the more perfect Union of our Founders’ dreams.</p>\n<p>Hillary, Chelsea, and I join all Americans in wishing our very best to the next President, George W. Bush, to his family and his administration, in meeting these challenges, and in leading freedom’s march in this new century.</p>\n<p>As for me, I’ll leave the <mark>Presidency</mark> more <mark>idealistic</mark>, more full of hope than the day I arrived, and more confident than ever that America’s best days lie ahead.</p>\n<p>My days in this office are nearly through, but my days of service, I hope, are not. In the years ahead, I will never hold a position higher or a <mark>covenant</mark> more <mark>sacred</mark> than that of President of the United States. But there is no title I will wear more proudly than that of citizen.</p>\n<p>Thank you. God bless you, and God bless America.</p>\n<p><em>NOTE: The President spoke at 8 p.m. from the Oval Office at the White House.</em></p>\n<div id=\"marked-list\">\n  <h1>Marked</h1>\n</div>\n<script>\n  (function() {\n    const markedEl = document.querySelectorAll('mark');\n    const ul = document.createElement('ul');\n\n    const uniqueTexts = new Set();\n\n    markedEl.forEach(el => {\n      const text = el.textContent;\n\n      if (!uniqueTexts.has(text)) {\n        uniqueTexts.add(text);\n        \n        const li = document.createElement('li');\n        li.textContent = text;\n        \n        ul.appendChild(li);\n      }\n    });\n    \n    document.getElementById('marked-list').appendChild(ul);\n  })();\n</script>\n"},{"title":"Advantages and disadvantages of social media","date":"2024-10-22T06:00:00.000Z","_content":"\n>\n> Nowadays many people use social media every day to keep in touch with others and news events. Do you think the advantages outweigh the disadvantages? Write an essay with no less than 250 words.\n\nIn today's world, ...","source":"_posts/advantages-and-disadvantages-of-social-media.md","raw":"---\ntitle: Advantages and disadvantages of social media\ndate: 2024-10-22 14:00\ntags:\n- ielts\n- english learning\n---\n\n>\n> Nowadays many people use social media every day to keep in touch with others and news events. Do you think the advantages outweigh the disadvantages? Write an essay with no less than 250 words.\n\nIn today's world, ...","slug":"advantages-and-disadvantages-of-social-media","published":1,"updated":"2024-10-22T06:51:03.127Z","_id":"cm2k30b8x000pi8042m5r51zp","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>Nowadays many people use social media every day to keep in touch with others and news events. Do you think the advantages outweigh the disadvantages? Write an essay with no less than 250 words.</p>\n</blockquote>\n<p>In today’s world, …</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>Nowadays many people use social media every day to keep in touch with others and news events. Do you think the advantages outweigh the disadvantages? Write an essay with no less than 250 words.</p>\n</blockquote>\n<p>In today’s world, …</p>\n"},{"title":"How to Improve Spoken English","date":"2024-10-18T06:00:00.000Z","_content":"\nSource post URL: [https://engfluent.com/how-to-improve-spoken-english/](https://engfluent.com/how-to-improve-spoken-english/)\n\nI've read a post on website [engfluent.com](https://engfluent.com/) about improving spoken English. Today I'm going to summarize it.\n\n## Chapter 1: Implicit vs Explicit Knowledge\n\nYou cannot impove your speaking by studying the English grammar. Because speaking is an implicit knowledge, while grammar is an explicit knowledge. \n\nImplicit Knowledge is knowledge you can use automatically, without conscious attention, and it's fast, automatic, and effortless. Activities like riding a bicycle, playing a musical instument, and speaking your native language are all implicit knowledges. In comparison, explicit knowledge is slow, non-automatic, and effortful such as solving a math problem, explaining the grammer rules to someone, etc.\n\nIf you want to speak good English, you must gain your time on implicit knowledge while reduce time on activities that result in explicit knowledge.\n\n\n## Chapter 2: Three ways to improve your English speaking skills\n\n### Method 1: Listen to English conversations\n\nWhen you're listening to an English conversation, the unconscious part of your brain is learning English without  awareness. You can listen English through podcasts or from a Youtube channel on whatever the topics you're interested in. After a period of time you spend on listening, you will learn so many methods that other people express a certain idea. And when it's time for you to output, you'll have so many matetials to choose from.\n\n### Method 2: Practice speaking English\n\nIf you want to improve your speaking, listening alone is not enough. You have to open your mouth and speak something. As I'm living in China with no English-speaking environment, I have 3 ways to practice speaking:\n\n1. Speak to myself while driving\n2. Memorize speeches dilivered by my idols such as the famous speech by Steve Jobs on the commencement of the Stanford University.\n3. Purchase an online course like Cambly to practice speaking with real people.\n\nDon't loose faith and patience. Just try to speak as much as possible.\n\n### Method 3: Read in English\n\nTo speak English well, you must increase your vocabulary, and reading is an excellent way to do that. You can read news, blogs, non-fiction books or novels. Or you can subscribe to some English websites, leave them your email address, and you'll receive emails from the sites, those emails are very good and fresh materials for reading, even if they are ads.\n\nBy engaging in both listening and reading, you learn both the pronunciation and the spelling of English vocabulary. This is a very powerful way to improve your English comprehension.\n\n## Chapter 3: How to add these activities to your daily routine\n\nMost of us are very busy nowadays. But, in order to improve your English, it worth to add these activities to your daily routine.\n\n### Suggestion 1: Listen to English during \"mindless\" activities\n\nYou can listen to English while driving, commuting on public transports, cooking, walking in a park, running excercise, etc. Because these acticivities have one thing in common: you can go through them almost automatically without much thinking.\n\n### Suggestion 2: Practice speaking in the morning\n\nFor the sake of consistent practicing, the author suggested to practice in the morning. Because there are always random events to interrupt you in the evening or at night, such as an invitation for a dinner, a long phone call with your friend or feeling exhausted after a long day of work.\n\nMoreover, morning is the time of day when your energy is at its peak. This makes it easier to get yourself into practice. On the other hand, it's difficult to force yourself to practice in the evening or at the night because during those times, you're usually tired and just want to relax.\n\n### Suggestion 3: Read before bed (and/or during mindless activities)\n\nWhen it's near bedtime, many people like unwind by browsing social media, playing games or checking wechat moments. Replace those activities with English reading, because it's a great way to relax and improve your English at the same time.\n\n## Chapter 4: How to speak English fluently\n\n### 1. Increase the duration of your speaking pactice\n\n1. Reducing the time you spend on social media and other time wasters\n2. Practice long and hard only during weekends or holidays\n\n### 2. Expose yourself to a wide range of vocabulary\n\nThe number of words in English world is enormous. There are not only common words like breakfast, happy, or teacher, but also many proffesional words in different fields such as business, healthcare, science, financial, etc. In order to use these words with ease, remember to vary the English meterials you use. Listen, read and practice with material on many different topics.\n\n### 3. Vary (change) your speaking practice\n\nStudies show that variable practice is an effective way to improve skills.\n\nHere is an example:\n\n1. Practice by immitating native speakers\n2. Switch to talking to yourself about random topics\n3. Switch to chatting with a native speaker through Cambly App\n\n### 4. Give yourself a project to do in English\n\nYou can start a channel on YouTube or Xiaohongshu to introduce what you're recently learning to your subscribers, or share your knowledge of your profession in English. The project will force you to enhance your knowledge and push you to give a clear explanation in English.\n\n### 5. Improve your English pronunciation\n\nRecord yourself talking in English and listen to it. If you have a little accent, it's probably okay, and it won't prevent others from understanding you. But if your accent is too strong, you have to improve your pronunciation as well.\n\n### 6. Be willing to pay the price\n\nSpeaking English is a skill, and just like other skills, you need to invest a lot of time to reach an advanced level. If you don't have enough time, try to reduce the time spent on time wasters, such as:\n\n1. Social media\n2. Movies and TV shows (in your native language)\n3. Pick up your phone too frequently\n\nThese time wasters don't just waste your time, but also cause addiction and weaken your concentration. Althogh it's very hard to do so, always remind yourself *How bad you want to be able to speak English fluently?*\n\nIf you can make those sacrifices, nothing can stop you from becoming fluent in English.","source":"_posts/how-to-improve-spoken-english.md","raw":"---\ntitle: How to Improve Spoken English\ndate: 2024-10-18 14:00\ntags:\n- english learning\n---\n\nSource post URL: [https://engfluent.com/how-to-improve-spoken-english/](https://engfluent.com/how-to-improve-spoken-english/)\n\nI've read a post on website [engfluent.com](https://engfluent.com/) about improving spoken English. Today I'm going to summarize it.\n\n## Chapter 1: Implicit vs Explicit Knowledge\n\nYou cannot impove your speaking by studying the English grammar. Because speaking is an implicit knowledge, while grammar is an explicit knowledge. \n\nImplicit Knowledge is knowledge you can use automatically, without conscious attention, and it's fast, automatic, and effortless. Activities like riding a bicycle, playing a musical instument, and speaking your native language are all implicit knowledges. In comparison, explicit knowledge is slow, non-automatic, and effortful such as solving a math problem, explaining the grammer rules to someone, etc.\n\nIf you want to speak good English, you must gain your time on implicit knowledge while reduce time on activities that result in explicit knowledge.\n\n\n## Chapter 2: Three ways to improve your English speaking skills\n\n### Method 1: Listen to English conversations\n\nWhen you're listening to an English conversation, the unconscious part of your brain is learning English without  awareness. You can listen English through podcasts or from a Youtube channel on whatever the topics you're interested in. After a period of time you spend on listening, you will learn so many methods that other people express a certain idea. And when it's time for you to output, you'll have so many matetials to choose from.\n\n### Method 2: Practice speaking English\n\nIf you want to improve your speaking, listening alone is not enough. You have to open your mouth and speak something. As I'm living in China with no English-speaking environment, I have 3 ways to practice speaking:\n\n1. Speak to myself while driving\n2. Memorize speeches dilivered by my idols such as the famous speech by Steve Jobs on the commencement of the Stanford University.\n3. Purchase an online course like Cambly to practice speaking with real people.\n\nDon't loose faith and patience. Just try to speak as much as possible.\n\n### Method 3: Read in English\n\nTo speak English well, you must increase your vocabulary, and reading is an excellent way to do that. You can read news, blogs, non-fiction books or novels. Or you can subscribe to some English websites, leave them your email address, and you'll receive emails from the sites, those emails are very good and fresh materials for reading, even if they are ads.\n\nBy engaging in both listening and reading, you learn both the pronunciation and the spelling of English vocabulary. This is a very powerful way to improve your English comprehension.\n\n## Chapter 3: How to add these activities to your daily routine\n\nMost of us are very busy nowadays. But, in order to improve your English, it worth to add these activities to your daily routine.\n\n### Suggestion 1: Listen to English during \"mindless\" activities\n\nYou can listen to English while driving, commuting on public transports, cooking, walking in a park, running excercise, etc. Because these acticivities have one thing in common: you can go through them almost automatically without much thinking.\n\n### Suggestion 2: Practice speaking in the morning\n\nFor the sake of consistent practicing, the author suggested to practice in the morning. Because there are always random events to interrupt you in the evening or at night, such as an invitation for a dinner, a long phone call with your friend or feeling exhausted after a long day of work.\n\nMoreover, morning is the time of day when your energy is at its peak. This makes it easier to get yourself into practice. On the other hand, it's difficult to force yourself to practice in the evening or at the night because during those times, you're usually tired and just want to relax.\n\n### Suggestion 3: Read before bed (and/or during mindless activities)\n\nWhen it's near bedtime, many people like unwind by browsing social media, playing games or checking wechat moments. Replace those activities with English reading, because it's a great way to relax and improve your English at the same time.\n\n## Chapter 4: How to speak English fluently\n\n### 1. Increase the duration of your speaking pactice\n\n1. Reducing the time you spend on social media and other time wasters\n2. Practice long and hard only during weekends or holidays\n\n### 2. Expose yourself to a wide range of vocabulary\n\nThe number of words in English world is enormous. There are not only common words like breakfast, happy, or teacher, but also many proffesional words in different fields such as business, healthcare, science, financial, etc. In order to use these words with ease, remember to vary the English meterials you use. Listen, read and practice with material on many different topics.\n\n### 3. Vary (change) your speaking practice\n\nStudies show that variable practice is an effective way to improve skills.\n\nHere is an example:\n\n1. Practice by immitating native speakers\n2. Switch to talking to yourself about random topics\n3. Switch to chatting with a native speaker through Cambly App\n\n### 4. Give yourself a project to do in English\n\nYou can start a channel on YouTube or Xiaohongshu to introduce what you're recently learning to your subscribers, or share your knowledge of your profession in English. The project will force you to enhance your knowledge and push you to give a clear explanation in English.\n\n### 5. Improve your English pronunciation\n\nRecord yourself talking in English and listen to it. If you have a little accent, it's probably okay, and it won't prevent others from understanding you. But if your accent is too strong, you have to improve your pronunciation as well.\n\n### 6. Be willing to pay the price\n\nSpeaking English is a skill, and just like other skills, you need to invest a lot of time to reach an advanced level. If you don't have enough time, try to reduce the time spent on time wasters, such as:\n\n1. Social media\n2. Movies and TV shows (in your native language)\n3. Pick up your phone too frequently\n\nThese time wasters don't just waste your time, but also cause addiction and weaken your concentration. Althogh it's very hard to do so, always remind yourself *How bad you want to be able to speak English fluently?*\n\nIf you can make those sacrifices, nothing can stop you from becoming fluent in English.","slug":"how-to-improve-spoken-english","published":1,"updated":"2024-10-22T06:50:53.459Z","_id":"cm2k33q5r000qi8046dzibo70","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Source post URL: <a href=\"https://engfluent.com/how-to-improve-spoken-english/\">https://engfluent.com/how-to-improve-spoken-english/</a></p>\n<p>I’ve read a post on website <a href=\"https://engfluent.com/\">engfluent.com</a> about improving spoken English. Today I’m going to summarize it.</p>\n<h2 id=\"chapter-1-implicit-vs-explicit-knowledge\"><a class=\"markdownIt-Anchor\" href=\"#chapter-1-implicit-vs-explicit-knowledge\"></a> Chapter 1: Implicit vs Explicit Knowledge</h2>\n<p>You cannot impove your speaking by studying the English grammar. Because speaking is an implicit knowledge, while grammar is an explicit knowledge.</p>\n<p>Implicit Knowledge is knowledge you can use automatically, without conscious attention, and it’s fast, automatic, and effortless. Activities like riding a bicycle, playing a musical instument, and speaking your native language are all implicit knowledges. In comparison, explicit knowledge is slow, non-automatic, and effortful such as solving a math problem, explaining the grammer rules to someone, etc.</p>\n<p>If you want to speak good English, you must gain your time on implicit knowledge while reduce time on activities that result in explicit knowledge.</p>\n<h2 id=\"chapter-2-three-ways-to-improve-your-english-speaking-skills\"><a class=\"markdownIt-Anchor\" href=\"#chapter-2-three-ways-to-improve-your-english-speaking-skills\"></a> Chapter 2: Three ways to improve your English speaking skills</h2>\n<h3 id=\"method-1-listen-to-english-conversations\"><a class=\"markdownIt-Anchor\" href=\"#method-1-listen-to-english-conversations\"></a> Method 1: Listen to English conversations</h3>\n<p>When you’re listening to an English conversation, the unconscious part of your brain is learning English without  awareness. You can listen English through podcasts or from a Youtube channel on whatever the topics you’re interested in. After a period of time you spend on listening, you will learn so many methods that other people express a certain idea. And when it’s time for you to output, you’ll have so many matetials to choose from.</p>\n<h3 id=\"method-2-practice-speaking-english\"><a class=\"markdownIt-Anchor\" href=\"#method-2-practice-speaking-english\"></a> Method 2: Practice speaking English</h3>\n<p>If you want to improve your speaking, listening alone is not enough. You have to open your mouth and speak something. As I’m living in China with no English-speaking environment, I have 3 ways to practice speaking:</p>\n<ol>\n<li>Speak to myself while driving</li>\n<li>Memorize speeches dilivered by my idols such as the famous speech by Steve Jobs on the commencement of the Stanford University.</li>\n<li>Purchase an online course like Cambly to practice speaking with real people.</li>\n</ol>\n<p>Don’t loose faith and patience. Just try to speak as much as possible.</p>\n<h3 id=\"method-3-read-in-english\"><a class=\"markdownIt-Anchor\" href=\"#method-3-read-in-english\"></a> Method 3: Read in English</h3>\n<p>To speak English well, you must increase your vocabulary, and reading is an excellent way to do that. You can read news, blogs, non-fiction books or novels. Or you can subscribe to some English websites, leave them your email address, and you’ll receive emails from the sites, those emails are very good and fresh materials for reading, even if they are ads.</p>\n<p>By engaging in both listening and reading, you learn both the pronunciation and the spelling of English vocabulary. This is a very powerful way to improve your English comprehension.</p>\n<h2 id=\"chapter-3-how-to-add-these-activities-to-your-daily-routine\"><a class=\"markdownIt-Anchor\" href=\"#chapter-3-how-to-add-these-activities-to-your-daily-routine\"></a> Chapter 3: How to add these activities to your daily routine</h2>\n<p>Most of us are very busy nowadays. But, in order to improve your English, it worth to add these activities to your daily routine.</p>\n<h3 id=\"suggestion-1-listen-to-english-during-mindless-activities\"><a class=\"markdownIt-Anchor\" href=\"#suggestion-1-listen-to-english-during-mindless-activities\"></a> Suggestion 1: Listen to English during “mindless” activities</h3>\n<p>You can listen to English while driving, commuting on public transports, cooking, walking in a park, running excercise, etc. Because these acticivities have one thing in common: you can go through them almost automatically without much thinking.</p>\n<h3 id=\"suggestion-2-practice-speaking-in-the-morning\"><a class=\"markdownIt-Anchor\" href=\"#suggestion-2-practice-speaking-in-the-morning\"></a> Suggestion 2: Practice speaking in the morning</h3>\n<p>For the sake of consistent practicing, the author suggested to practice in the morning. Because there are always random events to interrupt you in the evening or at night, such as an invitation for a dinner, a long phone call with your friend or feeling exhausted after a long day of work.</p>\n<p>Moreover, morning is the time of day when your energy is at its peak. This makes it easier to get yourself into practice. On the other hand, it’s difficult to force yourself to practice in the evening or at the night because during those times, you’re usually tired and just want to relax.</p>\n<h3 id=\"suggestion-3-read-before-bed-andor-during-mindless-activities\"><a class=\"markdownIt-Anchor\" href=\"#suggestion-3-read-before-bed-andor-during-mindless-activities\"></a> Suggestion 3: Read before bed (and/or during mindless activities)</h3>\n<p>When it’s near bedtime, many people like unwind by browsing social media, playing games or checking wechat moments. Replace those activities with English reading, because it’s a great way to relax and improve your English at the same time.</p>\n<h2 id=\"chapter-4-how-to-speak-english-fluently\"><a class=\"markdownIt-Anchor\" href=\"#chapter-4-how-to-speak-english-fluently\"></a> Chapter 4: How to speak English fluently</h2>\n<h3 id=\"1-increase-the-duration-of-your-speaking-pactice\"><a class=\"markdownIt-Anchor\" href=\"#1-increase-the-duration-of-your-speaking-pactice\"></a> 1. Increase the duration of your speaking pactice</h3>\n<ol>\n<li>Reducing the time you spend on social media and other time wasters</li>\n<li>Practice long and hard only during weekends or holidays</li>\n</ol>\n<h3 id=\"2-expose-yourself-to-a-wide-range-of-vocabulary\"><a class=\"markdownIt-Anchor\" href=\"#2-expose-yourself-to-a-wide-range-of-vocabulary\"></a> 2. Expose yourself to a wide range of vocabulary</h3>\n<p>The number of words in English world is enormous. There are not only common words like breakfast, happy, or teacher, but also many proffesional words in different fields such as business, healthcare, science, financial, etc. In order to use these words with ease, remember to vary the English meterials you use. Listen, read and practice with material on many different topics.</p>\n<h3 id=\"3-vary-change-your-speaking-practice\"><a class=\"markdownIt-Anchor\" href=\"#3-vary-change-your-speaking-practice\"></a> 3. Vary (change) your speaking practice</h3>\n<p>Studies show that variable practice is an effective way to improve skills.</p>\n<p>Here is an example:</p>\n<ol>\n<li>Practice by immitating native speakers</li>\n<li>Switch to talking to yourself about random topics</li>\n<li>Switch to chatting with a native speaker through Cambly App</li>\n</ol>\n<h3 id=\"4-give-yourself-a-project-to-do-in-english\"><a class=\"markdownIt-Anchor\" href=\"#4-give-yourself-a-project-to-do-in-english\"></a> 4. Give yourself a project to do in English</h3>\n<p>You can start a channel on YouTube or Xiaohongshu to introduce what you’re recently learning to your subscribers, or share your knowledge of your profession in English. The project will force you to enhance your knowledge and push you to give a clear explanation in English.</p>\n<h3 id=\"5-improve-your-english-pronunciation\"><a class=\"markdownIt-Anchor\" href=\"#5-improve-your-english-pronunciation\"></a> 5. Improve your English pronunciation</h3>\n<p>Record yourself talking in English and listen to it. If you have a little accent, it’s probably okay, and it won’t prevent others from understanding you. But if your accent is too strong, you have to improve your pronunciation as well.</p>\n<h3 id=\"6-be-willing-to-pay-the-price\"><a class=\"markdownIt-Anchor\" href=\"#6-be-willing-to-pay-the-price\"></a> 6. Be willing to pay the price</h3>\n<p>Speaking English is a skill, and just like other skills, you need to invest a lot of time to reach an advanced level. If you don’t have enough time, try to reduce the time spent on time wasters, such as:</p>\n<ol>\n<li>Social media</li>\n<li>Movies and TV shows (in your native language)</li>\n<li>Pick up your phone too frequently</li>\n</ol>\n<p>These time wasters don’t just waste your time, but also cause addiction and weaken your concentration. Althogh it’s very hard to do so, always remind yourself <em>How bad you want to be able to speak English fluently?</em></p>\n<p>If you can make those sacrifices, nothing can stop you from becoming fluent in English.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Source post URL: <a href=\"https://engfluent.com/how-to-improve-spoken-english/\">https://engfluent.com/how-to-improve-spoken-english/</a></p>\n<p>I’ve read a post on website <a href=\"https://engfluent.com/\">engfluent.com</a> about improving spoken English. Today I’m going to summarize it.</p>\n<h2 id=\"chapter-1-implicit-vs-explicit-knowledge\"><a class=\"markdownIt-Anchor\" href=\"#chapter-1-implicit-vs-explicit-knowledge\"></a> Chapter 1: Implicit vs Explicit Knowledge</h2>\n<p>You cannot impove your speaking by studying the English grammar. Because speaking is an implicit knowledge, while grammar is an explicit knowledge.</p>\n<p>Implicit Knowledge is knowledge you can use automatically, without conscious attention, and it’s fast, automatic, and effortless. Activities like riding a bicycle, playing a musical instument, and speaking your native language are all implicit knowledges. In comparison, explicit knowledge is slow, non-automatic, and effortful such as solving a math problem, explaining the grammer rules to someone, etc.</p>\n<p>If you want to speak good English, you must gain your time on implicit knowledge while reduce time on activities that result in explicit knowledge.</p>\n<h2 id=\"chapter-2-three-ways-to-improve-your-english-speaking-skills\"><a class=\"markdownIt-Anchor\" href=\"#chapter-2-three-ways-to-improve-your-english-speaking-skills\"></a> Chapter 2: Three ways to improve your English speaking skills</h2>\n<h3 id=\"method-1-listen-to-english-conversations\"><a class=\"markdownIt-Anchor\" href=\"#method-1-listen-to-english-conversations\"></a> Method 1: Listen to English conversations</h3>\n<p>When you’re listening to an English conversation, the unconscious part of your brain is learning English without  awareness. You can listen English through podcasts or from a Youtube channel on whatever the topics you’re interested in. After a period of time you spend on listening, you will learn so many methods that other people express a certain idea. And when it’s time for you to output, you’ll have so many matetials to choose from.</p>\n<h3 id=\"method-2-practice-speaking-english\"><a class=\"markdownIt-Anchor\" href=\"#method-2-practice-speaking-english\"></a> Method 2: Practice speaking English</h3>\n<p>If you want to improve your speaking, listening alone is not enough. You have to open your mouth and speak something. As I’m living in China with no English-speaking environment, I have 3 ways to practice speaking:</p>\n<ol>\n<li>Speak to myself while driving</li>\n<li>Memorize speeches dilivered by my idols such as the famous speech by Steve Jobs on the commencement of the Stanford University.</li>\n<li>Purchase an online course like Cambly to practice speaking with real people.</li>\n</ol>\n<p>Don’t loose faith and patience. Just try to speak as much as possible.</p>\n<h3 id=\"method-3-read-in-english\"><a class=\"markdownIt-Anchor\" href=\"#method-3-read-in-english\"></a> Method 3: Read in English</h3>\n<p>To speak English well, you must increase your vocabulary, and reading is an excellent way to do that. You can read news, blogs, non-fiction books or novels. Or you can subscribe to some English websites, leave them your email address, and you’ll receive emails from the sites, those emails are very good and fresh materials for reading, even if they are ads.</p>\n<p>By engaging in both listening and reading, you learn both the pronunciation and the spelling of English vocabulary. This is a very powerful way to improve your English comprehension.</p>\n<h2 id=\"chapter-3-how-to-add-these-activities-to-your-daily-routine\"><a class=\"markdownIt-Anchor\" href=\"#chapter-3-how-to-add-these-activities-to-your-daily-routine\"></a> Chapter 3: How to add these activities to your daily routine</h2>\n<p>Most of us are very busy nowadays. But, in order to improve your English, it worth to add these activities to your daily routine.</p>\n<h3 id=\"suggestion-1-listen-to-english-during-mindless-activities\"><a class=\"markdownIt-Anchor\" href=\"#suggestion-1-listen-to-english-during-mindless-activities\"></a> Suggestion 1: Listen to English during “mindless” activities</h3>\n<p>You can listen to English while driving, commuting on public transports, cooking, walking in a park, running excercise, etc. Because these acticivities have one thing in common: you can go through them almost automatically without much thinking.</p>\n<h3 id=\"suggestion-2-practice-speaking-in-the-morning\"><a class=\"markdownIt-Anchor\" href=\"#suggestion-2-practice-speaking-in-the-morning\"></a> Suggestion 2: Practice speaking in the morning</h3>\n<p>For the sake of consistent practicing, the author suggested to practice in the morning. Because there are always random events to interrupt you in the evening or at night, such as an invitation for a dinner, a long phone call with your friend or feeling exhausted after a long day of work.</p>\n<p>Moreover, morning is the time of day when your energy is at its peak. This makes it easier to get yourself into practice. On the other hand, it’s difficult to force yourself to practice in the evening or at the night because during those times, you’re usually tired and just want to relax.</p>\n<h3 id=\"suggestion-3-read-before-bed-andor-during-mindless-activities\"><a class=\"markdownIt-Anchor\" href=\"#suggestion-3-read-before-bed-andor-during-mindless-activities\"></a> Suggestion 3: Read before bed (and/or during mindless activities)</h3>\n<p>When it’s near bedtime, many people like unwind by browsing social media, playing games or checking wechat moments. Replace those activities with English reading, because it’s a great way to relax and improve your English at the same time.</p>\n<h2 id=\"chapter-4-how-to-speak-english-fluently\"><a class=\"markdownIt-Anchor\" href=\"#chapter-4-how-to-speak-english-fluently\"></a> Chapter 4: How to speak English fluently</h2>\n<h3 id=\"1-increase-the-duration-of-your-speaking-pactice\"><a class=\"markdownIt-Anchor\" href=\"#1-increase-the-duration-of-your-speaking-pactice\"></a> 1. Increase the duration of your speaking pactice</h3>\n<ol>\n<li>Reducing the time you spend on social media and other time wasters</li>\n<li>Practice long and hard only during weekends or holidays</li>\n</ol>\n<h3 id=\"2-expose-yourself-to-a-wide-range-of-vocabulary\"><a class=\"markdownIt-Anchor\" href=\"#2-expose-yourself-to-a-wide-range-of-vocabulary\"></a> 2. Expose yourself to a wide range of vocabulary</h3>\n<p>The number of words in English world is enormous. There are not only common words like breakfast, happy, or teacher, but also many proffesional words in different fields such as business, healthcare, science, financial, etc. In order to use these words with ease, remember to vary the English meterials you use. Listen, read and practice with material on many different topics.</p>\n<h3 id=\"3-vary-change-your-speaking-practice\"><a class=\"markdownIt-Anchor\" href=\"#3-vary-change-your-speaking-practice\"></a> 3. Vary (change) your speaking practice</h3>\n<p>Studies show that variable practice is an effective way to improve skills.</p>\n<p>Here is an example:</p>\n<ol>\n<li>Practice by immitating native speakers</li>\n<li>Switch to talking to yourself about random topics</li>\n<li>Switch to chatting with a native speaker through Cambly App</li>\n</ol>\n<h3 id=\"4-give-yourself-a-project-to-do-in-english\"><a class=\"markdownIt-Anchor\" href=\"#4-give-yourself-a-project-to-do-in-english\"></a> 4. Give yourself a project to do in English</h3>\n<p>You can start a channel on YouTube or Xiaohongshu to introduce what you’re recently learning to your subscribers, or share your knowledge of your profession in English. The project will force you to enhance your knowledge and push you to give a clear explanation in English.</p>\n<h3 id=\"5-improve-your-english-pronunciation\"><a class=\"markdownIt-Anchor\" href=\"#5-improve-your-english-pronunciation\"></a> 5. Improve your English pronunciation</h3>\n<p>Record yourself talking in English and listen to it. If you have a little accent, it’s probably okay, and it won’t prevent others from understanding you. But if your accent is too strong, you have to improve your pronunciation as well.</p>\n<h3 id=\"6-be-willing-to-pay-the-price\"><a class=\"markdownIt-Anchor\" href=\"#6-be-willing-to-pay-the-price\"></a> 6. Be willing to pay the price</h3>\n<p>Speaking English is a skill, and just like other skills, you need to invest a lot of time to reach an advanced level. If you don’t have enough time, try to reduce the time spent on time wasters, such as:</p>\n<ol>\n<li>Social media</li>\n<li>Movies and TV shows (in your native language)</li>\n<li>Pick up your phone too frequently</li>\n</ol>\n<p>These time wasters don’t just waste your time, but also cause addiction and weaken your concentration. Althogh it’s very hard to do so, always remind yourself <em>How bad you want to be able to speak English fluently?</em></p>\n<p>If you can make those sacrifices, nothing can stop you from becoming fluent in English.</p>\n"},{"title":"How to Claim Your Leadership Power | Michael Timms | TED","date":"2024-10-17T06:00:00.000Z","_content":"\nSource video URL: [https://www.youtube.com/watch?v=dIYmzf21d1g](https://www.youtube.com/watch?v=dIYmzf21d1g)\n\nAre there any other parents here who have struggled to get your kids out the door on time? (Laughter) So, you know, right? It's like herding kittens. (Laughter) My wife and I would start nagging our three daughters long before it was time to leave, but that obviously wasn't working because we were always late for everything.\n\nBut one day there was a complete Gong Show. Five minutes before we needed to leave for an important event, I found my oldest daughter on the porch reading, my middle daughter was playing the piano, and my youngest daughter wasn't wearing any socks. So I told them, \"Stop reading, stop playing the piano, put on your socks, and everybody get in the car.\"\n\nFive minutes later, nobody was in the car. (Laughter) On my way to help my youngest daughter with her socks, I noticed my oldest daughter was still on the porch reading. Now I'm starting to lose it. Her response was \"I didn't hear you.\" But before I could say a word, I heard the piano start playing again. (Laughter) \n\nAnd that's the story of how I lost my mind. The end. (Laughter) I just wanted my daughters to take a little ownership for getting out the door on time. But then I remembered something I teach management teams. You can't inspire accountability in others until you model it yourself.\n\nThat's when I realized I wasn't taking any accountability for this problem, I was blaming it totally on my daughters. So I tried a different approach and looked in the mirror. What was I doing, or not doing, that may be contributing to this problem? Then it hit me. \n\nI knew when they needed to be done breakfast, dressed, groomed and ready to leave. But did they? I also knew what time it was, but there were no clocks in their bathrooms, which I discovered is like a different dimension from my girls where time ceases to exist. (Laughter) \n\nSolution: I put big clocks everywhere and posted the schedule in a common area. And you know what? It actually worked. Now we're not perfect at getting out the door in time, but it's much better than it was. I had fallen into the same trap that many people in leadership positions fall into, which is blaming other people for a problem without considering my part in it.\n\nWhile working with leadership teams, I discovered three powerful habits that elevate the performance of others. I call it *the three habits of personal accountability*. \n\n- Habit 1: Don't blame. \n- Habit 2: Look in the mirror. \n- Habit 3: Engineer the solution. \n\nThis sequence of habits has an almost magical effect on other people's behavior. And you get better results. But this isn't just for CEOs and managers. We're all trying to help others be better, right? As a parent, a coworker or a volunteer. Here's why these habits work. \n\n**Habit 1: Don't blame.** Think about the last time you blamed someone for something. How did it turn out? Probably not well. That's because our brains interpret blame the same way they interpret a physical attack. Blame triggers the fight-or-flight response, which effectively shuts down our prefrontal cortex, which is the problem-solving part of our brain. So when I was getting angry at my daughters, it wasn't motivating them. It was actually impairing their brain function. Researcher Dr. Amy Edmondson studied hospital teams to see how culture affects people's willingness to report medical errors. She expected that the high-performing teams would make fewer mistakes, but to her surprise, they reported more errors. Why? Because when people aren't blamed for problems, they're more willing to admit their mistakes and learn from them.\n\nBut in cultures of blame, people hide problems or point their finger at someone else. No one is going to take accountability if they think they're going to be blamed for doing so. Blame destroys teamwork, problem solving, learning and initiative. In other words, blame kills accountability. So what should we do instead?\n\n**Habit 2: Look in the mirror.** Most of us are really good at noticing other people's mistakes, but we're not so good at noticing how we contribute to problems. One time, my assistant helped me mail out hundreds of expensive marketing packages to prospective clients. Three weeks later, no responses. So I checked one of the cover letters.\n\nIt read, \"Dear Mr. Smith, [insert company name here.]\" (Laughter) She missed one of the variable fields in every letter. Thousands of dollars down the drain. Now, she felt awful and said, \"This is totally my fault.\" I was thinking, \"You are darn right this is totally your fault.\" (Laughter) But then I looked in the mirror and I realized I didn't highlight any of the variable fields in yellow like they are in all our other templates. If I had, she couldn't have missed it. Now I'm not saying that every problem is my fault. But if I look closely enough at my problems, I can usually discover how my actions or inactions contributed to them in some way.\n\nThis is a profound insight because if I can see my part in a problem, I can do something about it. The next time you encounter a problem, try this. Ask yourself: How may I have contributed to this problem? \n\nI taught these principles to a construction company, and followed up a few weeks later to see how things had changed. A project manager told me the following story. \"Our general manager is a total blamer, and team meetings usually turn into blame sessions. But the week after you taught us these principles, that meeting went very differently. When our general manager identified a problem, he was about to lay into the person who he thought was responsible. But then he stopped, put his head in his hand for a moment, then looked up and said, 'This is how I think I contributed to the problem.' The mood in that meeting changed instantly. And then I saw something I have never seen before. Other people began raising their hands saying, 'No, boss, it wasn't just your fault. This is how I think I contributed to the problem.'\"\n\nWhen leaders acknowledge their part in problems first, it makes it safe for everybody else to do the same. And if nobody else follows suit, then you've earned the moral authority to ask, \"And how may you have contributed to this problem?\" Before others will allow us to hold them accountable, they must first see us hold ourselves accountable. Now what if the cause of your problem isn't what you think it is? \n\n**Habit 3: Engineer the solution**. When bad things happen, our brains are hardwired to blame the person closest to the mess and ignore other causes. Fortunately, there's a fix. It's called \"systems thinking,\" which is noticing how environment and processes influence behavior.\n\nSystems thinking emerged toward the end of World War II, when the US Air Force noticed that a lot of their planes were crashing without any mechanical problems. Their conclusion was \"Our pilots are idiots.\" (Laughter) So they engaged some consultants to help them select less error-prone pilots. \n\nWhen the consultants investigated, they discovered they didn't have a pilot problem. They had a cockpit problem. For instance, pilots confused gear handles that looked and felt the same if they were located right beside each other. Or they mixed up controls if they were in a different position, in a different model of plane. Design better cockpits, the consultants concluded, and you'll have fewer crashes.\n\nSo the US Air Force engineered the solution by simplifying cockpit design. Similarly, when I stopped blaming my daughters, I noticed the environmental factors that were influencing their behavior. I engineered the solution by putting up clocks and a schedule so they had the information they needed to take the initiative.\n\nInstead of asking, \"Whose fault is this?\" Ask: \"Where did the process break down?\" This question is your secret weapon to short-circuit the blame game and find sustainable solutions to your problems. Remember, **you can't inspire accountability in others until you model it yourself**. \n\nThe next time you encounter a problem, test this sequence of habits and watch it change your outcomes: don't blame, look in the mirror and engineer the solution. Be the change that you want to see in others. Our world is in desperate need of more people who take ownership of problems and solutions. In our workplaces, our homes and in our society. And the secret is, as you model these behaviors, so will those around you. It's kind of magic. Thank you. (Applause)\n","source":"_posts/how-to-claim-your-leadership-power.md","raw":"---\ntitle: How to Claim Your Leadership Power | Michael Timms | TED\ndate: 2024-10-17 14:00\ntags:\n- speech\n- self improvement\n---\n\nSource video URL: [https://www.youtube.com/watch?v=dIYmzf21d1g](https://www.youtube.com/watch?v=dIYmzf21d1g)\n\nAre there any other parents here who have struggled to get your kids out the door on time? (Laughter) So, you know, right? It's like herding kittens. (Laughter) My wife and I would start nagging our three daughters long before it was time to leave, but that obviously wasn't working because we were always late for everything.\n\nBut one day there was a complete Gong Show. Five minutes before we needed to leave for an important event, I found my oldest daughter on the porch reading, my middle daughter was playing the piano, and my youngest daughter wasn't wearing any socks. So I told them, \"Stop reading, stop playing the piano, put on your socks, and everybody get in the car.\"\n\nFive minutes later, nobody was in the car. (Laughter) On my way to help my youngest daughter with her socks, I noticed my oldest daughter was still on the porch reading. Now I'm starting to lose it. Her response was \"I didn't hear you.\" But before I could say a word, I heard the piano start playing again. (Laughter) \n\nAnd that's the story of how I lost my mind. The end. (Laughter) I just wanted my daughters to take a little ownership for getting out the door on time. But then I remembered something I teach management teams. You can't inspire accountability in others until you model it yourself.\n\nThat's when I realized I wasn't taking any accountability for this problem, I was blaming it totally on my daughters. So I tried a different approach and looked in the mirror. What was I doing, or not doing, that may be contributing to this problem? Then it hit me. \n\nI knew when they needed to be done breakfast, dressed, groomed and ready to leave. But did they? I also knew what time it was, but there were no clocks in their bathrooms, which I discovered is like a different dimension from my girls where time ceases to exist. (Laughter) \n\nSolution: I put big clocks everywhere and posted the schedule in a common area. And you know what? It actually worked. Now we're not perfect at getting out the door in time, but it's much better than it was. I had fallen into the same trap that many people in leadership positions fall into, which is blaming other people for a problem without considering my part in it.\n\nWhile working with leadership teams, I discovered three powerful habits that elevate the performance of others. I call it *the three habits of personal accountability*. \n\n- Habit 1: Don't blame. \n- Habit 2: Look in the mirror. \n- Habit 3: Engineer the solution. \n\nThis sequence of habits has an almost magical effect on other people's behavior. And you get better results. But this isn't just for CEOs and managers. We're all trying to help others be better, right? As a parent, a coworker or a volunteer. Here's why these habits work. \n\n**Habit 1: Don't blame.** Think about the last time you blamed someone for something. How did it turn out? Probably not well. That's because our brains interpret blame the same way they interpret a physical attack. Blame triggers the fight-or-flight response, which effectively shuts down our prefrontal cortex, which is the problem-solving part of our brain. So when I was getting angry at my daughters, it wasn't motivating them. It was actually impairing their brain function. Researcher Dr. Amy Edmondson studied hospital teams to see how culture affects people's willingness to report medical errors. She expected that the high-performing teams would make fewer mistakes, but to her surprise, they reported more errors. Why? Because when people aren't blamed for problems, they're more willing to admit their mistakes and learn from them.\n\nBut in cultures of blame, people hide problems or point their finger at someone else. No one is going to take accountability if they think they're going to be blamed for doing so. Blame destroys teamwork, problem solving, learning and initiative. In other words, blame kills accountability. So what should we do instead?\n\n**Habit 2: Look in the mirror.** Most of us are really good at noticing other people's mistakes, but we're not so good at noticing how we contribute to problems. One time, my assistant helped me mail out hundreds of expensive marketing packages to prospective clients. Three weeks later, no responses. So I checked one of the cover letters.\n\nIt read, \"Dear Mr. Smith, [insert company name here.]\" (Laughter) She missed one of the variable fields in every letter. Thousands of dollars down the drain. Now, she felt awful and said, \"This is totally my fault.\" I was thinking, \"You are darn right this is totally your fault.\" (Laughter) But then I looked in the mirror and I realized I didn't highlight any of the variable fields in yellow like they are in all our other templates. If I had, she couldn't have missed it. Now I'm not saying that every problem is my fault. But if I look closely enough at my problems, I can usually discover how my actions or inactions contributed to them in some way.\n\nThis is a profound insight because if I can see my part in a problem, I can do something about it. The next time you encounter a problem, try this. Ask yourself: How may I have contributed to this problem? \n\nI taught these principles to a construction company, and followed up a few weeks later to see how things had changed. A project manager told me the following story. \"Our general manager is a total blamer, and team meetings usually turn into blame sessions. But the week after you taught us these principles, that meeting went very differently. When our general manager identified a problem, he was about to lay into the person who he thought was responsible. But then he stopped, put his head in his hand for a moment, then looked up and said, 'This is how I think I contributed to the problem.' The mood in that meeting changed instantly. And then I saw something I have never seen before. Other people began raising their hands saying, 'No, boss, it wasn't just your fault. This is how I think I contributed to the problem.'\"\n\nWhen leaders acknowledge their part in problems first, it makes it safe for everybody else to do the same. And if nobody else follows suit, then you've earned the moral authority to ask, \"And how may you have contributed to this problem?\" Before others will allow us to hold them accountable, they must first see us hold ourselves accountable. Now what if the cause of your problem isn't what you think it is? \n\n**Habit 3: Engineer the solution**. When bad things happen, our brains are hardwired to blame the person closest to the mess and ignore other causes. Fortunately, there's a fix. It's called \"systems thinking,\" which is noticing how environment and processes influence behavior.\n\nSystems thinking emerged toward the end of World War II, when the US Air Force noticed that a lot of their planes were crashing without any mechanical problems. Their conclusion was \"Our pilots are idiots.\" (Laughter) So they engaged some consultants to help them select less error-prone pilots. \n\nWhen the consultants investigated, they discovered they didn't have a pilot problem. They had a cockpit problem. For instance, pilots confused gear handles that looked and felt the same if they were located right beside each other. Or they mixed up controls if they were in a different position, in a different model of plane. Design better cockpits, the consultants concluded, and you'll have fewer crashes.\n\nSo the US Air Force engineered the solution by simplifying cockpit design. Similarly, when I stopped blaming my daughters, I noticed the environmental factors that were influencing their behavior. I engineered the solution by putting up clocks and a schedule so they had the information they needed to take the initiative.\n\nInstead of asking, \"Whose fault is this?\" Ask: \"Where did the process break down?\" This question is your secret weapon to short-circuit the blame game and find sustainable solutions to your problems. Remember, **you can't inspire accountability in others until you model it yourself**. \n\nThe next time you encounter a problem, test this sequence of habits and watch it change your outcomes: don't blame, look in the mirror and engineer the solution. Be the change that you want to see in others. Our world is in desperate need of more people who take ownership of problems and solutions. In our workplaces, our homes and in our society. And the secret is, as you model these behaviors, so will those around you. It's kind of magic. Thank you. (Applause)\n","slug":"how-to-claim-your-leadership-power","published":1,"updated":"2024-10-22T06:49:53.369Z","_id":"cm2k34kjk000ri8041dxi1q75","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Source video URL: <a href=\"https://www.youtube.com/watch?v=dIYmzf21d1g\">https://www.youtube.com/watch?v=dIYmzf21d1g</a></p>\n<p>Are there any other parents here who have struggled to get your kids out the door on time? (Laughter) So, you know, right? It’s like herding kittens. (Laughter) My wife and I would start nagging our three daughters long before it was time to leave, but that obviously wasn’t working because we were always late for everything.</p>\n<p>But one day there was a complete Gong Show. Five minutes before we needed to leave for an important event, I found my oldest daughter on the porch reading, my middle daughter was playing the piano, and my youngest daughter wasn’t wearing any socks. So I told them, “Stop reading, stop playing the piano, put on your socks, and everybody get in the car.”</p>\n<p>Five minutes later, nobody was in the car. (Laughter) On my way to help my youngest daughter with her socks, I noticed my oldest daughter was still on the porch reading. Now I’m starting to lose it. Her response was “I didn’t hear you.” But before I could say a word, I heard the piano start playing again. (Laughter)</p>\n<p>And that’s the story of how I lost my mind. The end. (Laughter) I just wanted my daughters to take a little ownership for getting out the door on time. But then I remembered something I teach management teams. You can’t inspire accountability in others until you model it yourself.</p>\n<p>That’s when I realized I wasn’t taking any accountability for this problem, I was blaming it totally on my daughters. So I tried a different approach and looked in the mirror. What was I doing, or not doing, that may be contributing to this problem? Then it hit me.</p>\n<p>I knew when they needed to be done breakfast, dressed, groomed and ready to leave. But did they? I also knew what time it was, but there were no clocks in their bathrooms, which I discovered is like a different dimension from my girls where time ceases to exist. (Laughter)</p>\n<p>Solution: I put big clocks everywhere and posted the schedule in a common area. And you know what? It actually worked. Now we’re not perfect at getting out the door in time, but it’s much better than it was. I had fallen into the same trap that many people in leadership positions fall into, which is blaming other people for a problem without considering my part in it.</p>\n<p>While working with leadership teams, I discovered three powerful habits that elevate the performance of others. I call it <em>the three habits of personal accountability</em>.</p>\n<ul>\n<li>Habit 1: Don’t blame.</li>\n<li>Habit 2: Look in the mirror.</li>\n<li>Habit 3: Engineer the solution.</li>\n</ul>\n<p>This sequence of habits has an almost magical effect on other people’s behavior. And you get better results. But this isn’t just for CEOs and managers. We’re all trying to help others be better, right? As a parent, a coworker or a volunteer. Here’s why these habits work.</p>\n<p><strong>Habit 1: Don’t blame.</strong> Think about the last time you blamed someone for something. How did it turn out? Probably not well. That’s because our brains interpret blame the same way they interpret a physical attack. Blame triggers the fight-or-flight response, which effectively shuts down our prefrontal cortex, which is the problem-solving part of our brain. So when I was getting angry at my daughters, it wasn’t motivating them. It was actually impairing their brain function. Researcher Dr. Amy Edmondson studied hospital teams to see how culture affects people’s willingness to report medical errors. She expected that the high-performing teams would make fewer mistakes, but to her surprise, they reported more errors. Why? Because when people aren’t blamed for problems, they’re more willing to admit their mistakes and learn from them.</p>\n<p>But in cultures of blame, people hide problems or point their finger at someone else. No one is going to take accountability if they think they’re going to be blamed for doing so. Blame destroys teamwork, problem solving, learning and initiative. In other words, blame kills accountability. So what should we do instead?</p>\n<p><strong>Habit 2: Look in the mirror.</strong> Most of us are really good at noticing other people’s mistakes, but we’re not so good at noticing how we contribute to problems. One time, my assistant helped me mail out hundreds of expensive marketing packages to prospective clients. Three weeks later, no responses. So I checked one of the cover letters.</p>\n<p>It read, “Dear Mr. Smith, [insert company name here.]” (Laughter) She missed one of the variable fields in every letter. Thousands of dollars down the drain. Now, she felt awful and said, “This is totally my fault.” I was thinking, “You are darn right this is totally your fault.” (Laughter) But then I looked in the mirror and I realized I didn’t highlight any of the variable fields in yellow like they are in all our other templates. If I had, she couldn’t have missed it. Now I’m not saying that every problem is my fault. But if I look closely enough at my problems, I can usually discover how my actions or inactions contributed to them in some way.</p>\n<p>This is a profound insight because if I can see my part in a problem, I can do something about it. The next time you encounter a problem, try this. Ask yourself: How may I have contributed to this problem?</p>\n<p>I taught these principles to a construction company, and followed up a few weeks later to see how things had changed. A project manager told me the following story. “Our general manager is a total blamer, and team meetings usually turn into blame sessions. But the week after you taught us these principles, that meeting went very differently. When our general manager identified a problem, he was about to lay into the person who he thought was responsible. But then he stopped, put his head in his hand for a moment, then looked up and said, ‘This is how I think I contributed to the problem.’ The mood in that meeting changed instantly. And then I saw something I have never seen before. Other people began raising their hands saying, ‘No, boss, it wasn’t just your fault. This is how I think I contributed to the problem.’”</p>\n<p>When leaders acknowledge their part in problems first, it makes it safe for everybody else to do the same. And if nobody else follows suit, then you’ve earned the moral authority to ask, “And how may you have contributed to this problem?” Before others will allow us to hold them accountable, they must first see us hold ourselves accountable. Now what if the cause of your problem isn’t what you think it is?</p>\n<p><strong>Habit 3: Engineer the solution</strong>. When bad things happen, our brains are hardwired to blame the person closest to the mess and ignore other causes. Fortunately, there’s a fix. It’s called “systems thinking,” which is noticing how environment and processes influence behavior.</p>\n<p>Systems thinking emerged toward the end of World War II, when the US Air Force noticed that a lot of their planes were crashing without any mechanical problems. Their conclusion was “Our pilots are idiots.” (Laughter) So they engaged some consultants to help them select less error-prone pilots.</p>\n<p>When the consultants investigated, they discovered they didn’t have a pilot problem. They had a cockpit problem. For instance, pilots confused gear handles that looked and felt the same if they were located right beside each other. Or they mixed up controls if they were in a different position, in a different model of plane. Design better cockpits, the consultants concluded, and you’ll have fewer crashes.</p>\n<p>So the US Air Force engineered the solution by simplifying cockpit design. Similarly, when I stopped blaming my daughters, I noticed the environmental factors that were influencing their behavior. I engineered the solution by putting up clocks and a schedule so they had the information they needed to take the initiative.</p>\n<p>Instead of asking, “Whose fault is this?” Ask: “Where did the process break down?” This question is your secret weapon to short-circuit the blame game and find sustainable solutions to your problems. Remember, <strong>you can’t inspire accountability in others until you model it yourself</strong>.</p>\n<p>The next time you encounter a problem, test this sequence of habits and watch it change your outcomes: don’t blame, look in the mirror and engineer the solution. Be the change that you want to see in others. Our world is in desperate need of more people who take ownership of problems and solutions. In our workplaces, our homes and in our society. And the secret is, as you model these behaviors, so will those around you. It’s kind of magic. Thank you. (Applause)</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Source video URL: <a href=\"https://www.youtube.com/watch?v=dIYmzf21d1g\">https://www.youtube.com/watch?v=dIYmzf21d1g</a></p>\n<p>Are there any other parents here who have struggled to get your kids out the door on time? (Laughter) So, you know, right? It’s like herding kittens. (Laughter) My wife and I would start nagging our three daughters long before it was time to leave, but that obviously wasn’t working because we were always late for everything.</p>\n<p>But one day there was a complete Gong Show. Five minutes before we needed to leave for an important event, I found my oldest daughter on the porch reading, my middle daughter was playing the piano, and my youngest daughter wasn’t wearing any socks. So I told them, “Stop reading, stop playing the piano, put on your socks, and everybody get in the car.”</p>\n<p>Five minutes later, nobody was in the car. (Laughter) On my way to help my youngest daughter with her socks, I noticed my oldest daughter was still on the porch reading. Now I’m starting to lose it. Her response was “I didn’t hear you.” But before I could say a word, I heard the piano start playing again. (Laughter)</p>\n<p>And that’s the story of how I lost my mind. The end. (Laughter) I just wanted my daughters to take a little ownership for getting out the door on time. But then I remembered something I teach management teams. You can’t inspire accountability in others until you model it yourself.</p>\n<p>That’s when I realized I wasn’t taking any accountability for this problem, I was blaming it totally on my daughters. So I tried a different approach and looked in the mirror. What was I doing, or not doing, that may be contributing to this problem? Then it hit me.</p>\n<p>I knew when they needed to be done breakfast, dressed, groomed and ready to leave. But did they? I also knew what time it was, but there were no clocks in their bathrooms, which I discovered is like a different dimension from my girls where time ceases to exist. (Laughter)</p>\n<p>Solution: I put big clocks everywhere and posted the schedule in a common area. And you know what? It actually worked. Now we’re not perfect at getting out the door in time, but it’s much better than it was. I had fallen into the same trap that many people in leadership positions fall into, which is blaming other people for a problem without considering my part in it.</p>\n<p>While working with leadership teams, I discovered three powerful habits that elevate the performance of others. I call it <em>the three habits of personal accountability</em>.</p>\n<ul>\n<li>Habit 1: Don’t blame.</li>\n<li>Habit 2: Look in the mirror.</li>\n<li>Habit 3: Engineer the solution.</li>\n</ul>\n<p>This sequence of habits has an almost magical effect on other people’s behavior. And you get better results. But this isn’t just for CEOs and managers. We’re all trying to help others be better, right? As a parent, a coworker or a volunteer. Here’s why these habits work.</p>\n<p><strong>Habit 1: Don’t blame.</strong> Think about the last time you blamed someone for something. How did it turn out? Probably not well. That’s because our brains interpret blame the same way they interpret a physical attack. Blame triggers the fight-or-flight response, which effectively shuts down our prefrontal cortex, which is the problem-solving part of our brain. So when I was getting angry at my daughters, it wasn’t motivating them. It was actually impairing their brain function. Researcher Dr. Amy Edmondson studied hospital teams to see how culture affects people’s willingness to report medical errors. She expected that the high-performing teams would make fewer mistakes, but to her surprise, they reported more errors. Why? Because when people aren’t blamed for problems, they’re more willing to admit their mistakes and learn from them.</p>\n<p>But in cultures of blame, people hide problems or point their finger at someone else. No one is going to take accountability if they think they’re going to be blamed for doing so. Blame destroys teamwork, problem solving, learning and initiative. In other words, blame kills accountability. So what should we do instead?</p>\n<p><strong>Habit 2: Look in the mirror.</strong> Most of us are really good at noticing other people’s mistakes, but we’re not so good at noticing how we contribute to problems. One time, my assistant helped me mail out hundreds of expensive marketing packages to prospective clients. Three weeks later, no responses. So I checked one of the cover letters.</p>\n<p>It read, “Dear Mr. Smith, [insert company name here.]” (Laughter) She missed one of the variable fields in every letter. Thousands of dollars down the drain. Now, she felt awful and said, “This is totally my fault.” I was thinking, “You are darn right this is totally your fault.” (Laughter) But then I looked in the mirror and I realized I didn’t highlight any of the variable fields in yellow like they are in all our other templates. If I had, she couldn’t have missed it. Now I’m not saying that every problem is my fault. But if I look closely enough at my problems, I can usually discover how my actions or inactions contributed to them in some way.</p>\n<p>This is a profound insight because if I can see my part in a problem, I can do something about it. The next time you encounter a problem, try this. Ask yourself: How may I have contributed to this problem?</p>\n<p>I taught these principles to a construction company, and followed up a few weeks later to see how things had changed. A project manager told me the following story. “Our general manager is a total blamer, and team meetings usually turn into blame sessions. But the week after you taught us these principles, that meeting went very differently. When our general manager identified a problem, he was about to lay into the person who he thought was responsible. But then he stopped, put his head in his hand for a moment, then looked up and said, ‘This is how I think I contributed to the problem.’ The mood in that meeting changed instantly. And then I saw something I have never seen before. Other people began raising their hands saying, ‘No, boss, it wasn’t just your fault. This is how I think I contributed to the problem.’”</p>\n<p>When leaders acknowledge their part in problems first, it makes it safe for everybody else to do the same. And if nobody else follows suit, then you’ve earned the moral authority to ask, “And how may you have contributed to this problem?” Before others will allow us to hold them accountable, they must first see us hold ourselves accountable. Now what if the cause of your problem isn’t what you think it is?</p>\n<p><strong>Habit 3: Engineer the solution</strong>. When bad things happen, our brains are hardwired to blame the person closest to the mess and ignore other causes. Fortunately, there’s a fix. It’s called “systems thinking,” which is noticing how environment and processes influence behavior.</p>\n<p>Systems thinking emerged toward the end of World War II, when the US Air Force noticed that a lot of their planes were crashing without any mechanical problems. Their conclusion was “Our pilots are idiots.” (Laughter) So they engaged some consultants to help them select less error-prone pilots.</p>\n<p>When the consultants investigated, they discovered they didn’t have a pilot problem. They had a cockpit problem. For instance, pilots confused gear handles that looked and felt the same if they were located right beside each other. Or they mixed up controls if they were in a different position, in a different model of plane. Design better cockpits, the consultants concluded, and you’ll have fewer crashes.</p>\n<p>So the US Air Force engineered the solution by simplifying cockpit design. Similarly, when I stopped blaming my daughters, I noticed the environmental factors that were influencing their behavior. I engineered the solution by putting up clocks and a schedule so they had the information they needed to take the initiative.</p>\n<p>Instead of asking, “Whose fault is this?” Ask: “Where did the process break down?” This question is your secret weapon to short-circuit the blame game and find sustainable solutions to your problems. Remember, <strong>you can’t inspire accountability in others until you model it yourself</strong>.</p>\n<p>The next time you encounter a problem, test this sequence of habits and watch it change your outcomes: don’t blame, look in the mirror and engineer the solution. Be the change that you want to see in others. Our world is in desperate need of more people who take ownership of problems and solutions. In our workplaces, our homes and in our society. And the secret is, as you model these behaviors, so will those around you. It’s kind of magic. Thank you. (Applause)</p>\n"},{"title":"javascript this 详解","date":"2017-05-28T06:00:00.000Z","_content":"\n*全局作用域中的this永远为global对象，在浏览器环境下即为window对象。*\n\n函数中的this根据函数的不同调用方式分下列4中情况：\n\n## 1、直接调用（Function Invocation Pattern）\n\n例如：\n\n```javascript\nfunction foo () {\n  console.log(this)\n}\nfoo() // 输出：window\n\n```\n\n注意，此时的 `foo` 是作为单独的变量出现的，而不是对象的属性。\n\n在这种模式下，函数中的this永远是global对象，在浏览器环境下即window对象。\n\n## 2、作为方法调用（Method Invocation Pattern）\n\n示例：\n\n```javascript\nvar obj = {\n  name: 'papi',\n  say: function () {\n    console.log(this)\n  }\n}\n\nobj.say() // 输出：obj\n```\n\n这种情况下函数作为对象的属性被调用，就必然会运用到 `.` 操作符或者 `[]`操作符，这种情况下，函数中的 `this` 等于 `.` 或 `[` 前面的那个对象，上面的例子中即为obj。 `obj['say']()` 这种调用方式输出的 `this` 也是 obj。\n\n看下面一个例子：\n\n```javascript\nvar length = 100\n    \nfunction func () {\n  console.log(this.length)\n}\n\nvar o = {\n  length: 10,\n  add: function (func) {\n    func()\n    arguments[0]()\n  }\n}\no.add(func)\n```\n\n执行 `o.add` 方法并把全局变量 `func` 作为参数传入。\n\n在 `add` 方法内部执行传进来的 `func` 函数，这种调用属于函数直接调用，是上述第1种情况，因此函数中的 `this` 指向 `window`，`window.length`即全局变量 `length`，值为100。\n\n`arguments[0]()` 这一条语句是取到了函数的第一个参数（显然是 `func` 函数）并执行，这种调用方式等效于 `func()` 这种调用方式？答案是否定的！众所周知，函数中的 `arguments` 是一个类数组对象，它具有 `length` 属性，其值为参数的个数，上例中只传入了一个参数，因此 `arguments.length === 1`，深入 `arguments` 对象，展开大体是以下结构：\n\n```javascript\n{\n  0: function func () {},\n  'length': 1\n}\n```\n\n因此，`arguments[0]()` 这种调用方式其实是调用了arguments对象的 `0` 方法！而这个所谓的 `0` 方法从何而来呢？就是通过将 `func` 函数复制给它得来的。因此，方法中的 `this` 应该指向 `arguments` 对象，因此输出 1。\n\n如果执行 `o.add(func, 'hahaha')` 呢？没错，输出2，因为此时 `arguments.length === 2`。\n\n## 3、作为构造函数调用（Constructor Pattern）\n\n在 `new Foo()` 这种调用方式下，`Foo` 内部的 `this` 永远指向 `new` 操作符返回的对象\n\n```javascript\nfunction Book (name) {\n  this.name = name\n  \n  console.log(this)\n}\n\nvar book = new Book('百年孤独') // 输出 {name: '百年孤独'}\n```\n\n## 4、apply调用（Apply Pattern）\n\n```javascript\nfunction speak() {\n  console.log(this)\n}\n\nvar mao = {\n  name: 'mao'\n}\n\nspeak.call(mao)       // 输出 {name: 'mao'}\nspeak.apply(mao)      // 输出 {name: 'mao'}\nspeak.bind(mao)()     // 输出 {name: 'mao'}\nspeak.call()          // 输出 window\nspeak.call(null)      // 输出 window\nspeak.call(undefined) // 输出 window\n```\n\n函数的 `call`、 `apply` 、 `bind` 方法的第一个参数就是指定函数中 `this` 值的，如果不传参或传入 `null` 或 `undefined` 则将函数中的 `this` 指向global，在浏览器环境下即为 window对象。\n\n## 5、ES6箭头函数中的this\n\nES6的箭头函数中的 `this` 与ES5中的 `this` 行为不一样，箭头函数中的 `this` 值是在函数定义时就决定的，它不会随着运行时的上下文不同发生改变。\n\n例如：\n\n```javascript\nfunction printThis() {\n  let print = function () {\n    console.log(this)\n  }\n  print()\n}\n\nprintThis.call([1])\nprintThis.call([2])\n\n```\n根据第一种情形，上述代码两次调用均输出 `window`，如果把 `print` 函数定义为箭头函数，则 `print` 函数内部的 `this` 值会在定义 `print` 函数时决定，示例如下：\n\n```javascript\nfunction printThis() {\n  let print = () => {\n    console.log(this)\n  }\n  print()\n}\n\nprintThis.call([1]) // [1]\n\n```\n\n上例中， `printThis.call([1])` 调用 `printThis` 函数时将其内部的 `this` 值设为 `[1]`。\n\n在 `printThis` 函数内部定义了一个箭头函数 `print`，箭头函数中的 `this`，就是其外层函数 `printThis` 的 `this`，也就是 `[1]`。\n\n随后， `print()` 语句执行刚刚定义的函数，因此输出 `[1]`。\n\n## 总结\n\n弄清楚以上5种JS函数的调用方式，函数中 `this` 的指向就很清楚了。\n\n**--END--**","source":"_posts/javascript-this.md","raw":"---\ntitle: javascript this 详解\ndate: 2017-05-28 14:00\ntags:\n- tech\n---\n\n*全局作用域中的this永远为global对象，在浏览器环境下即为window对象。*\n\n函数中的this根据函数的不同调用方式分下列4中情况：\n\n## 1、直接调用（Function Invocation Pattern）\n\n例如：\n\n```javascript\nfunction foo () {\n  console.log(this)\n}\nfoo() // 输出：window\n\n```\n\n注意，此时的 `foo` 是作为单独的变量出现的，而不是对象的属性。\n\n在这种模式下，函数中的this永远是global对象，在浏览器环境下即window对象。\n\n## 2、作为方法调用（Method Invocation Pattern）\n\n示例：\n\n```javascript\nvar obj = {\n  name: 'papi',\n  say: function () {\n    console.log(this)\n  }\n}\n\nobj.say() // 输出：obj\n```\n\n这种情况下函数作为对象的属性被调用，就必然会运用到 `.` 操作符或者 `[]`操作符，这种情况下，函数中的 `this` 等于 `.` 或 `[` 前面的那个对象，上面的例子中即为obj。 `obj['say']()` 这种调用方式输出的 `this` 也是 obj。\n\n看下面一个例子：\n\n```javascript\nvar length = 100\n    \nfunction func () {\n  console.log(this.length)\n}\n\nvar o = {\n  length: 10,\n  add: function (func) {\n    func()\n    arguments[0]()\n  }\n}\no.add(func)\n```\n\n执行 `o.add` 方法并把全局变量 `func` 作为参数传入。\n\n在 `add` 方法内部执行传进来的 `func` 函数，这种调用属于函数直接调用，是上述第1种情况，因此函数中的 `this` 指向 `window`，`window.length`即全局变量 `length`，值为100。\n\n`arguments[0]()` 这一条语句是取到了函数的第一个参数（显然是 `func` 函数）并执行，这种调用方式等效于 `func()` 这种调用方式？答案是否定的！众所周知，函数中的 `arguments` 是一个类数组对象，它具有 `length` 属性，其值为参数的个数，上例中只传入了一个参数，因此 `arguments.length === 1`，深入 `arguments` 对象，展开大体是以下结构：\n\n```javascript\n{\n  0: function func () {},\n  'length': 1\n}\n```\n\n因此，`arguments[0]()` 这种调用方式其实是调用了arguments对象的 `0` 方法！而这个所谓的 `0` 方法从何而来呢？就是通过将 `func` 函数复制给它得来的。因此，方法中的 `this` 应该指向 `arguments` 对象，因此输出 1。\n\n如果执行 `o.add(func, 'hahaha')` 呢？没错，输出2，因为此时 `arguments.length === 2`。\n\n## 3、作为构造函数调用（Constructor Pattern）\n\n在 `new Foo()` 这种调用方式下，`Foo` 内部的 `this` 永远指向 `new` 操作符返回的对象\n\n```javascript\nfunction Book (name) {\n  this.name = name\n  \n  console.log(this)\n}\n\nvar book = new Book('百年孤独') // 输出 {name: '百年孤独'}\n```\n\n## 4、apply调用（Apply Pattern）\n\n```javascript\nfunction speak() {\n  console.log(this)\n}\n\nvar mao = {\n  name: 'mao'\n}\n\nspeak.call(mao)       // 输出 {name: 'mao'}\nspeak.apply(mao)      // 输出 {name: 'mao'}\nspeak.bind(mao)()     // 输出 {name: 'mao'}\nspeak.call()          // 输出 window\nspeak.call(null)      // 输出 window\nspeak.call(undefined) // 输出 window\n```\n\n函数的 `call`、 `apply` 、 `bind` 方法的第一个参数就是指定函数中 `this` 值的，如果不传参或传入 `null` 或 `undefined` 则将函数中的 `this` 指向global，在浏览器环境下即为 window对象。\n\n## 5、ES6箭头函数中的this\n\nES6的箭头函数中的 `this` 与ES5中的 `this` 行为不一样，箭头函数中的 `this` 值是在函数定义时就决定的，它不会随着运行时的上下文不同发生改变。\n\n例如：\n\n```javascript\nfunction printThis() {\n  let print = function () {\n    console.log(this)\n  }\n  print()\n}\n\nprintThis.call([1])\nprintThis.call([2])\n\n```\n根据第一种情形，上述代码两次调用均输出 `window`，如果把 `print` 函数定义为箭头函数，则 `print` 函数内部的 `this` 值会在定义 `print` 函数时决定，示例如下：\n\n```javascript\nfunction printThis() {\n  let print = () => {\n    console.log(this)\n  }\n  print()\n}\n\nprintThis.call([1]) // [1]\n\n```\n\n上例中， `printThis.call([1])` 调用 `printThis` 函数时将其内部的 `this` 值设为 `[1]`。\n\n在 `printThis` 函数内部定义了一个箭头函数 `print`，箭头函数中的 `this`，就是其外层函数 `printThis` 的 `this`，也就是 `[1]`。\n\n随后， `print()` 语句执行刚刚定义的函数，因此输出 `[1]`。\n\n## 总结\n\n弄清楚以上5种JS函数的调用方式，函数中 `this` 的指向就很清楚了。\n\n**--END--**","slug":"javascript-this","published":1,"updated":"2024-10-22T06:51:58.957Z","_id":"cm2k38af80014i804d25y781p","comments":1,"layout":"post","photos":[],"link":"","content":"<p><em>全局作用域中的this永远为global对象，在浏览器环境下即为window对象。</em></p>\n<p>函数中的this根据函数的不同调用方式分下列4中情况：</p>\n<h2 id=\"1-直接调用function-invocation-pattern\"><a class=\"markdownIt-Anchor\" href=\"#1-直接调用function-invocation-pattern\"></a> 1、直接调用（Function Invocation Pattern）</h2>\n<p>例如：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 输出：window</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>注意，此时的 <code>foo</code> 是作为单独的变量出现的，而不是对象的属性。</p>\n<p>在这种模式下，函数中的this永远是global对象，在浏览器环境下即window对象。</p>\n<h2 id=\"2-作为方法调用method-invocation-pattern\"><a class=\"markdownIt-Anchor\" href=\"#2-作为方法调用method-invocation-pattern\"></a> 2、作为方法调用（Method Invocation Pattern）</h2>\n<p>示例：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'papi'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">say</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\nobj<span class=\"token punctuation\">.</span><span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 输出：obj</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这种情况下函数作为对象的属性被调用，就必然会运用到 <code>.</code> 操作符或者 <code>[]</code>操作符，这种情况下，函数中的 <code>this</code> 等于 <code>.</code> 或 <code>[</code> 前面的那个对象，上面的例子中即为obj。 <code>obj['say']()</code> 这种调用方式输出的 <code>this</code> 也是 obj。</p>\n<p>看下面一个例子：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> length <span class=\"token operator\">=</span> <span class=\"token number\">100</span>\n    \n<span class=\"token keyword\">function</span> <span class=\"token function\">func</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">var</span> o <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">length</span><span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">add</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">func</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    arguments<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\no<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>执行 <code>o.add</code> 方法并把全局变量 <code>func</code> 作为参数传入。</p>\n<p>在 <code>add</code> 方法内部执行传进来的 <code>func</code> 函数，这种调用属于函数直接调用，是上述第1种情况，因此函数中的 <code>this</code> 指向 <code>window</code>，<code>window.length</code>即全局变量 <code>length</code>，值为100。</p>\n<p><code>arguments[0]()</code> 这一条语句是取到了函数的第一个参数（显然是 <code>func</code> 函数）并执行，这种调用方式等效于 <code>func()</code> 这种调用方式？答案是否定的！众所周知，函数中的 <code>arguments</code> 是一个类数组对象，它具有 <code>length</code> 属性，其值为参数的个数，上例中只传入了一个参数，因此 <code>arguments.length === 1</code>，深入 <code>arguments</code> 对象，展开大体是以下结构：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token number\">0</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token function\">func</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string-property property\">'length'</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>因此，<code>arguments[0]()</code> 这种调用方式其实是调用了arguments对象的 <code>0</code> 方法！而这个所谓的 <code>0</code> 方法从何而来呢？就是通过将 <code>func</code> 函数复制给它得来的。因此，方法中的 <code>this</code> 应该指向 <code>arguments</code> 对象，因此输出 1。</p>\n<p>如果执行 <code>o.add(func, 'hahaha')</code> 呢？没错，输出2，因为此时 <code>arguments.length === 2</code>。</p>\n<h2 id=\"3-作为构造函数调用constructor-pattern\"><a class=\"markdownIt-Anchor\" href=\"#3-作为构造函数调用constructor-pattern\"></a> 3、作为构造函数调用（Constructor Pattern）</h2>\n<p>在 <code>new Foo()</code> 这种调用方式下，<code>Foo</code> 内部的 <code>this</code> 永远指向 <code>new</code> 操作符返回的对象</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Book</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n  \n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">var</span> book <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Book</span><span class=\"token punctuation\">(</span><span class=\"token string\">'百年孤独'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 输出 &#123;name: '百年孤独'&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"4-apply调用apply-pattern\"><a class=\"markdownIt-Anchor\" href=\"#4-apply调用apply-pattern\"></a> 4、apply调用（Apply Pattern）</h2>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">speak</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">var</span> mao <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'mao'</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token function\">speak</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>mao<span class=\"token punctuation\">)</span>       <span class=\"token comment\">// 输出 &#123;name: 'mao'&#125;</span>\n<span class=\"token function\">speak</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>mao<span class=\"token punctuation\">)</span>      <span class=\"token comment\">// 输出 &#123;name: 'mao'&#125;</span>\n<span class=\"token function\">speak</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>mao<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>     <span class=\"token comment\">// 输出 &#123;name: 'mao'&#125;</span>\n<span class=\"token function\">speak</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>          <span class=\"token comment\">// 输出 window</span>\n<span class=\"token function\">speak</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>      <span class=\"token comment\">// 输出 window</span>\n<span class=\"token function\">speak</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 输出 window</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>函数的 <code>call</code>、 <code>apply</code> 、 <code>bind</code> 方法的第一个参数就是指定函数中 <code>this</code> 值的，如果不传参或传入 <code>null</code> 或 <code>undefined</code> 则将函数中的 <code>this</code> 指向global，在浏览器环境下即为 window对象。</p>\n<h2 id=\"5-es6箭头函数中的this\"><a class=\"markdownIt-Anchor\" href=\"#5-es6箭头函数中的this\"></a> 5、ES6箭头函数中的this</h2>\n<p>ES6的箭头函数中的 <code>this</code> 与ES5中的 <code>this</code> 行为不一样，箭头函数中的 <code>this</code> 值是在函数定义时就决定的，它不会随着运行时的上下文不同发生改变。</p>\n<p>例如：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">printThis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> <span class=\"token function-variable function\">print</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token function\">printThis</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">printThis</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>根据第一种情形，上述代码两次调用均输出 <code>window</code>，如果把 <code>print</code> 函数定义为箭头函数，则 <code>print</code> 函数内部的 <code>this</code> 值会在定义 <code>print</code> 函数时决定，示例如下：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">printThis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> <span class=\"token function-variable function\">print</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token function\">printThis</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [1]</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>上例中， <code>printThis.call([1])</code> 调用 <code>printThis</code> 函数时将其内部的 <code>this</code> 值设为 <code>[1]</code>。</p>\n<p>在 <code>printThis</code> 函数内部定义了一个箭头函数 <code>print</code>，箭头函数中的 <code>this</code>，就是其外层函数 <code>printThis</code> 的 <code>this</code>，也就是 <code>[1]</code>。</p>\n<p>随后， <code>print()</code> 语句执行刚刚定义的函数，因此输出 <code>[1]</code>。</p>\n<h2 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\"></a> 总结</h2>\n<p>弄清楚以上5种JS函数的调用方式，函数中 <code>this</code> 的指向就很清楚了。</p>\n<p><strong>–END–</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<p><em>全局作用域中的this永远为global对象，在浏览器环境下即为window对象。</em></p>\n<p>函数中的this根据函数的不同调用方式分下列4中情况：</p>\n<h2 id=\"1-直接调用function-invocation-pattern\"><a class=\"markdownIt-Anchor\" href=\"#1-直接调用function-invocation-pattern\"></a> 1、直接调用（Function Invocation Pattern）</h2>\n<p>例如：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 输出：window</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>注意，此时的 <code>foo</code> 是作为单独的变量出现的，而不是对象的属性。</p>\n<p>在这种模式下，函数中的this永远是global对象，在浏览器环境下即window对象。</p>\n<h2 id=\"2-作为方法调用method-invocation-pattern\"><a class=\"markdownIt-Anchor\" href=\"#2-作为方法调用method-invocation-pattern\"></a> 2、作为方法调用（Method Invocation Pattern）</h2>\n<p>示例：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'papi'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">say</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\nobj<span class=\"token punctuation\">.</span><span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 输出：obj</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这种情况下函数作为对象的属性被调用，就必然会运用到 <code>.</code> 操作符或者 <code>[]</code>操作符，这种情况下，函数中的 <code>this</code> 等于 <code>.</code> 或 <code>[</code> 前面的那个对象，上面的例子中即为obj。 <code>obj['say']()</code> 这种调用方式输出的 <code>this</code> 也是 obj。</p>\n<p>看下面一个例子：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> length <span class=\"token operator\">=</span> <span class=\"token number\">100</span>\n    \n<span class=\"token keyword\">function</span> <span class=\"token function\">func</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">var</span> o <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">length</span><span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">add</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">func</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    arguments<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\no<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>执行 <code>o.add</code> 方法并把全局变量 <code>func</code> 作为参数传入。</p>\n<p>在 <code>add</code> 方法内部执行传进来的 <code>func</code> 函数，这种调用属于函数直接调用，是上述第1种情况，因此函数中的 <code>this</code> 指向 <code>window</code>，<code>window.length</code>即全局变量 <code>length</code>，值为100。</p>\n<p><code>arguments[0]()</code> 这一条语句是取到了函数的第一个参数（显然是 <code>func</code> 函数）并执行，这种调用方式等效于 <code>func()</code> 这种调用方式？答案是否定的！众所周知，函数中的 <code>arguments</code> 是一个类数组对象，它具有 <code>length</code> 属性，其值为参数的个数，上例中只传入了一个参数，因此 <code>arguments.length === 1</code>，深入 <code>arguments</code> 对象，展开大体是以下结构：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token number\">0</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token function\">func</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string-property property\">'length'</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>因此，<code>arguments[0]()</code> 这种调用方式其实是调用了arguments对象的 <code>0</code> 方法！而这个所谓的 <code>0</code> 方法从何而来呢？就是通过将 <code>func</code> 函数复制给它得来的。因此，方法中的 <code>this</code> 应该指向 <code>arguments</code> 对象，因此输出 1。</p>\n<p>如果执行 <code>o.add(func, 'hahaha')</code> 呢？没错，输出2，因为此时 <code>arguments.length === 2</code>。</p>\n<h2 id=\"3-作为构造函数调用constructor-pattern\"><a class=\"markdownIt-Anchor\" href=\"#3-作为构造函数调用constructor-pattern\"></a> 3、作为构造函数调用（Constructor Pattern）</h2>\n<p>在 <code>new Foo()</code> 这种调用方式下，<code>Foo</code> 内部的 <code>this</code> 永远指向 <code>new</code> 操作符返回的对象</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Book</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n  \n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">var</span> book <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Book</span><span class=\"token punctuation\">(</span><span class=\"token string\">'百年孤独'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 输出 &#123;name: '百年孤独'&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"4-apply调用apply-pattern\"><a class=\"markdownIt-Anchor\" href=\"#4-apply调用apply-pattern\"></a> 4、apply调用（Apply Pattern）</h2>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">speak</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">var</span> mao <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'mao'</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token function\">speak</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>mao<span class=\"token punctuation\">)</span>       <span class=\"token comment\">// 输出 &#123;name: 'mao'&#125;</span>\n<span class=\"token function\">speak</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>mao<span class=\"token punctuation\">)</span>      <span class=\"token comment\">// 输出 &#123;name: 'mao'&#125;</span>\n<span class=\"token function\">speak</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>mao<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>     <span class=\"token comment\">// 输出 &#123;name: 'mao'&#125;</span>\n<span class=\"token function\">speak</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>          <span class=\"token comment\">// 输出 window</span>\n<span class=\"token function\">speak</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>      <span class=\"token comment\">// 输出 window</span>\n<span class=\"token function\">speak</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 输出 window</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>函数的 <code>call</code>、 <code>apply</code> 、 <code>bind</code> 方法的第一个参数就是指定函数中 <code>this</code> 值的，如果不传参或传入 <code>null</code> 或 <code>undefined</code> 则将函数中的 <code>this</code> 指向global，在浏览器环境下即为 window对象。</p>\n<h2 id=\"5-es6箭头函数中的this\"><a class=\"markdownIt-Anchor\" href=\"#5-es6箭头函数中的this\"></a> 5、ES6箭头函数中的this</h2>\n<p>ES6的箭头函数中的 <code>this</code> 与ES5中的 <code>this</code> 行为不一样，箭头函数中的 <code>this</code> 值是在函数定义时就决定的，它不会随着运行时的上下文不同发生改变。</p>\n<p>例如：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">printThis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> <span class=\"token function-variable function\">print</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token function\">printThis</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">printThis</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>根据第一种情形，上述代码两次调用均输出 <code>window</code>，如果把 <code>print</code> 函数定义为箭头函数，则 <code>print</code> 函数内部的 <code>this</code> 值会在定义 <code>print</code> 函数时决定，示例如下：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">printThis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> <span class=\"token function-variable function\">print</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token function\">printThis</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [1]</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>上例中， <code>printThis.call([1])</code> 调用 <code>printThis</code> 函数时将其内部的 <code>this</code> 值设为 <code>[1]</code>。</p>\n<p>在 <code>printThis</code> 函数内部定义了一个箭头函数 <code>print</code>，箭头函数中的 <code>this</code>，就是其外层函数 <code>printThis</code> 的 <code>this</code>，也就是 <code>[1]</code>。</p>\n<p>随后， <code>print()</code> 语句执行刚刚定义的函数，因此输出 <code>[1]</code>。</p>\n<h2 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\"></a> 总结</h2>\n<p>弄清楚以上5种JS函数的调用方式，函数中 <code>this</code> 的指向就很清楚了。</p>\n<p><strong>–END–</strong></p>\n"},{"title":"浏览器的标准模式（standards mode）和怪异模式(quirks mode)","date":"2017-05-26T06:00:00.000Z","_content":"\n## 什么是浏览器的标准模式（standards mode）和怪异模式(quirks mode)\n\n> 在web发展的早期，W3C标准尚未出台，不同浏览器对html的解析标准不一致，网页开发者为了能让自己的网页在这些上古浏览器上得到正常的渲染，都遵循它们私有的标准进行不同的开发。\n> \n> W3C标准出台后，浏览器厂商对最新标准进行支持的同时，为了让那些遵循上古标准开发的网站依然能够正常渲染，会启用所谓的“怪异模式”对它们进行解析。\n\n# 浏览器如何决定使用哪种模式解析？\n\n浏览器解析HTML时，如果该HTML以 `<!DOCTYPE html>` 开头，则对该html使用标准模式解析，其它类型的更复杂的DOCTYPE有可能会触发浏览器使用怪异模式对其进行解析。\n\n而且，要确保 `<!DOCTYPE html>` 在文档最前面，之前没有注释或XML声明。\n\n在 HTML5中，DOCTYPE 唯一的作用是启用标准模式。","source":"_posts/standards-mode-quirks-mode.md","raw":"---\ntitle: 浏览器的标准模式（standards mode）和怪异模式(quirks mode)\ndate: 2017-05-26 14:00\ntags:\n- tech\n---\n\n## 什么是浏览器的标准模式（standards mode）和怪异模式(quirks mode)\n\n> 在web发展的早期，W3C标准尚未出台，不同浏览器对html的解析标准不一致，网页开发者为了能让自己的网页在这些上古浏览器上得到正常的渲染，都遵循它们私有的标准进行不同的开发。\n> \n> W3C标准出台后，浏览器厂商对最新标准进行支持的同时，为了让那些遵循上古标准开发的网站依然能够正常渲染，会启用所谓的“怪异模式”对它们进行解析。\n\n# 浏览器如何决定使用哪种模式解析？\n\n浏览器解析HTML时，如果该HTML以 `<!DOCTYPE html>` 开头，则对该html使用标准模式解析，其它类型的更复杂的DOCTYPE有可能会触发浏览器使用怪异模式对其进行解析。\n\n而且，要确保 `<!DOCTYPE html>` 在文档最前面，之前没有注释或XML声明。\n\n在 HTML5中，DOCTYPE 唯一的作用是启用标准模式。","slug":"standards-mode-quirks-mode","published":1,"updated":"2024-10-22T06:52:48.251Z","_id":"cm2k39csy0017i804h3gxha28","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"什么是浏览器的标准模式standards-mode和怪异模式quirks-mode\"><a class=\"markdownIt-Anchor\" href=\"#什么是浏览器的标准模式standards-mode和怪异模式quirks-mode\"></a> 什么是浏览器的标准模式（standards mode）和怪异模式(quirks mode)</h2>\n<blockquote>\n<p>在web发展的早期，W3C标准尚未出台，不同浏览器对html的解析标准不一致，网页开发者为了能让自己的网页在这些上古浏览器上得到正常的渲染，都遵循它们私有的标准进行不同的开发。</p>\n<p>W3C标准出台后，浏览器厂商对最新标准进行支持的同时，为了让那些遵循上古标准开发的网站依然能够正常渲染，会启用所谓的“怪异模式”对它们进行解析。</p>\n</blockquote>\n<h1 id=\"浏览器如何决定使用哪种模式解析\"><a class=\"markdownIt-Anchor\" href=\"#浏览器如何决定使用哪种模式解析\"></a> 浏览器如何决定使用哪种模式解析？</h1>\n<p>浏览器解析HTML时，如果该HTML以 <code>&lt;!DOCTYPE html&gt;</code> 开头，则对该html使用标准模式解析，其它类型的更复杂的DOCTYPE有可能会触发浏览器使用怪异模式对其进行解析。</p>\n<p>而且，要确保 <code>&lt;!DOCTYPE html&gt;</code> 在文档最前面，之前没有注释或XML声明。</p>\n<p>在 HTML5中，DOCTYPE 唯一的作用是启用标准模式。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"什么是浏览器的标准模式standards-mode和怪异模式quirks-mode\"><a class=\"markdownIt-Anchor\" href=\"#什么是浏览器的标准模式standards-mode和怪异模式quirks-mode\"></a> 什么是浏览器的标准模式（standards mode）和怪异模式(quirks mode)</h2>\n<blockquote>\n<p>在web发展的早期，W3C标准尚未出台，不同浏览器对html的解析标准不一致，网页开发者为了能让自己的网页在这些上古浏览器上得到正常的渲染，都遵循它们私有的标准进行不同的开发。</p>\n<p>W3C标准出台后，浏览器厂商对最新标准进行支持的同时，为了让那些遵循上古标准开发的网站依然能够正常渲染，会启用所谓的“怪异模式”对它们进行解析。</p>\n</blockquote>\n<h1 id=\"浏览器如何决定使用哪种模式解析\"><a class=\"markdownIt-Anchor\" href=\"#浏览器如何决定使用哪种模式解析\"></a> 浏览器如何决定使用哪种模式解析？</h1>\n<p>浏览器解析HTML时，如果该HTML以 <code>&lt;!DOCTYPE html&gt;</code> 开头，则对该html使用标准模式解析，其它类型的更复杂的DOCTYPE有可能会触发浏览器使用怪异模式对其进行解析。</p>\n<p>而且，要确保 <code>&lt;!DOCTYPE html&gt;</code> 在文档最前面，之前没有注释或XML声明。</p>\n<p>在 HTML5中，DOCTYPE 唯一的作用是启用标准模式。</p>\n"},{"title":"浏览器cookie, localstorage, sessionstorage区别","date":"2017-05-26T07:00:00.000Z","_content":"\n## 相同点\n\n都存储在浏览器端，都是同源（domain）的。\n\n## 不同点\n\n1. cookie会自动被HTTP请求头携带，可以被服务器端设置；localStorage和sessionStorage不会被HTTP请求头自动携带，服务器端无法设置localStorage和sessionStorage。\n2. cookie容量只有4K，由于浏览器每次请求会自动携带cookie，因此cookie中存放的数据不宜过大；localStorage和sessionStorage的容量通常可达5M（不同浏览器具体实现有差异）。\n3. JS原生对cookie操作的支持不够，操作起来比较麻烦；HTML 5对localStorage和sessionStorage的原生支持比较完善，操作起来比较方便。直接使用window.localStorage.xxx = xxx 或 window.localStorage.setItem('xxx', xxx)即可赋值，使用window.localStorage.xxx 或 window.localStorage.getItem('xxx')即可取值。\n4. 数据有效期不同：cookie在过期时间之前都有效，到了过期时间即被销毁；localStorage会一直有效，除非人工手动清除数据；sessionStorage只在当前会话有效，用户关闭标签页或窗口后即清除。\n5. 作用域不同：cookie和localStorage在同源窗口中共享，sessionStorage只对当前会话页生效，不同标签页或窗口之间无法共享。","source":"_posts/cookie-localstorage-sessionstorage.md","raw":"---\ntitle: 浏览器cookie, localstorage, sessionstorage区别\ndate: 2017-05-26 15:00\ntags:\n- tech\n---\n\n## 相同点\n\n都存储在浏览器端，都是同源（domain）的。\n\n## 不同点\n\n1. cookie会自动被HTTP请求头携带，可以被服务器端设置；localStorage和sessionStorage不会被HTTP请求头自动携带，服务器端无法设置localStorage和sessionStorage。\n2. cookie容量只有4K，由于浏览器每次请求会自动携带cookie，因此cookie中存放的数据不宜过大；localStorage和sessionStorage的容量通常可达5M（不同浏览器具体实现有差异）。\n3. JS原生对cookie操作的支持不够，操作起来比较麻烦；HTML 5对localStorage和sessionStorage的原生支持比较完善，操作起来比较方便。直接使用window.localStorage.xxx = xxx 或 window.localStorage.setItem('xxx', xxx)即可赋值，使用window.localStorage.xxx 或 window.localStorage.getItem('xxx')即可取值。\n4. 数据有效期不同：cookie在过期时间之前都有效，到了过期时间即被销毁；localStorage会一直有效，除非人工手动清除数据；sessionStorage只在当前会话有效，用户关闭标签页或窗口后即清除。\n5. 作用域不同：cookie和localStorage在同源窗口中共享，sessionStorage只对当前会话页生效，不同标签页或窗口之间无法共享。","slug":"cookie-localstorage-sessionstorage","published":1,"updated":"2024-10-22T06:54:33.691Z","_id":"cm2k3bnmj001ai80480xk8289","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"相同点\"><a class=\"markdownIt-Anchor\" href=\"#相同点\"></a> 相同点</h2>\n<p>都存储在浏览器端，都是同源（domain）的。</p>\n<h2 id=\"不同点\"><a class=\"markdownIt-Anchor\" href=\"#不同点\"></a> 不同点</h2>\n<ol>\n<li>cookie会自动被HTTP请求头携带，可以被服务器端设置；localStorage和sessionStorage不会被HTTP请求头自动携带，服务器端无法设置localStorage和sessionStorage。</li>\n<li>cookie容量只有4K，由于浏览器每次请求会自动携带cookie，因此cookie中存放的数据不宜过大；localStorage和sessionStorage的容量通常可达5M（不同浏览器具体实现有差异）。</li>\n<li>JS原生对cookie操作的支持不够，操作起来比较麻烦；HTML 5对localStorage和sessionStorage的原生支持比较完善，操作起来比较方便。<a href=\"http://xn--window-vt9in98k266am0d.localStorage.xxx\">直接使用window.localStorage.xxx</a> = xxx 或 window.localStorage.setItem(‘xxx’, xxx)即可赋值，<a href=\"http://xn--window-vt9i248w.localStorage.xxx\">使用window.localStorage.xxx</a> 或 window.localStorage.getItem(‘xxx’)即可取值。</li>\n<li>数据有效期不同：cookie在过期时间之前都有效，到了过期时间即被销毁；localStorage会一直有效，除非人工手动清除数据；sessionStorage只在当前会话有效，用户关闭标签页或窗口后即清除。</li>\n<li>作用域不同：cookie和localStorage在同源窗口中共享，sessionStorage只对当前会话页生效，不同标签页或窗口之间无法共享。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"相同点\"><a class=\"markdownIt-Anchor\" href=\"#相同点\"></a> 相同点</h2>\n<p>都存储在浏览器端，都是同源（domain）的。</p>\n<h2 id=\"不同点\"><a class=\"markdownIt-Anchor\" href=\"#不同点\"></a> 不同点</h2>\n<ol>\n<li>cookie会自动被HTTP请求头携带，可以被服务器端设置；localStorage和sessionStorage不会被HTTP请求头自动携带，服务器端无法设置localStorage和sessionStorage。</li>\n<li>cookie容量只有4K，由于浏览器每次请求会自动携带cookie，因此cookie中存放的数据不宜过大；localStorage和sessionStorage的容量通常可达5M（不同浏览器具体实现有差异）。</li>\n<li>JS原生对cookie操作的支持不够，操作起来比较麻烦；HTML 5对localStorage和sessionStorage的原生支持比较完善，操作起来比较方便。<a href=\"http://xn--window-vt9in98k266am0d.localStorage.xxx\">直接使用window.localStorage.xxx</a> = xxx 或 window.localStorage.setItem(‘xxx’, xxx)即可赋值，<a href=\"http://xn--window-vt9i248w.localStorage.xxx\">使用window.localStorage.xxx</a> 或 window.localStorage.getItem(‘xxx’)即可取值。</li>\n<li>数据有效期不同：cookie在过期时间之前都有效，到了过期时间即被销毁；localStorage会一直有效，除非人工手动清除数据；sessionStorage只在当前会话有效，用户关闭标签页或窗口后即清除。</li>\n<li>作用域不同：cookie和localStorage在同源窗口中共享，sessionStorage只对当前会话页生效，不同标签页或窗口之间无法共享。</li>\n</ol>\n"},{"title":"浅谈JS原型链","date":"2016-11-29T06:00:00.000Z","_content":"\n> JavaScript是一门基于原型继承的语言\n> \n> ——Douglas Crockford\n\n\n## 函数的prototype属性\n\n![](../assets/images/posts/prototype/layout.jpg)\n\nJS中的**函数**有一个属性`prototype`，指向其**原型对象**，其它类型的变量不存在该属性。\n\n```javascript\nvar a = 1, str = \"中国\", flag = true, obj = {}, func = function() {};\nfunction add() {}\nvar test = new Function;\n\nconsole.log(a.prototype);//undefined\nconsole.log(str.prototype);//undefined\nconsole.log(flag.prototype);//undefined\nconsole.log(obj.prototype);//undefined\nconsole.log(func.prototype);//Object{}\nconsole.log(add.prototype);//Object{}\nconsole.log(test.prototype);//Object{}\n```\n\n## 对象的__proto__属性\n\n任何对象（除了`undefined`和`null`）都拥有一个属性，指向其**原型对象**，在大多数浏览器中，这个属性的名字是`__proto__`\n\n\n```javascript\nvar a = 1, str = \"中国\", flag = true, obj = {}, func = function() {};\nfunction add() {}\nvar test = new Function;\n\nconsole.log(a.__proto__ === Number.prototype);\nconsole.log(str.__proto__ === String.prototype);\nconsole.log(flag.__proto__ === Boolean.prototype);\nconsole.log(obj.__proto__ === Object.prototype);\nconsole.log(func.__proto__ === Function.prototype);\nconsole.log(add.__proto__ === Function.prototype);\nconsole.log(test.__proto__ === Function.prototype);\nconsole.log(NaN.__proto__ === Number.prototype);\nconsole.log(undefined.__proto__);//Uncaught TypeError: Cannot read property '__proto__' of undefined\nconsole.log(null.__proto__);//Uncaught TypeError: Cannot read property '__proto__' of null\n```\n\n也就是说：\n\n> 对象实例的`__proto__`值 和 **其构造函数**的`prototype`值 指向了同一块内存区域，这两个属性完全相等\n\n## 原型链\n\nJS是基于原型继承的面向对象语言，这是它和C++、Java等其他面向对象语言的根本区别。网上流传的这张图很好地画出了JS家族的“族谱”。下面我结合这张图，谈谈我对图中每一根“链条”的理解~\n\n**注意：为了便于理解，建议把“函数”和“函数的原型”想象成内存中独立的两个块，函数的`prototype`指针，指向了“函数的原型”这个对象**\n\n1. `f1`对象是构造函数`Foo`的“实例”，因此`f1.__proto__ === Foo.prototype`\n2. 函数`Foo`的`prototype`属性指向了“函数的原型”，即`Foo.prototype`\n3. 函数的原型有一个`constructor`属性，指向函数本身，也就是说`Foo.prototype.constructor === Foo`。**另外`f1`对象也有一个`constructor`属性，表示对象的构造函数，因此`f1.constructor === Foo`**\n4. `function Foo()`的另一种声明方式是`var Foo = new Function()`，所以`Foo.__proto__ === Function.prototype`\n5. `var o1 = new Object()`，因此`o1.__proto__ === Object.prototype`\n6. 同**2.**\n7. 同**3.**\n8. `Object`是JS内置的用于生成“对象类型的对象”的构造函数，因此`function Object()`可以理解为`var Object = new Function()`，也就是说`Object`是`Function`构造出来的实例对象，所以`Object.__proto__ === Function.prototype`\n9. 这里有点难以理解，`Function`是JS内置的用于生成“函数类型的对象”的构造函数，**8.**中的`Object`函数就是通过它`new`出来的。而我们知道，在JS的语法中，`function AAA()`可以改写为`var AAA = new Function()`，那么，`function Function()`可以改写成`var Function = new Function()`吗？答案是：可以！也就是说：如果把`Function`理解为一个对象，它的`__proto__`属性等于`Function.prototype`；如果把`Function`理解为一个函数，它的`prototype`属性当然也指向`Function.prototype`。所以，`Function.__proto__ === Function.prototype`！\n10. 同**2.**\n11. 同**3.**\n12. 除了（构造）函数`Object`以外，JS中任何（构造）函数的原型都有一个`__proto__`属性指向`Object.prototype`这个原型。而（构造）函数`Object`的原型直接指向`Object.prototype`，中间不需要通过`__proto__`属性相连。因此`Foo.prototype.__proto__ === Object.prototype`、`Function.prototype.__proto === Object.protype`、`Object.prototype === Object.prototype`(废话！)\n13. 同**12.**\n14. `Object.prototype`可以被认为是JS世界中一切的老祖宗，因为一切对象都继承自她，一切对象往上追溯若干个`__proto__`都会到达`Object.prototype`这里。那么问题是，`Object.prototype`也是一个对象，她的`__proto__`属性应该是她的“构造函数的原型”，那么这个原型是什么呢？我们试一下：\n\n  > Object.prototype.\\_\\_proto\\_\\_ === null\n\n**WTF?!(黑人问号脸)**老祖宗是特么从石头缝里蹦出来的？！不过这到让JS蒙上了一层神（装）秘（逼）色彩。\n\n> 我们翻过了一座又一座山头，到头来发现山的那边还是一座山。\n>\n> 我们以为故事的结尾有一只精灵藏匿在这语言的最核心，最后发现，这语言的核心竟是一场空。\n\n**--END--**","source":"_posts/prototype.md","raw":"---\ntitle: 浅谈JS原型链\ndate: 2016-11-29 14:00\ntags:\n- tech\n---\n\n> JavaScript是一门基于原型继承的语言\n> \n> ——Douglas Crockford\n\n\n## 函数的prototype属性\n\n![](../assets/images/posts/prototype/layout.jpg)\n\nJS中的**函数**有一个属性`prototype`，指向其**原型对象**，其它类型的变量不存在该属性。\n\n```javascript\nvar a = 1, str = \"中国\", flag = true, obj = {}, func = function() {};\nfunction add() {}\nvar test = new Function;\n\nconsole.log(a.prototype);//undefined\nconsole.log(str.prototype);//undefined\nconsole.log(flag.prototype);//undefined\nconsole.log(obj.prototype);//undefined\nconsole.log(func.prototype);//Object{}\nconsole.log(add.prototype);//Object{}\nconsole.log(test.prototype);//Object{}\n```\n\n## 对象的__proto__属性\n\n任何对象（除了`undefined`和`null`）都拥有一个属性，指向其**原型对象**，在大多数浏览器中，这个属性的名字是`__proto__`\n\n\n```javascript\nvar a = 1, str = \"中国\", flag = true, obj = {}, func = function() {};\nfunction add() {}\nvar test = new Function;\n\nconsole.log(a.__proto__ === Number.prototype);\nconsole.log(str.__proto__ === String.prototype);\nconsole.log(flag.__proto__ === Boolean.prototype);\nconsole.log(obj.__proto__ === Object.prototype);\nconsole.log(func.__proto__ === Function.prototype);\nconsole.log(add.__proto__ === Function.prototype);\nconsole.log(test.__proto__ === Function.prototype);\nconsole.log(NaN.__proto__ === Number.prototype);\nconsole.log(undefined.__proto__);//Uncaught TypeError: Cannot read property '__proto__' of undefined\nconsole.log(null.__proto__);//Uncaught TypeError: Cannot read property '__proto__' of null\n```\n\n也就是说：\n\n> 对象实例的`__proto__`值 和 **其构造函数**的`prototype`值 指向了同一块内存区域，这两个属性完全相等\n\n## 原型链\n\nJS是基于原型继承的面向对象语言，这是它和C++、Java等其他面向对象语言的根本区别。网上流传的这张图很好地画出了JS家族的“族谱”。下面我结合这张图，谈谈我对图中每一根“链条”的理解~\n\n**注意：为了便于理解，建议把“函数”和“函数的原型”想象成内存中独立的两个块，函数的`prototype`指针，指向了“函数的原型”这个对象**\n\n1. `f1`对象是构造函数`Foo`的“实例”，因此`f1.__proto__ === Foo.prototype`\n2. 函数`Foo`的`prototype`属性指向了“函数的原型”，即`Foo.prototype`\n3. 函数的原型有一个`constructor`属性，指向函数本身，也就是说`Foo.prototype.constructor === Foo`。**另外`f1`对象也有一个`constructor`属性，表示对象的构造函数，因此`f1.constructor === Foo`**\n4. `function Foo()`的另一种声明方式是`var Foo = new Function()`，所以`Foo.__proto__ === Function.prototype`\n5. `var o1 = new Object()`，因此`o1.__proto__ === Object.prototype`\n6. 同**2.**\n7. 同**3.**\n8. `Object`是JS内置的用于生成“对象类型的对象”的构造函数，因此`function Object()`可以理解为`var Object = new Function()`，也就是说`Object`是`Function`构造出来的实例对象，所以`Object.__proto__ === Function.prototype`\n9. 这里有点难以理解，`Function`是JS内置的用于生成“函数类型的对象”的构造函数，**8.**中的`Object`函数就是通过它`new`出来的。而我们知道，在JS的语法中，`function AAA()`可以改写为`var AAA = new Function()`，那么，`function Function()`可以改写成`var Function = new Function()`吗？答案是：可以！也就是说：如果把`Function`理解为一个对象，它的`__proto__`属性等于`Function.prototype`；如果把`Function`理解为一个函数，它的`prototype`属性当然也指向`Function.prototype`。所以，`Function.__proto__ === Function.prototype`！\n10. 同**2.**\n11. 同**3.**\n12. 除了（构造）函数`Object`以外，JS中任何（构造）函数的原型都有一个`__proto__`属性指向`Object.prototype`这个原型。而（构造）函数`Object`的原型直接指向`Object.prototype`，中间不需要通过`__proto__`属性相连。因此`Foo.prototype.__proto__ === Object.prototype`、`Function.prototype.__proto === Object.protype`、`Object.prototype === Object.prototype`(废话！)\n13. 同**12.**\n14. `Object.prototype`可以被认为是JS世界中一切的老祖宗，因为一切对象都继承自她，一切对象往上追溯若干个`__proto__`都会到达`Object.prototype`这里。那么问题是，`Object.prototype`也是一个对象，她的`__proto__`属性应该是她的“构造函数的原型”，那么这个原型是什么呢？我们试一下：\n\n  > Object.prototype.\\_\\_proto\\_\\_ === null\n\n**WTF?!(黑人问号脸)**老祖宗是特么从石头缝里蹦出来的？！不过这到让JS蒙上了一层神（装）秘（逼）色彩。\n\n> 我们翻过了一座又一座山头，到头来发现山的那边还是一座山。\n>\n> 我们以为故事的结尾有一只精灵藏匿在这语言的最核心，最后发现，这语言的核心竟是一场空。\n\n**--END--**","slug":"prototype","published":1,"updated":"2024-10-22T06:58:51.070Z","_id":"cm2k3gje6001di8040yi53qkt","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>JavaScript是一门基于原型继承的语言</p>\n<p>——Douglas Crockford</p>\n</blockquote>\n<h2 id=\"函数的prototype属性\"><a class=\"markdownIt-Anchor\" href=\"#函数的prototype属性\"></a> 函数的prototype属性</h2>\n<p><img src=\"../assets/images/posts/prototype/layout.jpg\" alt=\"\" /></p>\n<p>JS中的<strong>函数</strong>有一个属性<code>prototype</code>，指向其<strong>原型对象</strong>，其它类型的变量不存在该属性。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"中国\"</span><span class=\"token punctuation\">,</span> flag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token function-variable function\">func</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">var</span> test <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Function</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//undefined</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//undefined</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//undefined</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//undefined</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Object&#123;&#125;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>add<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Object&#123;&#125;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>test<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Object&#123;&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"对象的__proto__属性\"><a class=\"markdownIt-Anchor\" href=\"#对象的__proto__属性\"></a> 对象的__proto__属性</h2>\n<p>任何对象（除了<code>undefined</code>和<code>null</code>）都拥有一个属性，指向其<strong>原型对象</strong>，在大多数浏览器中，这个属性的名字是<code>__proto__</code></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"中国\"</span><span class=\"token punctuation\">,</span> flag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token function-variable function\">func</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">var</span> test <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Function</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">===</span> <span class=\"token class-name\">Number</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">===</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">===</span> <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">===</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">===</span> <span class=\"token class-name\">Function</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>add<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">===</span> <span class=\"token class-name\">Function</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>test<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">===</span> <span class=\"token class-name\">Function</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">NaN</span><span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">===</span> <span class=\"token class-name\">Number</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Uncaught TypeError: Cannot read property '__proto__' of undefined</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Uncaught TypeError: Cannot read property '__proto__' of null</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>也就是说：</p>\n<blockquote>\n<p>对象实例的<code>__proto__</code>值 和 <strong>其构造函数</strong>的<code>prototype</code>值 指向了同一块内存区域，这两个属性完全相等</p>\n</blockquote>\n<h2 id=\"原型链\"><a class=\"markdownIt-Anchor\" href=\"#原型链\"></a> 原型链</h2>\n<p>JS是基于原型继承的面向对象语言，这是它和C++、Java等其他面向对象语言的根本区别。网上流传的这张图很好地画出了JS家族的“族谱”。下面我结合这张图，谈谈我对图中每一根“链条”的理解~</p>\n<p><strong>注意：为了便于理解，建议把“函数”和“函数的原型”想象成内存中独立的两个块，函数的<code>prototype</code>指针，指向了“函数的原型”这个对象</strong></p>\n<ol>\n<li><code>f1</code>对象是构造函数<code>Foo</code>的“实例”，因此<code>f1.__proto__ === Foo.prototype</code></li>\n<li>函数<code>Foo</code>的<code>prototype</code>属性指向了“函数的原型”，即<code>Foo.prototype</code></li>\n<li>函数的原型有一个<code>constructor</code>属性，指向函数本身，也就是说<code>Foo.prototype.constructor === Foo</code>。<strong>另外<code>f1</code>对象也有一个<code>constructor</code>属性，表示对象的构造函数，因此<code>f1.constructor === Foo</code></strong></li>\n<li><code>function Foo()</code>的另一种声明方式是<code>var Foo = new Function()</code>，所以<code>Foo.__proto__ === Function.prototype</code></li>\n<li><code>var o1 = new Object()</code>，因此<code>o1.__proto__ === Object.prototype</code></li>\n<li>同<strong>2.</strong></li>\n<li>同<strong>3.</strong></li>\n<li><code>Object</code>是JS内置的用于生成“对象类型的对象”的构造函数，因此<code>function Object()</code>可以理解为<code>var Object = new Function()</code>，也就是说<code>Object</code>是<code>Function</code>构造出来的实例对象，所以<code>Object.__proto__ === Function.prototype</code></li>\n<li>这里有点难以理解，<code>Function</code>是JS内置的用于生成“函数类型的对象”的构造函数，**8.**中的<code>Object</code>函数就是通过它<code>new</code>出来的。而我们知道，在JS的语法中，<code>function AAA()</code>可以改写为<code>var AAA = new Function()</code>，那么，<code>function Function()</code>可以改写成<code>var Function = new Function()</code>吗？答案是：可以！也就是说：如果把<code>Function</code>理解为一个对象，它的<code>__proto__</code>属性等于<code>Function.prototype</code>；如果把<code>Function</code>理解为一个函数，它的<code>prototype</code>属性当然也指向<code>Function.prototype</code>。所以，<code>Function.__proto__ === Function.prototype</code>！</li>\n<li>同<strong>2.</strong></li>\n<li>同<strong>3.</strong></li>\n<li>除了（构造）函数<code>Object</code>以外，JS中任何（构造）函数的原型都有一个<code>__proto__</code>属性指向<code>Object.prototype</code>这个原型。而（构造）函数<code>Object</code>的原型直接指向<code>Object.prototype</code>，中间不需要通过<code>__proto__</code>属性相连。因此<code>Foo.prototype.__proto__ === Object.prototype</code>、<code>Function.prototype.__proto === Object.protype</code>、<code>Object.prototype === Object.prototype</code>(废话！)</li>\n<li>同<strong>12.</strong></li>\n<li><code>Object.prototype</code>可以被认为是JS世界中一切的老祖宗，因为一切对象都继承自她，一切对象往上追溯若干个<code>__proto__</code>都会到达<code>Object.prototype</code>这里。那么问题是，<code>Object.prototype</code>也是一个对象，她的<code>__proto__</code>属性应该是她的“构造函数的原型”，那么这个原型是什么呢？我们试一下：</li>\n</ol>\n<blockquote>\n<p>Object.prototype.__proto__ === null</p>\n</blockquote>\n<p>**WTF?!(黑人问号脸)**老祖宗是特么从石头缝里蹦出来的？！不过这到让JS蒙上了一层神（装）秘（逼）色彩。</p>\n<blockquote>\n<p>我们翻过了一座又一座山头，到头来发现山的那边还是一座山。</p>\n<p>我们以为故事的结尾有一只精灵藏匿在这语言的最核心，最后发现，这语言的核心竟是一场空。</p>\n</blockquote>\n<p><strong>–END–</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>JavaScript是一门基于原型继承的语言</p>\n<p>——Douglas Crockford</p>\n</blockquote>\n<h2 id=\"函数的prototype属性\"><a class=\"markdownIt-Anchor\" href=\"#函数的prototype属性\"></a> 函数的prototype属性</h2>\n<p><img src=\"../assets/images/posts/prototype/layout.jpg\" alt=\"\" /></p>\n<p>JS中的<strong>函数</strong>有一个属性<code>prototype</code>，指向其<strong>原型对象</strong>，其它类型的变量不存在该属性。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"中国\"</span><span class=\"token punctuation\">,</span> flag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token function-variable function\">func</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">var</span> test <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Function</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//undefined</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//undefined</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//undefined</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//undefined</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Object&#123;&#125;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>add<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Object&#123;&#125;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>test<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Object&#123;&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"对象的__proto__属性\"><a class=\"markdownIt-Anchor\" href=\"#对象的__proto__属性\"></a> 对象的__proto__属性</h2>\n<p>任何对象（除了<code>undefined</code>和<code>null</code>）都拥有一个属性，指向其<strong>原型对象</strong>，在大多数浏览器中，这个属性的名字是<code>__proto__</code></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"中国\"</span><span class=\"token punctuation\">,</span> flag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token function-variable function\">func</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">var</span> test <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Function</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">===</span> <span class=\"token class-name\">Number</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">===</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">===</span> <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">===</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">===</span> <span class=\"token class-name\">Function</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>add<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">===</span> <span class=\"token class-name\">Function</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>test<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">===</span> <span class=\"token class-name\">Function</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">NaN</span><span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">===</span> <span class=\"token class-name\">Number</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Uncaught TypeError: Cannot read property '__proto__' of undefined</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Uncaught TypeError: Cannot read property '__proto__' of null</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>也就是说：</p>\n<blockquote>\n<p>对象实例的<code>__proto__</code>值 和 <strong>其构造函数</strong>的<code>prototype</code>值 指向了同一块内存区域，这两个属性完全相等</p>\n</blockquote>\n<h2 id=\"原型链\"><a class=\"markdownIt-Anchor\" href=\"#原型链\"></a> 原型链</h2>\n<p>JS是基于原型继承的面向对象语言，这是它和C++、Java等其他面向对象语言的根本区别。网上流传的这张图很好地画出了JS家族的“族谱”。下面我结合这张图，谈谈我对图中每一根“链条”的理解~</p>\n<p><strong>注意：为了便于理解，建议把“函数”和“函数的原型”想象成内存中独立的两个块，函数的<code>prototype</code>指针，指向了“函数的原型”这个对象</strong></p>\n<ol>\n<li><code>f1</code>对象是构造函数<code>Foo</code>的“实例”，因此<code>f1.__proto__ === Foo.prototype</code></li>\n<li>函数<code>Foo</code>的<code>prototype</code>属性指向了“函数的原型”，即<code>Foo.prototype</code></li>\n<li>函数的原型有一个<code>constructor</code>属性，指向函数本身，也就是说<code>Foo.prototype.constructor === Foo</code>。<strong>另外<code>f1</code>对象也有一个<code>constructor</code>属性，表示对象的构造函数，因此<code>f1.constructor === Foo</code></strong></li>\n<li><code>function Foo()</code>的另一种声明方式是<code>var Foo = new Function()</code>，所以<code>Foo.__proto__ === Function.prototype</code></li>\n<li><code>var o1 = new Object()</code>，因此<code>o1.__proto__ === Object.prototype</code></li>\n<li>同<strong>2.</strong></li>\n<li>同<strong>3.</strong></li>\n<li><code>Object</code>是JS内置的用于生成“对象类型的对象”的构造函数，因此<code>function Object()</code>可以理解为<code>var Object = new Function()</code>，也就是说<code>Object</code>是<code>Function</code>构造出来的实例对象，所以<code>Object.__proto__ === Function.prototype</code></li>\n<li>这里有点难以理解，<code>Function</code>是JS内置的用于生成“函数类型的对象”的构造函数，**8.**中的<code>Object</code>函数就是通过它<code>new</code>出来的。而我们知道，在JS的语法中，<code>function AAA()</code>可以改写为<code>var AAA = new Function()</code>，那么，<code>function Function()</code>可以改写成<code>var Function = new Function()</code>吗？答案是：可以！也就是说：如果把<code>Function</code>理解为一个对象，它的<code>__proto__</code>属性等于<code>Function.prototype</code>；如果把<code>Function</code>理解为一个函数，它的<code>prototype</code>属性当然也指向<code>Function.prototype</code>。所以，<code>Function.__proto__ === Function.prototype</code>！</li>\n<li>同<strong>2.</strong></li>\n<li>同<strong>3.</strong></li>\n<li>除了（构造）函数<code>Object</code>以外，JS中任何（构造）函数的原型都有一个<code>__proto__</code>属性指向<code>Object.prototype</code>这个原型。而（构造）函数<code>Object</code>的原型直接指向<code>Object.prototype</code>，中间不需要通过<code>__proto__</code>属性相连。因此<code>Foo.prototype.__proto__ === Object.prototype</code>、<code>Function.prototype.__proto === Object.protype</code>、<code>Object.prototype === Object.prototype</code>(废话！)</li>\n<li>同<strong>12.</strong></li>\n<li><code>Object.prototype</code>可以被认为是JS世界中一切的老祖宗，因为一切对象都继承自她，一切对象往上追溯若干个<code>__proto__</code>都会到达<code>Object.prototype</code>这里。那么问题是，<code>Object.prototype</code>也是一个对象，她的<code>__proto__</code>属性应该是她的“构造函数的原型”，那么这个原型是什么呢？我们试一下：</li>\n</ol>\n<blockquote>\n<p>Object.prototype.__proto__ === null</p>\n</blockquote>\n<p>**WTF?!(黑人问号脸)**老祖宗是特么从石头缝里蹦出来的？！不过这到让JS蒙上了一层神（装）秘（逼）色彩。</p>\n<blockquote>\n<p>我们翻过了一座又一座山头，到头来发现山的那边还是一座山。</p>\n<p>我们以为故事的结尾有一只精灵藏匿在这语言的最核心，最后发现，这语言的核心竟是一场空。</p>\n</blockquote>\n<p><strong>–END–</strong></p>\n"},{"title":"typeof操作符","date":"2016-11-22T06:00:00.000Z","_content":"\n> JS中，typeof操作符返回一个字符串，表明typeof 后面操作数的类型\n\n```javascript\n// Numbers\ntypeof 37 === 'number';\ntypeof 3.14 === 'number';\ntypeof Math.LN2 === 'number';\ntypeof Infinity === 'number';\ntypeof NaN === 'number'; // 尽管NaN是\"Not-A-Number\"的缩写\ntypeof Number(1) === 'number'; // 但不要使用这种形式!\n\n// Strings\ntypeof \"\" === 'string';\ntypeof \"bla\" === 'string';\ntypeof (typeof 1) === 'string'; // typeof总是返回一个字符串\ntypeof String(\"abc\") === 'string'; // 但不要使用这种形式!\n\n// Booleans\ntypeof true === 'boolean';\ntypeof false === 'boolean';\ntypeof Boolean(true) === 'boolean'; // 但不要使用这种形式!\n\n// Functions\ntypeof eval === 'function';\ntypeof Math.floor === 'function';\n\n// Symbols\ntypeof Symbol() === 'symbol';\ntypeof Symbol('foo') === 'symbol';\ntypeof Symbol.iterator === 'symbol';\n\n// Undefined\ntypeof undefined === 'undefined';\ntypeof declaredButUndefinedVariable === 'undefined';\ntypeof undeclaredVariable === 'undefined'; \n\n// Objects\ntypeof {a:1} === 'object';\n\n// 区分数组,普通对象\ntypeof [1, 2, 4] === 'object';\n\ntypeof new Date() === 'object';\n```\n\n用typeof Array 返回的类型是`object`，那么怎样区分数组和对象呢？\n\n## 区分数组和对象\n\n可以使用`Object.prototype.toString`方法。ECMA-262标准中，该方法的执行逻辑是：\n\n1. Get the [[Class]] property of this object.\n2. Compute a string value by concatenating the three strings “[object “, Result (1), and “]”. \n3. Return Result (2)\n\n而ECMA-262标准中对Array的描述如下：\n\n1. new Array([ item0[, item1 [,…]]]) \n2. The [[Class]] property of the newly constructed object is set to “Array”. \n\n所以，当我们在一个数组上使用call调用`Object.prototype.toString`方法时，可以取到该数组的内部属性Class为“Array”。所以，判断一个JS对象是否为数组的逻辑如下：\n\n```javascript\nfunction isArray(v) {\n  return Object.prototype.toString.call(v) === '[object Array]';\n}\n```\n测试如下：\n\n```javascript\n// 下面的函数调用都返回 true\nisArray([]);\nisArray([1]);\nisArray(new Array());\n// 鲜为人知的事实：其实 Array.prototype 也是一个数组。\nisArray(Array.prototype); \n\n// 下面的函数调用都返回 false\nisArray();\nisArray({});\nisArray(null);\nisArray(undefined);\nisArray(17);\nisArray('Array');\nisArray(true);\nisArray(false);\n```\n\n## Reference\n\n1. [https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/typeof](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/typeof)\n2. [https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray)\n3. [http://www.cnblogs.com/YaoAzhen/archive/2010/01/27/1657696.html](http://www.cnblogs.com/YaoAzhen/archive/2010/01/27/1657696.html)\n\n**--END--**","source":"_posts/typeof.md","raw":"---\ntitle: typeof操作符\ndate: 2016-11-22 14:00\ntags:\n- tech\n---\n\n> JS中，typeof操作符返回一个字符串，表明typeof 后面操作数的类型\n\n```javascript\n// Numbers\ntypeof 37 === 'number';\ntypeof 3.14 === 'number';\ntypeof Math.LN2 === 'number';\ntypeof Infinity === 'number';\ntypeof NaN === 'number'; // 尽管NaN是\"Not-A-Number\"的缩写\ntypeof Number(1) === 'number'; // 但不要使用这种形式!\n\n// Strings\ntypeof \"\" === 'string';\ntypeof \"bla\" === 'string';\ntypeof (typeof 1) === 'string'; // typeof总是返回一个字符串\ntypeof String(\"abc\") === 'string'; // 但不要使用这种形式!\n\n// Booleans\ntypeof true === 'boolean';\ntypeof false === 'boolean';\ntypeof Boolean(true) === 'boolean'; // 但不要使用这种形式!\n\n// Functions\ntypeof eval === 'function';\ntypeof Math.floor === 'function';\n\n// Symbols\ntypeof Symbol() === 'symbol';\ntypeof Symbol('foo') === 'symbol';\ntypeof Symbol.iterator === 'symbol';\n\n// Undefined\ntypeof undefined === 'undefined';\ntypeof declaredButUndefinedVariable === 'undefined';\ntypeof undeclaredVariable === 'undefined'; \n\n// Objects\ntypeof {a:1} === 'object';\n\n// 区分数组,普通对象\ntypeof [1, 2, 4] === 'object';\n\ntypeof new Date() === 'object';\n```\n\n用typeof Array 返回的类型是`object`，那么怎样区分数组和对象呢？\n\n## 区分数组和对象\n\n可以使用`Object.prototype.toString`方法。ECMA-262标准中，该方法的执行逻辑是：\n\n1. Get the [[Class]] property of this object.\n2. Compute a string value by concatenating the three strings “[object “, Result (1), and “]”. \n3. Return Result (2)\n\n而ECMA-262标准中对Array的描述如下：\n\n1. new Array([ item0[, item1 [,…]]]) \n2. The [[Class]] property of the newly constructed object is set to “Array”. \n\n所以，当我们在一个数组上使用call调用`Object.prototype.toString`方法时，可以取到该数组的内部属性Class为“Array”。所以，判断一个JS对象是否为数组的逻辑如下：\n\n```javascript\nfunction isArray(v) {\n  return Object.prototype.toString.call(v) === '[object Array]';\n}\n```\n测试如下：\n\n```javascript\n// 下面的函数调用都返回 true\nisArray([]);\nisArray([1]);\nisArray(new Array());\n// 鲜为人知的事实：其实 Array.prototype 也是一个数组。\nisArray(Array.prototype); \n\n// 下面的函数调用都返回 false\nisArray();\nisArray({});\nisArray(null);\nisArray(undefined);\nisArray(17);\nisArray('Array');\nisArray(true);\nisArray(false);\n```\n\n## Reference\n\n1. [https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/typeof](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/typeof)\n2. [https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray)\n3. [http://www.cnblogs.com/YaoAzhen/archive/2010/01/27/1657696.html](http://www.cnblogs.com/YaoAzhen/archive/2010/01/27/1657696.html)\n\n**--END--**","slug":"typeof","published":1,"updated":"2024-10-22T06:59:20.033Z","_id":"cm2k3hm68001gi804bx1vgy77","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>JS中，typeof操作符返回一个字符串，表明typeof 后面操作数的类型</p>\n</blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Numbers</span>\n<span class=\"token keyword\">typeof</span> <span class=\"token number\">37</span> <span class=\"token operator\">===</span> <span class=\"token string\">'number'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typeof</span> <span class=\"token number\">3.14</span> <span class=\"token operator\">===</span> <span class=\"token string\">'number'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typeof</span> Math<span class=\"token punctuation\">.</span><span class=\"token constant\">LN2</span> <span class=\"token operator\">===</span> <span class=\"token string\">'number'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typeof</span> <span class=\"token number\">Infinity</span> <span class=\"token operator\">===</span> <span class=\"token string\">'number'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typeof</span> <span class=\"token number\">NaN</span> <span class=\"token operator\">===</span> <span class=\"token string\">'number'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 尽管NaN是\"Not-A-Number\"的缩写</span>\n<span class=\"token keyword\">typeof</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">'number'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 但不要使用这种形式!</span>\n\n<span class=\"token comment\">// Strings</span>\n<span class=\"token keyword\">typeof</span> <span class=\"token string\">\"\"</span> <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typeof</span> <span class=\"token string\">\"bla\"</span> <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typeof</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// typeof总是返回一个字符串</span>\n<span class=\"token keyword\">typeof</span> <span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 但不要使用这种形式!</span>\n\n<span class=\"token comment\">// Booleans</span>\n<span class=\"token keyword\">typeof</span> <span class=\"token boolean\">true</span> <span class=\"token operator\">===</span> <span class=\"token string\">'boolean'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typeof</span> <span class=\"token boolean\">false</span> <span class=\"token operator\">===</span> <span class=\"token string\">'boolean'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typeof</span> <span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">'boolean'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 但不要使用这种形式!</span>\n\n<span class=\"token comment\">// Functions</span>\n<span class=\"token keyword\">typeof</span> eval <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typeof</span> Math<span class=\"token punctuation\">.</span>floor <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Symbols</span>\n<span class=\"token keyword\">typeof</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">'symbol'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typeof</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">'symbol'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typeof</span> Symbol<span class=\"token punctuation\">.</span>iterator <span class=\"token operator\">===</span> <span class=\"token string\">'symbol'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Undefined</span>\n<span class=\"token keyword\">typeof</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">===</span> <span class=\"token string\">'undefined'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typeof</span> declaredButUndefinedVariable <span class=\"token operator\">===</span> <span class=\"token string\">'undefined'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typeof</span> undeclaredVariable <span class=\"token operator\">===</span> <span class=\"token string\">'undefined'</span><span class=\"token punctuation\">;</span> \n\n<span class=\"token comment\">// Objects</span>\n<span class=\"token keyword\">typeof</span> <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">===</span> <span class=\"token string\">'object'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 区分数组,普通对象</span>\n<span class=\"token keyword\">typeof</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token string\">'object'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">typeof</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">'object'</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>用typeof Array 返回的类型是<code>object</code>，那么怎样区分数组和对象呢？</p>\n<h2 id=\"区分数组和对象\"><a class=\"markdownIt-Anchor\" href=\"#区分数组和对象\"></a> 区分数组和对象</h2>\n<p>可以使用<code>Object.prototype.toString</code>方法。ECMA-262标准中，该方法的执行逻辑是：</p>\n<ol>\n<li>Get the [[Class]] property of this object.</li>\n<li>Compute a string value by concatenating the three strings “[object “, Result (1), and “]”.</li>\n<li>Return Result (2)</li>\n</ol>\n<p>而ECMA-262标准中对Array的描述如下：</p>\n<ol>\n<li>new Array([ item0[, item1 [,…]]])</li>\n<li>The [[Class]] property of the newly constructed object is set to “Array”.</li>\n</ol>\n<p>所以，当我们在一个数组上使用call调用<code>Object.prototype.toString</code>方法时，可以取到该数组的内部属性Class为“Array”。所以，判断一个JS对象是否为数组的逻辑如下：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">'[object Array]'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>测试如下：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 下面的函数调用都返回 true</span>\n<span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 鲜为人知的事实：其实 Array.prototype 也是一个数组。</span>\n<span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\n<span class=\"token comment\">// 下面的函数调用都返回 false</span>\n<span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span><span class=\"token number\">17</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Array'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"reference\"><a class=\"markdownIt-Anchor\" href=\"#reference\"></a> Reference</h2>\n<ol>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/typeof\">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/typeof</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray\">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray</a></li>\n<li><a href=\"http://www.cnblogs.com/YaoAzhen/archive/2010/01/27/1657696.html\">http://www.cnblogs.com/YaoAzhen/archive/2010/01/27/1657696.html</a></li>\n</ol>\n<p><strong>–END–</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>JS中，typeof操作符返回一个字符串，表明typeof 后面操作数的类型</p>\n</blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Numbers</span>\n<span class=\"token keyword\">typeof</span> <span class=\"token number\">37</span> <span class=\"token operator\">===</span> <span class=\"token string\">'number'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typeof</span> <span class=\"token number\">3.14</span> <span class=\"token operator\">===</span> <span class=\"token string\">'number'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typeof</span> Math<span class=\"token punctuation\">.</span><span class=\"token constant\">LN2</span> <span class=\"token operator\">===</span> <span class=\"token string\">'number'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typeof</span> <span class=\"token number\">Infinity</span> <span class=\"token operator\">===</span> <span class=\"token string\">'number'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typeof</span> <span class=\"token number\">NaN</span> <span class=\"token operator\">===</span> <span class=\"token string\">'number'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 尽管NaN是\"Not-A-Number\"的缩写</span>\n<span class=\"token keyword\">typeof</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">'number'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 但不要使用这种形式!</span>\n\n<span class=\"token comment\">// Strings</span>\n<span class=\"token keyword\">typeof</span> <span class=\"token string\">\"\"</span> <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typeof</span> <span class=\"token string\">\"bla\"</span> <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typeof</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// typeof总是返回一个字符串</span>\n<span class=\"token keyword\">typeof</span> <span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 但不要使用这种形式!</span>\n\n<span class=\"token comment\">// Booleans</span>\n<span class=\"token keyword\">typeof</span> <span class=\"token boolean\">true</span> <span class=\"token operator\">===</span> <span class=\"token string\">'boolean'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typeof</span> <span class=\"token boolean\">false</span> <span class=\"token operator\">===</span> <span class=\"token string\">'boolean'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typeof</span> <span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">'boolean'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 但不要使用这种形式!</span>\n\n<span class=\"token comment\">// Functions</span>\n<span class=\"token keyword\">typeof</span> eval <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typeof</span> Math<span class=\"token punctuation\">.</span>floor <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Symbols</span>\n<span class=\"token keyword\">typeof</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">'symbol'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typeof</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">'symbol'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typeof</span> Symbol<span class=\"token punctuation\">.</span>iterator <span class=\"token operator\">===</span> <span class=\"token string\">'symbol'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Undefined</span>\n<span class=\"token keyword\">typeof</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">===</span> <span class=\"token string\">'undefined'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typeof</span> declaredButUndefinedVariable <span class=\"token operator\">===</span> <span class=\"token string\">'undefined'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typeof</span> undeclaredVariable <span class=\"token operator\">===</span> <span class=\"token string\">'undefined'</span><span class=\"token punctuation\">;</span> \n\n<span class=\"token comment\">// Objects</span>\n<span class=\"token keyword\">typeof</span> <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">===</span> <span class=\"token string\">'object'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 区分数组,普通对象</span>\n<span class=\"token keyword\">typeof</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token string\">'object'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">typeof</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">'object'</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>用typeof Array 返回的类型是<code>object</code>，那么怎样区分数组和对象呢？</p>\n<h2 id=\"区分数组和对象\"><a class=\"markdownIt-Anchor\" href=\"#区分数组和对象\"></a> 区分数组和对象</h2>\n<p>可以使用<code>Object.prototype.toString</code>方法。ECMA-262标准中，该方法的执行逻辑是：</p>\n<ol>\n<li>Get the [[Class]] property of this object.</li>\n<li>Compute a string value by concatenating the three strings “[object “, Result (1), and “]”.</li>\n<li>Return Result (2)</li>\n</ol>\n<p>而ECMA-262标准中对Array的描述如下：</p>\n<ol>\n<li>new Array([ item0[, item1 [,…]]])</li>\n<li>The [[Class]] property of the newly constructed object is set to “Array”.</li>\n</ol>\n<p>所以，当我们在一个数组上使用call调用<code>Object.prototype.toString</code>方法时，可以取到该数组的内部属性Class为“Array”。所以，判断一个JS对象是否为数组的逻辑如下：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">'[object Array]'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>测试如下：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 下面的函数调用都返回 true</span>\n<span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 鲜为人知的事实：其实 Array.prototype 也是一个数组。</span>\n<span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\n<span class=\"token comment\">// 下面的函数调用都返回 false</span>\n<span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span><span class=\"token number\">17</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Array'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"reference\"><a class=\"markdownIt-Anchor\" href=\"#reference\"></a> Reference</h2>\n<ol>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/typeof\">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/typeof</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray\">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray</a></li>\n<li><a href=\"http://www.cnblogs.com/YaoAzhen/archive/2010/01/27/1657696.html\">http://www.cnblogs.com/YaoAzhen/archive/2010/01/27/1657696.html</a></li>\n</ol>\n<p><strong>–END–</strong></p>\n"},{"title":"Javascript Array-like objects","date":"2016-11-22T06:00:00.000Z","_content":"\nJS中有一些对象看起来像数组，但其实不是数组，它们被称为“类似数组的对象”（array-like objects）。这篇文章将介绍什么样的对象是array-like object（为了简单，下文简称ALO）的；平时开发中，遇到ALO应该怎么处理。\n\n## 定义（特征）\n\nALO的定义或者说“特征”是什么呢？\n\n- 能够通过下标的方式访问对象中的元素\n- 具备非负 Number 类型的`length`属性，标识对象中有几个元素\n- 不具备“标准数组对象”的内置方法，例如`push`、`forEach`、`indexOf`等\n\n常见的ALO主要有：函数中的`arguments`、`String`对象、`document.getElementsByClassName`函数的返回值等等~\n\n## 数组中的通用方法（generic methods）\n\n数组中内置了很多方法，例如`push`、`forEach`等等，这些方法内部的`this`对象可以不是一个数组，只需要是一个ALO，数组中的这类方法叫做“通用方法”。\n\n### 例1：forEach\n\n```javascript\nfunction printArgs() {\n  Array.prototype.forEach.call(arguments, function(item, index) {\n    console.log(index + \". \" + item);\n  })\n}\n\nprintArgs(\"哈哈\", \"嘿嘿\", \"呵呵\")\n```\n\n上面的代码对函数的`arguments`对象直接使用了`Array.prototype.forEach`通用方法，打印出了arguments的下标和值。\n\n### 例2：push\n\n对普通对象使用`Array.prototype.push`会发生什么呢？\n\n```javascript\nvar books = {};\n\nArray.prototype.push.call(books, \"javascript权威指南\", \"CSS权威指南\");\n\nconsole.log(books);\n```\n输出：\n\n```javascript\nObject {0: \"javascript权威指南\", 1: \"CSS权威指南\", length: 2}\n```\n\n这个时候，`books`就变成了一个ALO\n\n## 将ALO转化成数组\n\n在很多时候，需要将ALO转化成真正的数组，这样就可以对它使用数组内置的方法。转化方法也很简单（拿arguments举例）：\n\n```javascript\nArray.prototype.slice.call(arguments);\n//or\n[].slice.call(arguments);\n```\n但是由于 IE 下 Array.prototype.slice.call(nodes) 会抛出错误（because a DOM NodeList is not a JavaScript object），所以兼容写法如下：\n\n```javascript\nfunction ALO2Arr(ALO) {\n  try{\n  return [].slice.call(ALO);\n  }catch(e) {\n  var len = ALO.length, arr = [];\n  for(var i = 0; i < len; i++) {\n    arr.push(ALO[i]);\n  }\n  }\n}\n```\n\n**注意：如果要把函数的arguments对象转化成数组，最好不要直接在函数中使用arguments对象，因为这将[导致Chrome和Node中使用的V8引擎跳过对其的优化](https://github.com/petkaantonov/bluebird/wiki/Optimization-killers#3-managing-arguments)**\n\n## 参考\n\n- [https://github.com/hanzichi/underscore-analysis/issues/14](https://github.com/hanzichi/underscore-analysis/issues/14)\n- [https://github.com/petkaantonov/bluebird/wiki/Optimization-killers#3-managing-arguments](https://github.com/petkaantonov/bluebird/wiki/Optimization-killers#3-managing-arguments)\n- [http://www.2ality.com/2013/05/quirk-array-like-objects.html](http://www.2ality.com/2013/05/quirk-array-like-objects.html)\n\n**--END--**","source":"_posts/array-like-objects.md","raw":"---\ntitle: Javascript Array-like objects\ndate: 2016-11-22 14:00\ntags:\n- tech\n---\n\nJS中有一些对象看起来像数组，但其实不是数组，它们被称为“类似数组的对象”（array-like objects）。这篇文章将介绍什么样的对象是array-like object（为了简单，下文简称ALO）的；平时开发中，遇到ALO应该怎么处理。\n\n## 定义（特征）\n\nALO的定义或者说“特征”是什么呢？\n\n- 能够通过下标的方式访问对象中的元素\n- 具备非负 Number 类型的`length`属性，标识对象中有几个元素\n- 不具备“标准数组对象”的内置方法，例如`push`、`forEach`、`indexOf`等\n\n常见的ALO主要有：函数中的`arguments`、`String`对象、`document.getElementsByClassName`函数的返回值等等~\n\n## 数组中的通用方法（generic methods）\n\n数组中内置了很多方法，例如`push`、`forEach`等等，这些方法内部的`this`对象可以不是一个数组，只需要是一个ALO，数组中的这类方法叫做“通用方法”。\n\n### 例1：forEach\n\n```javascript\nfunction printArgs() {\n  Array.prototype.forEach.call(arguments, function(item, index) {\n    console.log(index + \". \" + item);\n  })\n}\n\nprintArgs(\"哈哈\", \"嘿嘿\", \"呵呵\")\n```\n\n上面的代码对函数的`arguments`对象直接使用了`Array.prototype.forEach`通用方法，打印出了arguments的下标和值。\n\n### 例2：push\n\n对普通对象使用`Array.prototype.push`会发生什么呢？\n\n```javascript\nvar books = {};\n\nArray.prototype.push.call(books, \"javascript权威指南\", \"CSS权威指南\");\n\nconsole.log(books);\n```\n输出：\n\n```javascript\nObject {0: \"javascript权威指南\", 1: \"CSS权威指南\", length: 2}\n```\n\n这个时候，`books`就变成了一个ALO\n\n## 将ALO转化成数组\n\n在很多时候，需要将ALO转化成真正的数组，这样就可以对它使用数组内置的方法。转化方法也很简单（拿arguments举例）：\n\n```javascript\nArray.prototype.slice.call(arguments);\n//or\n[].slice.call(arguments);\n```\n但是由于 IE 下 Array.prototype.slice.call(nodes) 会抛出错误（because a DOM NodeList is not a JavaScript object），所以兼容写法如下：\n\n```javascript\nfunction ALO2Arr(ALO) {\n  try{\n  return [].slice.call(ALO);\n  }catch(e) {\n  var len = ALO.length, arr = [];\n  for(var i = 0; i < len; i++) {\n    arr.push(ALO[i]);\n  }\n  }\n}\n```\n\n**注意：如果要把函数的arguments对象转化成数组，最好不要直接在函数中使用arguments对象，因为这将[导致Chrome和Node中使用的V8引擎跳过对其的优化](https://github.com/petkaantonov/bluebird/wiki/Optimization-killers#3-managing-arguments)**\n\n## 参考\n\n- [https://github.com/hanzichi/underscore-analysis/issues/14](https://github.com/hanzichi/underscore-analysis/issues/14)\n- [https://github.com/petkaantonov/bluebird/wiki/Optimization-killers#3-managing-arguments](https://github.com/petkaantonov/bluebird/wiki/Optimization-killers#3-managing-arguments)\n- [http://www.2ality.com/2013/05/quirk-array-like-objects.html](http://www.2ality.com/2013/05/quirk-array-like-objects.html)\n\n**--END--**","slug":"array-like-objects","published":1,"updated":"2024-10-22T07:00:08.952Z","_id":"cm2k3iwhf001ji8041wuef02q","comments":1,"layout":"post","photos":[],"link":"","content":"<p>JS中有一些对象看起来像数组，但其实不是数组，它们被称为“类似数组的对象”（array-like objects）。这篇文章将介绍什么样的对象是array-like object（为了简单，下文简称ALO）的；平时开发中，遇到ALO应该怎么处理。</p>\n<h2 id=\"定义特征\"><a class=\"markdownIt-Anchor\" href=\"#定义特征\"></a> 定义（特征）</h2>\n<p>ALO的定义或者说“特征”是什么呢？</p>\n<ul>\n<li>能够通过下标的方式访问对象中的元素</li>\n<li>具备非负 Number 类型的<code>length</code>属性，标识对象中有几个元素</li>\n<li>不具备“标准数组对象”的内置方法，例如<code>push</code>、<code>forEach</code>、<code>indexOf</code>等</li>\n</ul>\n<p>常见的ALO主要有：函数中的<code>arguments</code>、<code>String</code>对象、<code>document.getElementsByClassName</code>函数的返回值等等~</p>\n<h2 id=\"数组中的通用方法generic-methods\"><a class=\"markdownIt-Anchor\" href=\"#数组中的通用方法generic-methods\"></a> 数组中的通用方法（generic methods）</h2>\n<p>数组中内置了很多方法，例如<code>push</code>、<code>forEach</code>等等，这些方法内部的<code>this</code>对象可以不是一个数组，只需要是一个ALO，数组中的这类方法叫做“通用方法”。</p>\n<h3 id=\"例1foreach\"><a class=\"markdownIt-Anchor\" href=\"#例1foreach\"></a> 例1：forEach</h3>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">printArgs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">+</span> <span class=\"token string\">\". \"</span> <span class=\"token operator\">+</span> item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token function\">printArgs</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"哈哈\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"嘿嘿\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"呵呵\"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>上面的代码对函数的<code>arguments</code>对象直接使用了<code>Array.prototype.forEach</code>通用方法，打印出了arguments的下标和值。</p>\n<h3 id=\"例2push\"><a class=\"markdownIt-Anchor\" href=\"#例2push\"></a> 例2：push</h3>\n<p>对普通对象使用<code>Array.prototype.push</code>会发生什么呢？</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> books <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>books<span class=\"token punctuation\">,</span> <span class=\"token string\">\"javascript权威指南\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"CSS权威指南\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>books<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>输出：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">Object <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token operator\">:</span> <span class=\"token string\">\"javascript权威指南\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span> <span class=\"token string\">\"CSS权威指南\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">length</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>这个时候，<code>books</code>就变成了一个ALO</p>\n<h2 id=\"将alo转化成数组\"><a class=\"markdownIt-Anchor\" href=\"#将alo转化成数组\"></a> 将ALO转化成数组</h2>\n<p>在很多时候，需要将ALO转化成真正的数组，这样就可以对它使用数组内置的方法。转化方法也很简单（拿arguments举例）：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//or</span>\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>但是由于 IE 下 Array.prototype.slice.call(nodes) 会抛出错误（because a DOM NodeList is not a JavaScript object），所以兼容写法如下：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">ALO2Arr</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token constant\">ALO</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">try</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token constant\">ALO</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> len <span class=\"token operator\">=</span> <span class=\"token constant\">ALO</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    arr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token constant\">ALO</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>注意：如果要把函数的arguments对象转化成数组，最好不要直接在函数中使用arguments对象，因为这将<a href=\"https://github.com/petkaantonov/bluebird/wiki/Optimization-killers#3-managing-arguments\">导致Chrome和Node中使用的V8引擎跳过对其的优化</a></strong></p>\n<h2 id=\"参考\"><a class=\"markdownIt-Anchor\" href=\"#参考\"></a> 参考</h2>\n<ul>\n<li><a href=\"https://github.com/hanzichi/underscore-analysis/issues/14\">https://github.com/hanzichi/underscore-analysis/issues/14</a></li>\n<li><a href=\"https://github.com/petkaantonov/bluebird/wiki/Optimization-killers#3-managing-arguments\">https://github.com/petkaantonov/bluebird/wiki/Optimization-killers#3-managing-arguments</a></li>\n<li><a href=\"http://www.2ality.com/2013/05/quirk-array-like-objects.html\">http://www.2ality.com/2013/05/quirk-array-like-objects.html</a></li>\n</ul>\n<p><strong>–END–</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<p>JS中有一些对象看起来像数组，但其实不是数组，它们被称为“类似数组的对象”（array-like objects）。这篇文章将介绍什么样的对象是array-like object（为了简单，下文简称ALO）的；平时开发中，遇到ALO应该怎么处理。</p>\n<h2 id=\"定义特征\"><a class=\"markdownIt-Anchor\" href=\"#定义特征\"></a> 定义（特征）</h2>\n<p>ALO的定义或者说“特征”是什么呢？</p>\n<ul>\n<li>能够通过下标的方式访问对象中的元素</li>\n<li>具备非负 Number 类型的<code>length</code>属性，标识对象中有几个元素</li>\n<li>不具备“标准数组对象”的内置方法，例如<code>push</code>、<code>forEach</code>、<code>indexOf</code>等</li>\n</ul>\n<p>常见的ALO主要有：函数中的<code>arguments</code>、<code>String</code>对象、<code>document.getElementsByClassName</code>函数的返回值等等~</p>\n<h2 id=\"数组中的通用方法generic-methods\"><a class=\"markdownIt-Anchor\" href=\"#数组中的通用方法generic-methods\"></a> 数组中的通用方法（generic methods）</h2>\n<p>数组中内置了很多方法，例如<code>push</code>、<code>forEach</code>等等，这些方法内部的<code>this</code>对象可以不是一个数组，只需要是一个ALO，数组中的这类方法叫做“通用方法”。</p>\n<h3 id=\"例1foreach\"><a class=\"markdownIt-Anchor\" href=\"#例1foreach\"></a> 例1：forEach</h3>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">printArgs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">+</span> <span class=\"token string\">\". \"</span> <span class=\"token operator\">+</span> item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token function\">printArgs</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"哈哈\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"嘿嘿\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"呵呵\"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>上面的代码对函数的<code>arguments</code>对象直接使用了<code>Array.prototype.forEach</code>通用方法，打印出了arguments的下标和值。</p>\n<h3 id=\"例2push\"><a class=\"markdownIt-Anchor\" href=\"#例2push\"></a> 例2：push</h3>\n<p>对普通对象使用<code>Array.prototype.push</code>会发生什么呢？</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> books <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>books<span class=\"token punctuation\">,</span> <span class=\"token string\">\"javascript权威指南\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"CSS权威指南\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>books<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>输出：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">Object <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token operator\">:</span> <span class=\"token string\">\"javascript权威指南\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span> <span class=\"token string\">\"CSS权威指南\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">length</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>这个时候，<code>books</code>就变成了一个ALO</p>\n<h2 id=\"将alo转化成数组\"><a class=\"markdownIt-Anchor\" href=\"#将alo转化成数组\"></a> 将ALO转化成数组</h2>\n<p>在很多时候，需要将ALO转化成真正的数组，这样就可以对它使用数组内置的方法。转化方法也很简单（拿arguments举例）：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//or</span>\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>但是由于 IE 下 Array.prototype.slice.call(nodes) 会抛出错误（because a DOM NodeList is not a JavaScript object），所以兼容写法如下：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">ALO2Arr</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token constant\">ALO</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">try</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token constant\">ALO</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> len <span class=\"token operator\">=</span> <span class=\"token constant\">ALO</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    arr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token constant\">ALO</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>注意：如果要把函数的arguments对象转化成数组，最好不要直接在函数中使用arguments对象，因为这将<a href=\"https://github.com/petkaantonov/bluebird/wiki/Optimization-killers#3-managing-arguments\">导致Chrome和Node中使用的V8引擎跳过对其的优化</a></strong></p>\n<h2 id=\"参考\"><a class=\"markdownIt-Anchor\" href=\"#参考\"></a> 参考</h2>\n<ul>\n<li><a href=\"https://github.com/hanzichi/underscore-analysis/issues/14\">https://github.com/hanzichi/underscore-analysis/issues/14</a></li>\n<li><a href=\"https://github.com/petkaantonov/bluebird/wiki/Optimization-killers#3-managing-arguments\">https://github.com/petkaantonov/bluebird/wiki/Optimization-killers#3-managing-arguments</a></li>\n<li><a href=\"http://www.2ality.com/2013/05/quirk-array-like-objects.html\">http://www.2ality.com/2013/05/quirk-array-like-objects.html</a></li>\n</ul>\n<p><strong>–END–</strong></p>\n"},{"title":"CSS Block Formatting Context(BFC)详解","date":"2016-11-21T06:00:00.000Z","_content":"\n> Floats, absolutely positioned elements, block containers (such as inline-blocks, table-cells, and table-captions) that are not block boxes, and block boxes with 'overflow' other than 'visible' (except when that value has been propagated to the viewport) establish new block formatting contexts for their contents.\n\n> In a block formatting context, boxes are laid out one after the other, vertically, beginning at the top of a containing block. The vertical distance between two sibling boxes is determined by the 'margin' properties. Vertical margins between adjacent block-level boxes in a block formatting context collapse.\n\n> In a block formatting context, each box's left outer edge touches the left edge of the containing block (for right-to-left formatting, right edges touch). This is true even in the presence of floats (although a box's line boxes may shrink due to the floats), unless the box establishes a new block formatting context (in which case the box itself may become narrower due to the floats).\n\n上面这段话是W3C官方在CSS2.1规范里对“块级格式化上下文”（BFC, Block formmating contexts）的[定义](https://www.w3.org/TR/CSS21/visuren.html#block-formatting)。渣翻译如下：\n\n> 有一些元素会为它的内容建立一个新的块级格式化上下文。这些元素包括：浮动元素，绝对定位的元素，非块级元素（比如 `inline-blocks`, `table-cells`, 和 `table-captions`等），`overflow`属性值只要不是`visible`的块级元素。\n\n> 在一个BFC中，盒子从父元素的顶部开始一个接一个垂直排列。兄弟盒子之间垂直方向的距离由`margin`属性的值决定。在同一个BFC中，毗邻的块级盒子之间垂直方向的`margin`会合并。\n\n> 在一个BFC中，每个盒子的左边沿和父元素的左边沿紧贴（对于从右到左的格式化，右边沿紧贴）。即使盒子是浮动的（float），情况也是如此（尽管一个盒的行盒可能会因为浮动收缩），除非盒子自己产生了一个新的BFC（这种情况下盒子本身会因为其它浮动的元素而变窄）。\n\n\n好了，我现在来做阅读理解（敲黑板）：\n\nBFC的规范总共有3段，第1段说粗了BFC产生的条件，第2、3两端主要解释了BFC内部盒子的排列行为。\n\n## 产生条件\n\n1. 根元素（html）\n2. float不为`none`\n3. position为`absolute`或`fixed`\n4. display为`inline-block`、`table-cell`或`table-caption`等\n5. display为`block` && overflow不为`visible`\n\n## BFC内部 盒子的布局行为\n\n1. 盒子从父元素的顶部开始一个接一个垂直排列\n2. 兄弟盒子之间垂直方向的距离由`margin`属性的值决定，毗邻的块级盒子之间垂直方向的`margin`会合并\n3. 每个盒子的左边沿和父元素的左边沿紧贴（对于从右到左的格式化，右边沿紧贴），浮动的盒子也是如此\n4. 如果一个BFC（命名为BFC-papa）内部的盒子自己产生了一个新的BFC（命名为BFC-chili），且它的前面正好有一个`float: left`的元素A，和一个`float: right`的元素B，那么BFC-chili的左边沿和A元素的右边沿紧贴，和B元素的左边沿紧贴\n5. BFC计算高度时会包含其中的浮动元素\n\n上面的前3点是标准中写的很明白的，第4点是我根据：\n\n> unless the box establishes a new block formatting context (in which case the box itself may become narrower due to the floats)\n\n这句话经过实验总结出来的，有可能会有问题，关键点是`due to the floats`这句话写的太笼统了，如何**due**?!\n\n第5点是参考别人的博客和实验所得，也就是说触发父元素的BFC可以清除浮动~\n\n## BFC的作用\n\n### 清除浮动\n\n**问：为什么要清除浮动？**\n\n*答：当普通流中的子元素`float`值不为`none`，该子元素不会将父元素高度“撑开”，导致父元素的高度坍塌，而这在很多情况下不是我们希望的*\n\n例如：\n\n```html\n<div class=\"box\">\n  <div class=\"fl\"></div>\n  <div class=\"fl\"></div>\n</div>\n<style>\n.box {\n  border: 4px solid black;\n}\n.fl {\n  width: 100px;\n  height: 100px;\n  background-color: blue;\n  border-right: 4px solid red;\n  float: left;\n}\n</style>\n```\n效果如下图：\n\n![bfc_clear](../assets/images/posts/bfc/bfc-clearfix.png)\n\n此时，触发父元素的BFC，由于上述行为5：BFC计算高度时会包含其中的浮动元素，父元素的高度会包含两个浮动的子元素，高度即被“撑开”了，代码如下：\n\n```html\n<div class=\"box\">\n  <div class=\"fl\"></div>\n  <div class=\"fl\"></div>\n</div>\n<style>\n.box {\n  border: 4px solid black;\n  overflow: hidden; /*触发BFC*/\n}\n.fl {\n  width: 100px;\n  height: 100px;\n  background-color: blue;\n  border-right: 4px solid red;\n  float: left;\n}\n</style>\n```\n\n效果如下图：\n\n![bfc_clear_1](../assets/images/posts/bfc/bfc-clearfix-1.png)\n\n### 左右定宽，中间自适应布局\n\n下面这段代码：\n\n```html\n<div class=\"left float-box\"></div>\n<div class=\"right float-box\"></div>\n<div class=\"mid\"></div>\n<style>\n.float-box {\n  width: 100px;\n  height: 100px;\n}\n.left {\n  background-color: red;\n  float: left;\n}\n.right {\n  background-color: green;\n  float: right;\n}\n.mid {\n  height: 120px;\n  background-color: blue;\n}\n</style>\n```\n\n根据行为3，会产生以下效果：\n\n![bfc_default_layout](../assets/images/posts/bfc/bfc-default-layout.png)\n\n如果触发中间box的BFC，比如做以下设置：\n\n```html\n.mid {\n  height: 120px;\n  background-color: blue;\n  overflow: hidden;\n}\n```\n\n根据行为4，会产生以下效果：\n\n![bfc_fluid_layout](../assets/images/posts/bfc/bfc-fluid-layout.png)\n\n### 解决外边距折叠\n\n> 同一个BFC中，毗邻的块级盒子之间垂直方向的`margin`会合并\n\n例如以下代码：\n\n```html\n<div class=\"box\"></div>\n<div class=\"box\"></div>\n<style>\n.box {\n  height: 100px;\n  margin: 100px 0;\n  background-color: cyan;\n}\n</style>\n```\n\n产生了如下效果：\n\n![margin_collapse](../assets/images/posts/bfc/margin-collapse.png)\n\n此时，如果把其中一个`.box`用一个BFC包裹起来，或者干脆把两个`.box`分别用BFC包裹起来，则可避免外边距折叠，代码如下：\n\n```html\n<div class=\"box\"></div>\n<div class=\"wrapper\">\n  <div class=\"box\"></div>\n</div>\n<style>\n.wrapper {\n  overflow: hidden;/*触发BFC*/\n}\n.box {\n  height: 100px;\n  margin: 100px 0;\n  background-color: cyan;\n}\n</style>\n```\n\n效果如下：\n\n![margin_collapse](../assets/images/posts/bfc/margin-not-collapse.png)\n\n\n## 总结\n\n> BFC就是页面上一个独立容器，其中的子元素的布局不会影响到其外部元素，外部元素的布局也不会影响到BFC内部的元素\n\n- 当BFC中的元素存在浮动时，为了不影响BFC外部元素的布局，BFC计算高度时会把浮动子元素的高度计算在内\n- 当BFC外部兄弟元素存在浮动时，为了不影响BFC内部元素的布局，BFC会通过变窄而不与浮动元素重叠\n- 当BFC内部元素的第一个或最后一个块级元素存在上下`margin`时，BFC的边沿会正确与子元素产生相应的距离，而避免子元素与外部元素产生外边距折叠\n\n\n参考文章：\n\n- [http://www.cnblogs.com/lhb25/p/inside-block-formatting-ontext.html](http://www.cnblogs.com/lhb25/p/inside-block-formatting-ontext.html)\n- [https://www.w3.org/TR/CSS21/visuren.html#block-formatting](https://www.w3.org/TR/CSS21/visuren.html#block-formatting)\n\n**END**","source":"_posts/bfc.md","raw":"---\ntitle: CSS Block Formatting Context(BFC)详解\ndate: 2016-11-21 14:00\ntags:\n- tech\n---\n\n> Floats, absolutely positioned elements, block containers (such as inline-blocks, table-cells, and table-captions) that are not block boxes, and block boxes with 'overflow' other than 'visible' (except when that value has been propagated to the viewport) establish new block formatting contexts for their contents.\n\n> In a block formatting context, boxes are laid out one after the other, vertically, beginning at the top of a containing block. The vertical distance between two sibling boxes is determined by the 'margin' properties. Vertical margins between adjacent block-level boxes in a block formatting context collapse.\n\n> In a block formatting context, each box's left outer edge touches the left edge of the containing block (for right-to-left formatting, right edges touch). This is true even in the presence of floats (although a box's line boxes may shrink due to the floats), unless the box establishes a new block formatting context (in which case the box itself may become narrower due to the floats).\n\n上面这段话是W3C官方在CSS2.1规范里对“块级格式化上下文”（BFC, Block formmating contexts）的[定义](https://www.w3.org/TR/CSS21/visuren.html#block-formatting)。渣翻译如下：\n\n> 有一些元素会为它的内容建立一个新的块级格式化上下文。这些元素包括：浮动元素，绝对定位的元素，非块级元素（比如 `inline-blocks`, `table-cells`, 和 `table-captions`等），`overflow`属性值只要不是`visible`的块级元素。\n\n> 在一个BFC中，盒子从父元素的顶部开始一个接一个垂直排列。兄弟盒子之间垂直方向的距离由`margin`属性的值决定。在同一个BFC中，毗邻的块级盒子之间垂直方向的`margin`会合并。\n\n> 在一个BFC中，每个盒子的左边沿和父元素的左边沿紧贴（对于从右到左的格式化，右边沿紧贴）。即使盒子是浮动的（float），情况也是如此（尽管一个盒的行盒可能会因为浮动收缩），除非盒子自己产生了一个新的BFC（这种情况下盒子本身会因为其它浮动的元素而变窄）。\n\n\n好了，我现在来做阅读理解（敲黑板）：\n\nBFC的规范总共有3段，第1段说粗了BFC产生的条件，第2、3两端主要解释了BFC内部盒子的排列行为。\n\n## 产生条件\n\n1. 根元素（html）\n2. float不为`none`\n3. position为`absolute`或`fixed`\n4. display为`inline-block`、`table-cell`或`table-caption`等\n5. display为`block` && overflow不为`visible`\n\n## BFC内部 盒子的布局行为\n\n1. 盒子从父元素的顶部开始一个接一个垂直排列\n2. 兄弟盒子之间垂直方向的距离由`margin`属性的值决定，毗邻的块级盒子之间垂直方向的`margin`会合并\n3. 每个盒子的左边沿和父元素的左边沿紧贴（对于从右到左的格式化，右边沿紧贴），浮动的盒子也是如此\n4. 如果一个BFC（命名为BFC-papa）内部的盒子自己产生了一个新的BFC（命名为BFC-chili），且它的前面正好有一个`float: left`的元素A，和一个`float: right`的元素B，那么BFC-chili的左边沿和A元素的右边沿紧贴，和B元素的左边沿紧贴\n5. BFC计算高度时会包含其中的浮动元素\n\n上面的前3点是标准中写的很明白的，第4点是我根据：\n\n> unless the box establishes a new block formatting context (in which case the box itself may become narrower due to the floats)\n\n这句话经过实验总结出来的，有可能会有问题，关键点是`due to the floats`这句话写的太笼统了，如何**due**?!\n\n第5点是参考别人的博客和实验所得，也就是说触发父元素的BFC可以清除浮动~\n\n## BFC的作用\n\n### 清除浮动\n\n**问：为什么要清除浮动？**\n\n*答：当普通流中的子元素`float`值不为`none`，该子元素不会将父元素高度“撑开”，导致父元素的高度坍塌，而这在很多情况下不是我们希望的*\n\n例如：\n\n```html\n<div class=\"box\">\n  <div class=\"fl\"></div>\n  <div class=\"fl\"></div>\n</div>\n<style>\n.box {\n  border: 4px solid black;\n}\n.fl {\n  width: 100px;\n  height: 100px;\n  background-color: blue;\n  border-right: 4px solid red;\n  float: left;\n}\n</style>\n```\n效果如下图：\n\n![bfc_clear](../assets/images/posts/bfc/bfc-clearfix.png)\n\n此时，触发父元素的BFC，由于上述行为5：BFC计算高度时会包含其中的浮动元素，父元素的高度会包含两个浮动的子元素，高度即被“撑开”了，代码如下：\n\n```html\n<div class=\"box\">\n  <div class=\"fl\"></div>\n  <div class=\"fl\"></div>\n</div>\n<style>\n.box {\n  border: 4px solid black;\n  overflow: hidden; /*触发BFC*/\n}\n.fl {\n  width: 100px;\n  height: 100px;\n  background-color: blue;\n  border-right: 4px solid red;\n  float: left;\n}\n</style>\n```\n\n效果如下图：\n\n![bfc_clear_1](../assets/images/posts/bfc/bfc-clearfix-1.png)\n\n### 左右定宽，中间自适应布局\n\n下面这段代码：\n\n```html\n<div class=\"left float-box\"></div>\n<div class=\"right float-box\"></div>\n<div class=\"mid\"></div>\n<style>\n.float-box {\n  width: 100px;\n  height: 100px;\n}\n.left {\n  background-color: red;\n  float: left;\n}\n.right {\n  background-color: green;\n  float: right;\n}\n.mid {\n  height: 120px;\n  background-color: blue;\n}\n</style>\n```\n\n根据行为3，会产生以下效果：\n\n![bfc_default_layout](../assets/images/posts/bfc/bfc-default-layout.png)\n\n如果触发中间box的BFC，比如做以下设置：\n\n```html\n.mid {\n  height: 120px;\n  background-color: blue;\n  overflow: hidden;\n}\n```\n\n根据行为4，会产生以下效果：\n\n![bfc_fluid_layout](../assets/images/posts/bfc/bfc-fluid-layout.png)\n\n### 解决外边距折叠\n\n> 同一个BFC中，毗邻的块级盒子之间垂直方向的`margin`会合并\n\n例如以下代码：\n\n```html\n<div class=\"box\"></div>\n<div class=\"box\"></div>\n<style>\n.box {\n  height: 100px;\n  margin: 100px 0;\n  background-color: cyan;\n}\n</style>\n```\n\n产生了如下效果：\n\n![margin_collapse](../assets/images/posts/bfc/margin-collapse.png)\n\n此时，如果把其中一个`.box`用一个BFC包裹起来，或者干脆把两个`.box`分别用BFC包裹起来，则可避免外边距折叠，代码如下：\n\n```html\n<div class=\"box\"></div>\n<div class=\"wrapper\">\n  <div class=\"box\"></div>\n</div>\n<style>\n.wrapper {\n  overflow: hidden;/*触发BFC*/\n}\n.box {\n  height: 100px;\n  margin: 100px 0;\n  background-color: cyan;\n}\n</style>\n```\n\n效果如下：\n\n![margin_collapse](../assets/images/posts/bfc/margin-not-collapse.png)\n\n\n## 总结\n\n> BFC就是页面上一个独立容器，其中的子元素的布局不会影响到其外部元素，外部元素的布局也不会影响到BFC内部的元素\n\n- 当BFC中的元素存在浮动时，为了不影响BFC外部元素的布局，BFC计算高度时会把浮动子元素的高度计算在内\n- 当BFC外部兄弟元素存在浮动时，为了不影响BFC内部元素的布局，BFC会通过变窄而不与浮动元素重叠\n- 当BFC内部元素的第一个或最后一个块级元素存在上下`margin`时，BFC的边沿会正确与子元素产生相应的距离，而避免子元素与外部元素产生外边距折叠\n\n\n参考文章：\n\n- [http://www.cnblogs.com/lhb25/p/inside-block-formatting-ontext.html](http://www.cnblogs.com/lhb25/p/inside-block-formatting-ontext.html)\n- [https://www.w3.org/TR/CSS21/visuren.html#block-formatting](https://www.w3.org/TR/CSS21/visuren.html#block-formatting)\n\n**END**","slug":"bfc","published":1,"updated":"2024-10-22T07:00:47.599Z","_id":"cm2k3jn3y001mi80409it7mdw","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>Floats, absolutely positioned elements, block containers (such as inline-blocks, table-cells, and table-captions) that are not block boxes, and block boxes with ‘overflow’ other than ‘visible’ (except when that value has been propagated to the viewport) establish new block formatting contexts for their contents.</p>\n</blockquote>\n<blockquote>\n<p>In a block formatting context, boxes are laid out one after the other, vertically, beginning at the top of a containing block. The vertical distance between two sibling boxes is determined by the ‘margin’ properties. Vertical margins between adjacent block-level boxes in a block formatting context collapse.</p>\n</blockquote>\n<blockquote>\n<p>In a block formatting context, each box’s left outer edge touches the left edge of the containing block (for right-to-left formatting, right edges touch). This is true even in the presence of floats (although a box’s line boxes may shrink due to the floats), unless the box establishes a new block formatting context (in which case the box itself may become narrower due to the floats).</p>\n</blockquote>\n<p>上面这段话是W3C官方在CSS2.1规范里对“块级格式化上下文”（BFC, Block formmating contexts）的<a href=\"https://www.w3.org/TR/CSS21/visuren.html#block-formatting\">定义</a>。渣翻译如下：</p>\n<blockquote>\n<p>有一些元素会为它的内容建立一个新的块级格式化上下文。这些元素包括：浮动元素，绝对定位的元素，非块级元素（比如 <code>inline-blocks</code>, <code>table-cells</code>, 和 <code>table-captions</code>等），<code>overflow</code>属性值只要不是<code>visible</code>的块级元素。</p>\n</blockquote>\n<blockquote>\n<p>在一个BFC中，盒子从父元素的顶部开始一个接一个垂直排列。兄弟盒子之间垂直方向的距离由<code>margin</code>属性的值决定。在同一个BFC中，毗邻的块级盒子之间垂直方向的<code>margin</code>会合并。</p>\n</blockquote>\n<blockquote>\n<p>在一个BFC中，每个盒子的左边沿和父元素的左边沿紧贴（对于从右到左的格式化，右边沿紧贴）。即使盒子是浮动的（float），情况也是如此（尽管一个盒的行盒可能会因为浮动收缩），除非盒子自己产生了一个新的BFC（这种情况下盒子本身会因为其它浮动的元素而变窄）。</p>\n</blockquote>\n<p>好了，我现在来做阅读理解（敲黑板）：</p>\n<p>BFC的规范总共有3段，第1段说粗了BFC产生的条件，第2、3两端主要解释了BFC内部盒子的排列行为。</p>\n<h2 id=\"产生条件\"><a class=\"markdownIt-Anchor\" href=\"#产生条件\"></a> 产生条件</h2>\n<ol>\n<li>根元素（html）</li>\n<li>float不为<code>none</code></li>\n<li>position为<code>absolute</code>或<code>fixed</code></li>\n<li>display为<code>inline-block</code>、<code>table-cell</code>或<code>table-caption</code>等</li>\n<li>display为<code>block</code> &amp;&amp; overflow不为<code>visible</code></li>\n</ol>\n<h2 id=\"bfc内部-盒子的布局行为\"><a class=\"markdownIt-Anchor\" href=\"#bfc内部-盒子的布局行为\"></a> BFC内部 盒子的布局行为</h2>\n<ol>\n<li>盒子从父元素的顶部开始一个接一个垂直排列</li>\n<li>兄弟盒子之间垂直方向的距离由<code>margin</code>属性的值决定，毗邻的块级盒子之间垂直方向的<code>margin</code>会合并</li>\n<li>每个盒子的左边沿和父元素的左边沿紧贴（对于从右到左的格式化，右边沿紧贴），浮动的盒子也是如此</li>\n<li>如果一个BFC（命名为BFC-papa）内部的盒子自己产生了一个新的BFC（命名为BFC-chili），且它的前面正好有一个<code>float: left</code>的元素A，和一个<code>float: right</code>的元素B，那么BFC-chili的左边沿和A元素的右边沿紧贴，和B元素的左边沿紧贴</li>\n<li>BFC计算高度时会包含其中的浮动元素</li>\n</ol>\n<p>上面的前3点是标准中写的很明白的，第4点是我根据：</p>\n<blockquote>\n<p>unless the box establishes a new block formatting context (in which case the box itself may become narrower due to the floats)</p>\n</blockquote>\n<p>这句话经过实验总结出来的，有可能会有问题，关键点是<code>due to the floats</code>这句话写的太笼统了，如何<strong>due</strong>?!</p>\n<p>第5点是参考别人的博客和实验所得，也就是说触发父元素的BFC可以清除浮动~</p>\n<h2 id=\"bfc的作用\"><a class=\"markdownIt-Anchor\" href=\"#bfc的作用\"></a> BFC的作用</h2>\n<h3 id=\"清除浮动\"><a class=\"markdownIt-Anchor\" href=\"#清除浮动\"></a> 清除浮动</h3>\n<p><strong>问：为什么要清除浮动？</strong></p>\n<p><em>答：当普通流中的子元素<code>float</code>值不为<code>none</code>，该子元素不会将父元素高度“撑开”，导致父元素的高度坍塌，而这在很多情况下不是我们希望的</em></p>\n<p>例如：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>box<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>fl<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>fl<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n<span class=\"token selector\">.box</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> 4px solid black<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token selector\">.fl</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> blue<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border-right</span><span class=\"token punctuation\">:</span> 4px solid red<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">float</span><span class=\"token punctuation\">:</span> left<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>效果如下图：</p>\n<p><img src=\"../assets/images/posts/bfc/bfc-clearfix.png\" alt=\"bfc_clear\" /></p>\n<p>此时，触发父元素的BFC，由于上述行为5：BFC计算高度时会包含其中的浮动元素，父元素的高度会包含两个浮动的子元素，高度即被“撑开”了，代码如下：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>box<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>fl<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>fl<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n<span class=\"token selector\">.box</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> 4px solid black<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">overflow</span><span class=\"token punctuation\">:</span> hidden<span class=\"token punctuation\">;</span> <span class=\"token comment\">/*触发BFC*/</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token selector\">.fl</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> blue<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border-right</span><span class=\"token punctuation\">:</span> 4px solid red<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">float</span><span class=\"token punctuation\">:</span> left<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>效果如下图：</p>\n<p><img src=\"../assets/images/posts/bfc/bfc-clearfix-1.png\" alt=\"bfc_clear_1\" /></p>\n<h3 id=\"左右定宽中间自适应布局\"><a class=\"markdownIt-Anchor\" href=\"#左右定宽中间自适应布局\"></a> 左右定宽，中间自适应布局</h3>\n<p>下面这段代码：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>left float-box<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>right float-box<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>mid<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n<span class=\"token selector\">.float-box</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token selector\">.left</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">float</span><span class=\"token punctuation\">:</span> left<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token selector\">.right</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> green<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">float</span><span class=\"token punctuation\">:</span> right<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token selector\">.mid</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 120px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> blue<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>根据行为3，会产生以下效果：</p>\n<p><img src=\"../assets/images/posts/bfc/bfc-default-layout.png\" alt=\"bfc_default_layout\" /></p>\n<p>如果触发中间box的BFC，比如做以下设置：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">.mid &#123;\n  height: 120px;\n  background-color: blue;\n  overflow: hidden;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>根据行为4，会产生以下效果：</p>\n<p><img src=\"../assets/images/posts/bfc/bfc-fluid-layout.png\" alt=\"bfc_fluid_layout\" /></p>\n<h3 id=\"解决外边距折叠\"><a class=\"markdownIt-Anchor\" href=\"#解决外边距折叠\"></a> 解决外边距折叠</h3>\n<blockquote>\n<p>同一个BFC中，毗邻的块级盒子之间垂直方向的<code>margin</code>会合并</p>\n</blockquote>\n<p>例如以下代码：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>box<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>box<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n<span class=\"token selector\">.box</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 100px 0<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> cyan<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>产生了如下效果：</p>\n<p><img src=\"../assets/images/posts/bfc/margin-collapse.png\" alt=\"margin_collapse\" /></p>\n<p>此时，如果把其中一个<code>.box</code>用一个BFC包裹起来，或者干脆把两个<code>.box</code>分别用BFC包裹起来，则可避免外边距折叠，代码如下：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>box<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>wrapper<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>box<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n<span class=\"token selector\">.wrapper</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">overflow</span><span class=\"token punctuation\">:</span> hidden<span class=\"token punctuation\">;</span><span class=\"token comment\">/*触发BFC*/</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token selector\">.box</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 100px 0<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> cyan<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>效果如下：</p>\n<p><img src=\"../assets/images/posts/bfc/margin-not-collapse.png\" alt=\"margin_collapse\" /></p>\n<h2 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\"></a> 总结</h2>\n<blockquote>\n<p>BFC就是页面上一个独立容器，其中的子元素的布局不会影响到其外部元素，外部元素的布局也不会影响到BFC内部的元素</p>\n</blockquote>\n<ul>\n<li>当BFC中的元素存在浮动时，为了不影响BFC外部元素的布局，BFC计算高度时会把浮动子元素的高度计算在内</li>\n<li>当BFC外部兄弟元素存在浮动时，为了不影响BFC内部元素的布局，BFC会通过变窄而不与浮动元素重叠</li>\n<li>当BFC内部元素的第一个或最后一个块级元素存在上下<code>margin</code>时，BFC的边沿会正确与子元素产生相应的距离，而避免子元素与外部元素产生外边距折叠</li>\n</ul>\n<p>参考文章：</p>\n<ul>\n<li><a href=\"http://www.cnblogs.com/lhb25/p/inside-block-formatting-ontext.html\">http://www.cnblogs.com/lhb25/p/inside-block-formatting-ontext.html</a></li>\n<li><a href=\"https://www.w3.org/TR/CSS21/visuren.html#block-formatting\">https://www.w3.org/TR/CSS21/visuren.html#block-formatting</a></li>\n</ul>\n<p><strong>END</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>Floats, absolutely positioned elements, block containers (such as inline-blocks, table-cells, and table-captions) that are not block boxes, and block boxes with ‘overflow’ other than ‘visible’ (except when that value has been propagated to the viewport) establish new block formatting contexts for their contents.</p>\n</blockquote>\n<blockquote>\n<p>In a block formatting context, boxes are laid out one after the other, vertically, beginning at the top of a containing block. The vertical distance between two sibling boxes is determined by the ‘margin’ properties. Vertical margins between adjacent block-level boxes in a block formatting context collapse.</p>\n</blockquote>\n<blockquote>\n<p>In a block formatting context, each box’s left outer edge touches the left edge of the containing block (for right-to-left formatting, right edges touch). This is true even in the presence of floats (although a box’s line boxes may shrink due to the floats), unless the box establishes a new block formatting context (in which case the box itself may become narrower due to the floats).</p>\n</blockquote>\n<p>上面这段话是W3C官方在CSS2.1规范里对“块级格式化上下文”（BFC, Block formmating contexts）的<a href=\"https://www.w3.org/TR/CSS21/visuren.html#block-formatting\">定义</a>。渣翻译如下：</p>\n<blockquote>\n<p>有一些元素会为它的内容建立一个新的块级格式化上下文。这些元素包括：浮动元素，绝对定位的元素，非块级元素（比如 <code>inline-blocks</code>, <code>table-cells</code>, 和 <code>table-captions</code>等），<code>overflow</code>属性值只要不是<code>visible</code>的块级元素。</p>\n</blockquote>\n<blockquote>\n<p>在一个BFC中，盒子从父元素的顶部开始一个接一个垂直排列。兄弟盒子之间垂直方向的距离由<code>margin</code>属性的值决定。在同一个BFC中，毗邻的块级盒子之间垂直方向的<code>margin</code>会合并。</p>\n</blockquote>\n<blockquote>\n<p>在一个BFC中，每个盒子的左边沿和父元素的左边沿紧贴（对于从右到左的格式化，右边沿紧贴）。即使盒子是浮动的（float），情况也是如此（尽管一个盒的行盒可能会因为浮动收缩），除非盒子自己产生了一个新的BFC（这种情况下盒子本身会因为其它浮动的元素而变窄）。</p>\n</blockquote>\n<p>好了，我现在来做阅读理解（敲黑板）：</p>\n<p>BFC的规范总共有3段，第1段说粗了BFC产生的条件，第2、3两端主要解释了BFC内部盒子的排列行为。</p>\n<h2 id=\"产生条件\"><a class=\"markdownIt-Anchor\" href=\"#产生条件\"></a> 产生条件</h2>\n<ol>\n<li>根元素（html）</li>\n<li>float不为<code>none</code></li>\n<li>position为<code>absolute</code>或<code>fixed</code></li>\n<li>display为<code>inline-block</code>、<code>table-cell</code>或<code>table-caption</code>等</li>\n<li>display为<code>block</code> &amp;&amp; overflow不为<code>visible</code></li>\n</ol>\n<h2 id=\"bfc内部-盒子的布局行为\"><a class=\"markdownIt-Anchor\" href=\"#bfc内部-盒子的布局行为\"></a> BFC内部 盒子的布局行为</h2>\n<ol>\n<li>盒子从父元素的顶部开始一个接一个垂直排列</li>\n<li>兄弟盒子之间垂直方向的距离由<code>margin</code>属性的值决定，毗邻的块级盒子之间垂直方向的<code>margin</code>会合并</li>\n<li>每个盒子的左边沿和父元素的左边沿紧贴（对于从右到左的格式化，右边沿紧贴），浮动的盒子也是如此</li>\n<li>如果一个BFC（命名为BFC-papa）内部的盒子自己产生了一个新的BFC（命名为BFC-chili），且它的前面正好有一个<code>float: left</code>的元素A，和一个<code>float: right</code>的元素B，那么BFC-chili的左边沿和A元素的右边沿紧贴，和B元素的左边沿紧贴</li>\n<li>BFC计算高度时会包含其中的浮动元素</li>\n</ol>\n<p>上面的前3点是标准中写的很明白的，第4点是我根据：</p>\n<blockquote>\n<p>unless the box establishes a new block formatting context (in which case the box itself may become narrower due to the floats)</p>\n</blockquote>\n<p>这句话经过实验总结出来的，有可能会有问题，关键点是<code>due to the floats</code>这句话写的太笼统了，如何<strong>due</strong>?!</p>\n<p>第5点是参考别人的博客和实验所得，也就是说触发父元素的BFC可以清除浮动~</p>\n<h2 id=\"bfc的作用\"><a class=\"markdownIt-Anchor\" href=\"#bfc的作用\"></a> BFC的作用</h2>\n<h3 id=\"清除浮动\"><a class=\"markdownIt-Anchor\" href=\"#清除浮动\"></a> 清除浮动</h3>\n<p><strong>问：为什么要清除浮动？</strong></p>\n<p><em>答：当普通流中的子元素<code>float</code>值不为<code>none</code>，该子元素不会将父元素高度“撑开”，导致父元素的高度坍塌，而这在很多情况下不是我们希望的</em></p>\n<p>例如：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>box<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>fl<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>fl<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n<span class=\"token selector\">.box</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> 4px solid black<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token selector\">.fl</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> blue<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border-right</span><span class=\"token punctuation\">:</span> 4px solid red<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">float</span><span class=\"token punctuation\">:</span> left<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>效果如下图：</p>\n<p><img src=\"../assets/images/posts/bfc/bfc-clearfix.png\" alt=\"bfc_clear\" /></p>\n<p>此时，触发父元素的BFC，由于上述行为5：BFC计算高度时会包含其中的浮动元素，父元素的高度会包含两个浮动的子元素，高度即被“撑开”了，代码如下：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>box<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>fl<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>fl<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n<span class=\"token selector\">.box</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> 4px solid black<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">overflow</span><span class=\"token punctuation\">:</span> hidden<span class=\"token punctuation\">;</span> <span class=\"token comment\">/*触发BFC*/</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token selector\">.fl</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> blue<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border-right</span><span class=\"token punctuation\">:</span> 4px solid red<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">float</span><span class=\"token punctuation\">:</span> left<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>效果如下图：</p>\n<p><img src=\"../assets/images/posts/bfc/bfc-clearfix-1.png\" alt=\"bfc_clear_1\" /></p>\n<h3 id=\"左右定宽中间自适应布局\"><a class=\"markdownIt-Anchor\" href=\"#左右定宽中间自适应布局\"></a> 左右定宽，中间自适应布局</h3>\n<p>下面这段代码：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>left float-box<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>right float-box<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>mid<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n<span class=\"token selector\">.float-box</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token selector\">.left</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">float</span><span class=\"token punctuation\">:</span> left<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token selector\">.right</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> green<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">float</span><span class=\"token punctuation\">:</span> right<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token selector\">.mid</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 120px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> blue<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>根据行为3，会产生以下效果：</p>\n<p><img src=\"../assets/images/posts/bfc/bfc-default-layout.png\" alt=\"bfc_default_layout\" /></p>\n<p>如果触发中间box的BFC，比如做以下设置：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">.mid &#123;\n  height: 120px;\n  background-color: blue;\n  overflow: hidden;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>根据行为4，会产生以下效果：</p>\n<p><img src=\"../assets/images/posts/bfc/bfc-fluid-layout.png\" alt=\"bfc_fluid_layout\" /></p>\n<h3 id=\"解决外边距折叠\"><a class=\"markdownIt-Anchor\" href=\"#解决外边距折叠\"></a> 解决外边距折叠</h3>\n<blockquote>\n<p>同一个BFC中，毗邻的块级盒子之间垂直方向的<code>margin</code>会合并</p>\n</blockquote>\n<p>例如以下代码：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>box<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>box<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n<span class=\"token selector\">.box</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 100px 0<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> cyan<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>产生了如下效果：</p>\n<p><img src=\"../assets/images/posts/bfc/margin-collapse.png\" alt=\"margin_collapse\" /></p>\n<p>此时，如果把其中一个<code>.box</code>用一个BFC包裹起来，或者干脆把两个<code>.box</code>分别用BFC包裹起来，则可避免外边距折叠，代码如下：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>box<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>wrapper<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>box<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n<span class=\"token selector\">.wrapper</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">overflow</span><span class=\"token punctuation\">:</span> hidden<span class=\"token punctuation\">;</span><span class=\"token comment\">/*触发BFC*/</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token selector\">.box</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 100px 0<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> cyan<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>效果如下：</p>\n<p><img src=\"../assets/images/posts/bfc/margin-not-collapse.png\" alt=\"margin_collapse\" /></p>\n<h2 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\"></a> 总结</h2>\n<blockquote>\n<p>BFC就是页面上一个独立容器，其中的子元素的布局不会影响到其外部元素，外部元素的布局也不会影响到BFC内部的元素</p>\n</blockquote>\n<ul>\n<li>当BFC中的元素存在浮动时，为了不影响BFC外部元素的布局，BFC计算高度时会把浮动子元素的高度计算在内</li>\n<li>当BFC外部兄弟元素存在浮动时，为了不影响BFC内部元素的布局，BFC会通过变窄而不与浮动元素重叠</li>\n<li>当BFC内部元素的第一个或最后一个块级元素存在上下<code>margin</code>时，BFC的边沿会正确与子元素产生相应的距离，而避免子元素与外部元素产生外边距折叠</li>\n</ul>\n<p>参考文章：</p>\n<ul>\n<li><a href=\"http://www.cnblogs.com/lhb25/p/inside-block-formatting-ontext.html\">http://www.cnblogs.com/lhb25/p/inside-block-formatting-ontext.html</a></li>\n<li><a href=\"https://www.w3.org/TR/CSS21/visuren.html#block-formatting\">https://www.w3.org/TR/CSS21/visuren.html#block-formatting</a></li>\n</ul>\n<p><strong>END</strong></p>\n"},{"title":"CSS 中的外边距折叠（margin collapse）","date":"2016-11-19T06:00:00.000Z","_content":"\n> 普通流中的两个或多个毗邻的块级元素垂直方向上的margin会折叠，实际外边距为两者margin中的较大值\n\n**注意：**这个现象并不是一个**问题**或者一个**bug**，只不过这种现象和很多人想当然的结果不一样而已。\n\n所谓“毗邻”有以下3种情况：\n\n## 1、相邻两个块级元素\n\n```html\n<style>\n  .section-a {height: 30px; background-color: black; margin-bottom: 30px;}\n  .section-b {height: 30px; background-color: grey; margin-top: 40px;}\n</style>\n<body>\n  <div class=\"section-a\"></div>\n  <div class=\"section-b\"></div>\n</body>\n```\n\n我们期待`section-a`和`section-b`直接间隔70px，但发现只隔了40px，上面元素的`margin-bottom`和下面元素的`margin-top`重叠在了一起。。。\n\n## 2、父元素的margin-top和其普通流中的第一个子元素的margin-top\n\n```html\n<style>\n  .section {margin-top: 20px; background-color: black;}\n  .sub-section {margin-top: 30px; height: 20px; background-color: grey;}\n</style>\n<body>\n  <div class=\"section\">\n    <div class=\"sub-section\"></div>\n  </div>\n</body>\n```\n我们期待父元素和上方的块级元素间隔20px，子元素和父元素的上边间隔30px。但发现，父元素和上方的块级元素间隔30px，子元素的上边缘和父元素的上边缘重合。如果`.sub-section`的`margin-top`改为10px，则父元素和上方块级元素的间隔为20px。\n\n结论：父元素和上方块级元素的间隔为`.section`和`.sub-section`的margin-top中较大的那个值，父子元素的上边缘重叠。\n\n## 3、height为auto的父元素的margin-bottom和其普通流中的最后一个子元素的margin-bottom\n\n```html\n<style>\n  .section {margin-bottom: 20px; height: auto; background-color: black;}\n  .sub-section {margin-bottom: 30px; height: 20px; background-color: grey;}\n</style>\n<body>\n  <div class=\"section\">\n    <div class=\"sub-section\"></div>\n  </div>\n  <div>after</div>\n</body>\n```\n\n我们期待父元素和下方的`<div>after</div>`间隔20px，子元素和父元素的下边间隔30px。但发现，父元素和下方的块级元素间隔30px，子元素的下边缘和父元素的下边缘重合。如果`.sub-section`的`margin-bottom`改为10px，则父元素和下方块级元素的间隔为20px。\n\n结论：父元素和下方块级元素的间隔为`.section`和`.sub-section`的margin-bottom中较大的那个值，父子元素的下边缘重叠。\n\n## 解决方案\n\n### 情况1\n\n创建一个BFC将`.section-a`或`.section-b`包起来，或者把它俩分别用一个BFC进行隔离？\n\n这是一种方案，确实能解决问题。但是这种方案岂不是杀鸡用牛刀？面试的时候倒是可以炫一炫技。。。\n\n我个人认为这种“bug”最简单也是最优的做法就是将`.section-a`的`margin-bottom`设置为`70px`，`.section-b`的`margin-top`不做设置。因为这道题需要达到的效果就是“第一块和第二块之间相隔70px”而已，何必凭空添加一个包裹元素？\n\n**注意：** 如果BFC使用不当，依然不会解决问题。比如：把`.section-a`和`.section-b`这两个元素 **本身** 变成BFC，问题就解决了吗？不会！margin依然是重叠的。错误示例如下：\n\n```html\n<style>\n  /*加了overflow:hidden之后，.section-a 和 .section-b 都成了BFC*/\n  .section-a {height: 30px; background-color: black; margin-bottom: 30px; overflow: hidden;}\n  .section-b {height: 30px; background-color: grey; margin-top: 40px; overflow:hidden;}\n</style>\n<body>\n  <div class=\"section-a\"></div>\n  <div class=\"section-b\"></div>\n</body>\n```\n\n为什么呢？因为：\n\n> 属于同一个BFC的两个相邻Box，垂直方向上的margin会发生重叠\n\n做了上面设置的`.section-a`和`.section-b`分别都成了BFC，但它们本身都属于同一个BFC，这个BFC的名字叫`html`！\n\n而如果把`.section-a`外面用一个BFC包裹（假设是`<div class=\"wrapper\"></div>`），那么`.section-a`这个Box属于`.wrapper`这个BFC，而`.section-b`这个Box属于`html`这个BFC，他们的外边距当然就不会重叠了！而这个做法正是情况2和情况3的解决方案~只不过这个做法是情况2和3中“父元素margin为0”的特殊情况。\n\n### 情况2&情况3\n\n解决方案上面已经说了，也就是说：\n\n> 创建了BFC的元素，不会和它的子元素发生margin重叠\n\n给父元素添加`overflow: hidden`即可以将父元素变成BFC。其第一个子元素如果设置了`margin-top: 30px`，那么它就会如我们所想“距离父元素上边缘30px”：\n\n```html\n<style>\n.section-a {\n  height: 30px;\n  background-color: black;\n  margin-bottom: 30px;\n}\n.wrapper {\n  overflow: hidden;/*.wrapper是一个BFC*/\n}\n.section-b {\n  height: 30px;/*.section-b距离.wrapper上边缘30px，距离.section-a下边缘60px*/\n  background-color: blue;\n  margin-top: 30px;\n}\n</style>\n<body>\n  <div class=\"section-a\"></div>\n  <div class=\"wrapper\">\n    <div class=\"section-b\"></div>\n  </div>\n</body>\n```\n\n\n在父元素`height: auto`的前提下，其最后一个子元素如果设置了`margin-bottom: 20px`，那么它也会如我们所想“距离父元素下边缘20px”：\n\n```html\n<style>\n.wrapper {\n  overflow: hidden;\n}\n.section-a {\n  height: 30px;\n  background-color: black;\n  margin-bottom: 20px;\n}\n</style>\n<body>\n  <div class=\"wrapper\">\n    <div class=\"section-a\"></div>\n  </div>\n</body>\n```\n\n**注意：给元素添加`overflow:hidden`只是将一个元素变为BFC的多种方式中的一种，本文不详细讨论BFC**\n\n**END**","source":"_posts/margin-collapse.md","raw":"---\ntitle: CSS 中的外边距折叠（margin collapse）\ndate: 2016-11-19 14:00\ntags:\n- tech\n---\n\n> 普通流中的两个或多个毗邻的块级元素垂直方向上的margin会折叠，实际外边距为两者margin中的较大值\n\n**注意：**这个现象并不是一个**问题**或者一个**bug**，只不过这种现象和很多人想当然的结果不一样而已。\n\n所谓“毗邻”有以下3种情况：\n\n## 1、相邻两个块级元素\n\n```html\n<style>\n  .section-a {height: 30px; background-color: black; margin-bottom: 30px;}\n  .section-b {height: 30px; background-color: grey; margin-top: 40px;}\n</style>\n<body>\n  <div class=\"section-a\"></div>\n  <div class=\"section-b\"></div>\n</body>\n```\n\n我们期待`section-a`和`section-b`直接间隔70px，但发现只隔了40px，上面元素的`margin-bottom`和下面元素的`margin-top`重叠在了一起。。。\n\n## 2、父元素的margin-top和其普通流中的第一个子元素的margin-top\n\n```html\n<style>\n  .section {margin-top: 20px; background-color: black;}\n  .sub-section {margin-top: 30px; height: 20px; background-color: grey;}\n</style>\n<body>\n  <div class=\"section\">\n    <div class=\"sub-section\"></div>\n  </div>\n</body>\n```\n我们期待父元素和上方的块级元素间隔20px，子元素和父元素的上边间隔30px。但发现，父元素和上方的块级元素间隔30px，子元素的上边缘和父元素的上边缘重合。如果`.sub-section`的`margin-top`改为10px，则父元素和上方块级元素的间隔为20px。\n\n结论：父元素和上方块级元素的间隔为`.section`和`.sub-section`的margin-top中较大的那个值，父子元素的上边缘重叠。\n\n## 3、height为auto的父元素的margin-bottom和其普通流中的最后一个子元素的margin-bottom\n\n```html\n<style>\n  .section {margin-bottom: 20px; height: auto; background-color: black;}\n  .sub-section {margin-bottom: 30px; height: 20px; background-color: grey;}\n</style>\n<body>\n  <div class=\"section\">\n    <div class=\"sub-section\"></div>\n  </div>\n  <div>after</div>\n</body>\n```\n\n我们期待父元素和下方的`<div>after</div>`间隔20px，子元素和父元素的下边间隔30px。但发现，父元素和下方的块级元素间隔30px，子元素的下边缘和父元素的下边缘重合。如果`.sub-section`的`margin-bottom`改为10px，则父元素和下方块级元素的间隔为20px。\n\n结论：父元素和下方块级元素的间隔为`.section`和`.sub-section`的margin-bottom中较大的那个值，父子元素的下边缘重叠。\n\n## 解决方案\n\n### 情况1\n\n创建一个BFC将`.section-a`或`.section-b`包起来，或者把它俩分别用一个BFC进行隔离？\n\n这是一种方案，确实能解决问题。但是这种方案岂不是杀鸡用牛刀？面试的时候倒是可以炫一炫技。。。\n\n我个人认为这种“bug”最简单也是最优的做法就是将`.section-a`的`margin-bottom`设置为`70px`，`.section-b`的`margin-top`不做设置。因为这道题需要达到的效果就是“第一块和第二块之间相隔70px”而已，何必凭空添加一个包裹元素？\n\n**注意：** 如果BFC使用不当，依然不会解决问题。比如：把`.section-a`和`.section-b`这两个元素 **本身** 变成BFC，问题就解决了吗？不会！margin依然是重叠的。错误示例如下：\n\n```html\n<style>\n  /*加了overflow:hidden之后，.section-a 和 .section-b 都成了BFC*/\n  .section-a {height: 30px; background-color: black; margin-bottom: 30px; overflow: hidden;}\n  .section-b {height: 30px; background-color: grey; margin-top: 40px; overflow:hidden;}\n</style>\n<body>\n  <div class=\"section-a\"></div>\n  <div class=\"section-b\"></div>\n</body>\n```\n\n为什么呢？因为：\n\n> 属于同一个BFC的两个相邻Box，垂直方向上的margin会发生重叠\n\n做了上面设置的`.section-a`和`.section-b`分别都成了BFC，但它们本身都属于同一个BFC，这个BFC的名字叫`html`！\n\n而如果把`.section-a`外面用一个BFC包裹（假设是`<div class=\"wrapper\"></div>`），那么`.section-a`这个Box属于`.wrapper`这个BFC，而`.section-b`这个Box属于`html`这个BFC，他们的外边距当然就不会重叠了！而这个做法正是情况2和情况3的解决方案~只不过这个做法是情况2和3中“父元素margin为0”的特殊情况。\n\n### 情况2&情况3\n\n解决方案上面已经说了，也就是说：\n\n> 创建了BFC的元素，不会和它的子元素发生margin重叠\n\n给父元素添加`overflow: hidden`即可以将父元素变成BFC。其第一个子元素如果设置了`margin-top: 30px`，那么它就会如我们所想“距离父元素上边缘30px”：\n\n```html\n<style>\n.section-a {\n  height: 30px;\n  background-color: black;\n  margin-bottom: 30px;\n}\n.wrapper {\n  overflow: hidden;/*.wrapper是一个BFC*/\n}\n.section-b {\n  height: 30px;/*.section-b距离.wrapper上边缘30px，距离.section-a下边缘60px*/\n  background-color: blue;\n  margin-top: 30px;\n}\n</style>\n<body>\n  <div class=\"section-a\"></div>\n  <div class=\"wrapper\">\n    <div class=\"section-b\"></div>\n  </div>\n</body>\n```\n\n\n在父元素`height: auto`的前提下，其最后一个子元素如果设置了`margin-bottom: 20px`，那么它也会如我们所想“距离父元素下边缘20px”：\n\n```html\n<style>\n.wrapper {\n  overflow: hidden;\n}\n.section-a {\n  height: 30px;\n  background-color: black;\n  margin-bottom: 20px;\n}\n</style>\n<body>\n  <div class=\"wrapper\">\n    <div class=\"section-a\"></div>\n  </div>\n</body>\n```\n\n**注意：给元素添加`overflow:hidden`只是将一个元素变为BFC的多种方式中的一种，本文不详细讨论BFC**\n\n**END**","slug":"margin-collapse","published":1,"updated":"2024-10-22T07:01:24.187Z","_id":"cm2k3kj37001pi804brc6f5c3","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>普通流中的两个或多个毗邻的块级元素垂直方向上的margin会折叠，实际外边距为两者margin中的较大值</p>\n</blockquote>\n<p><strong>注意：<strong>这个现象并不是一个</strong>问题</strong>或者一个<strong>bug</strong>，只不过这种现象和很多人想当然的结果不一样而已。</p>\n<p>所谓“毗邻”有以下3种情况：</p>\n<h2 id=\"1-相邻两个块级元素\"><a class=\"markdownIt-Anchor\" href=\"#1-相邻两个块级元素\"></a> 1、相邻两个块级元素</h2>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n  <span class=\"token selector\">.section-a</span> <span class=\"token punctuation\">&#123;</span><span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 30px<span class=\"token punctuation\">;</span> <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> black<span class=\"token punctuation\">;</span> <span class=\"token property\">margin-bottom</span><span class=\"token punctuation\">:</span> 30px<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token selector\">.section-b</span> <span class=\"token punctuation\">&#123;</span><span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 30px<span class=\"token punctuation\">;</span> <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> grey<span class=\"token punctuation\">;</span> <span class=\"token property\">margin-top</span><span class=\"token punctuation\">:</span> 40px<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>section-a<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>section-b<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>我们期待<code>section-a</code>和<code>section-b</code>直接间隔70px，但发现只隔了40px，上面元素的<code>margin-bottom</code>和下面元素的<code>margin-top</code>重叠在了一起。。。</p>\n<h2 id=\"2-父元素的margin-top和其普通流中的第一个子元素的margin-top\"><a class=\"markdownIt-Anchor\" href=\"#2-父元素的margin-top和其普通流中的第一个子元素的margin-top\"></a> 2、父元素的margin-top和其普通流中的第一个子元素的margin-top</h2>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n  <span class=\"token selector\">.section</span> <span class=\"token punctuation\">&#123;</span><span class=\"token property\">margin-top</span><span class=\"token punctuation\">:</span> 20px<span class=\"token punctuation\">;</span> <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> black<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token selector\">.sub-section</span> <span class=\"token punctuation\">&#123;</span><span class=\"token property\">margin-top</span><span class=\"token punctuation\">:</span> 30px<span class=\"token punctuation\">;</span> <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 20px<span class=\"token punctuation\">;</span> <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> grey<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>section<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sub-section<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>我们期待父元素和上方的块级元素间隔20px，子元素和父元素的上边间隔30px。但发现，父元素和上方的块级元素间隔30px，子元素的上边缘和父元素的上边缘重合。如果<code>.sub-section</code>的<code>margin-top</code>改为10px，则父元素和上方块级元素的间隔为20px。</p>\n<p>结论：父元素和上方块级元素的间隔为<code>.section</code>和<code>.sub-section</code>的margin-top中较大的那个值，父子元素的上边缘重叠。</p>\n<h2 id=\"3-height为auto的父元素的margin-bottom和其普通流中的最后一个子元素的margin-bottom\"><a class=\"markdownIt-Anchor\" href=\"#3-height为auto的父元素的margin-bottom和其普通流中的最后一个子元素的margin-bottom\"></a> 3、height为auto的父元素的margin-bottom和其普通流中的最后一个子元素的margin-bottom</h2>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n  <span class=\"token selector\">.section</span> <span class=\"token punctuation\">&#123;</span><span class=\"token property\">margin-bottom</span><span class=\"token punctuation\">:</span> 20px<span class=\"token punctuation\">;</span> <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> auto<span class=\"token punctuation\">;</span> <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> black<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token selector\">.sub-section</span> <span class=\"token punctuation\">&#123;</span><span class=\"token property\">margin-bottom</span><span class=\"token punctuation\">:</span> 30px<span class=\"token punctuation\">;</span> <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 20px<span class=\"token punctuation\">;</span> <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> grey<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>section<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sub-section<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>after<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>我们期待父元素和下方的<code>&lt;div&gt;after&lt;/div&gt;</code>间隔20px，子元素和父元素的下边间隔30px。但发现，父元素和下方的块级元素间隔30px，子元素的下边缘和父元素的下边缘重合。如果<code>.sub-section</code>的<code>margin-bottom</code>改为10px，则父元素和下方块级元素的间隔为20px。</p>\n<p>结论：父元素和下方块级元素的间隔为<code>.section</code>和<code>.sub-section</code>的margin-bottom中较大的那个值，父子元素的下边缘重叠。</p>\n<h2 id=\"解决方案\"><a class=\"markdownIt-Anchor\" href=\"#解决方案\"></a> 解决方案</h2>\n<h3 id=\"情况1\"><a class=\"markdownIt-Anchor\" href=\"#情况1\"></a> 情况1</h3>\n<p>创建一个BFC将<code>.section-a</code>或<code>.section-b</code>包起来，或者把它俩分别用一个BFC进行隔离？</p>\n<p>这是一种方案，确实能解决问题。但是这种方案岂不是杀鸡用牛刀？面试的时候倒是可以炫一炫技。。。</p>\n<p>我个人认为这种“bug”最简单也是最优的做法就是将<code>.section-a</code>的<code>margin-bottom</code>设置为<code>70px</code>，<code>.section-b</code>的<code>margin-top</code>不做设置。因为这道题需要达到的效果就是“第一块和第二块之间相隔70px”而已，何必凭空添加一个包裹元素？</p>\n<p><strong>注意：</strong> 如果BFC使用不当，依然不会解决问题。比如：把<code>.section-a</code>和<code>.section-b</code>这两个元素 <strong>本身</strong> 变成BFC，问题就解决了吗？不会！margin依然是重叠的。错误示例如下：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n  <span class=\"token comment\">/*加了overflow:hidden之后，.section-a 和 .section-b 都成了BFC*/</span>\n  <span class=\"token selector\">.section-a</span> <span class=\"token punctuation\">&#123;</span><span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 30px<span class=\"token punctuation\">;</span> <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> black<span class=\"token punctuation\">;</span> <span class=\"token property\">margin-bottom</span><span class=\"token punctuation\">:</span> 30px<span class=\"token punctuation\">;</span> <span class=\"token property\">overflow</span><span class=\"token punctuation\">:</span> hidden<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token selector\">.section-b</span> <span class=\"token punctuation\">&#123;</span><span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 30px<span class=\"token punctuation\">;</span> <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> grey<span class=\"token punctuation\">;</span> <span class=\"token property\">margin-top</span><span class=\"token punctuation\">:</span> 40px<span class=\"token punctuation\">;</span> <span class=\"token property\">overflow</span><span class=\"token punctuation\">:</span>hidden<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>section-a<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>section-b<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>为什么呢？因为：</p>\n<blockquote>\n<p>属于同一个BFC的两个相邻Box，垂直方向上的margin会发生重叠</p>\n</blockquote>\n<p>做了上面设置的<code>.section-a</code>和<code>.section-b</code>分别都成了BFC，但它们本身都属于同一个BFC，这个BFC的名字叫<code>html</code>！</p>\n<p>而如果把<code>.section-a</code>外面用一个BFC包裹（假设是<code>&lt;div class=&quot;wrapper&quot;&gt;&lt;/div&gt;</code>），那么<code>.section-a</code>这个Box属于<code>.wrapper</code>这个BFC，而<code>.section-b</code>这个Box属于<code>html</code>这个BFC，他们的外边距当然就不会重叠了！而这个做法正是情况2和情况3的解决方案~只不过这个做法是情况2和3中“父元素margin为0”的特殊情况。</p>\n<h3 id=\"情况2情况3\"><a class=\"markdownIt-Anchor\" href=\"#情况2情况3\"></a> 情况2&amp;情况3</h3>\n<p>解决方案上面已经说了，也就是说：</p>\n<blockquote>\n<p>创建了BFC的元素，不会和它的子元素发生margin重叠</p>\n</blockquote>\n<p>给父元素添加<code>overflow: hidden</code>即可以将父元素变成BFC。其第一个子元素如果设置了<code>margin-top: 30px</code>，那么它就会如我们所想“距离父元素上边缘30px”：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n<span class=\"token selector\">.section-a</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 30px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> black<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">margin-bottom</span><span class=\"token punctuation\">:</span> 30px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token selector\">.wrapper</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">overflow</span><span class=\"token punctuation\">:</span> hidden<span class=\"token punctuation\">;</span><span class=\"token comment\">/*.wrapper是一个BFC*/</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token selector\">.section-b</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 30px<span class=\"token punctuation\">;</span><span class=\"token comment\">/*.section-b距离.wrapper上边缘30px，距离.section-a下边缘60px*/</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> blue<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">margin-top</span><span class=\"token punctuation\">:</span> 30px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>section-a<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>wrapper<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>section-b<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>在父元素<code>height: auto</code>的前提下，其最后一个子元素如果设置了<code>margin-bottom: 20px</code>，那么它也会如我们所想“距离父元素下边缘20px”：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n<span class=\"token selector\">.wrapper</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">overflow</span><span class=\"token punctuation\">:</span> hidden<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token selector\">.section-a</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 30px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> black<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">margin-bottom</span><span class=\"token punctuation\">:</span> 20px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>wrapper<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>section-a<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>注意：给元素添加<code>overflow:hidden</code>只是将一个元素变为BFC的多种方式中的一种，本文不详细讨论BFC</strong></p>\n<p><strong>END</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>普通流中的两个或多个毗邻的块级元素垂直方向上的margin会折叠，实际外边距为两者margin中的较大值</p>\n</blockquote>\n<p><strong>注意：<strong>这个现象并不是一个</strong>问题</strong>或者一个<strong>bug</strong>，只不过这种现象和很多人想当然的结果不一样而已。</p>\n<p>所谓“毗邻”有以下3种情况：</p>\n<h2 id=\"1-相邻两个块级元素\"><a class=\"markdownIt-Anchor\" href=\"#1-相邻两个块级元素\"></a> 1、相邻两个块级元素</h2>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n  <span class=\"token selector\">.section-a</span> <span class=\"token punctuation\">&#123;</span><span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 30px<span class=\"token punctuation\">;</span> <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> black<span class=\"token punctuation\">;</span> <span class=\"token property\">margin-bottom</span><span class=\"token punctuation\">:</span> 30px<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token selector\">.section-b</span> <span class=\"token punctuation\">&#123;</span><span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 30px<span class=\"token punctuation\">;</span> <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> grey<span class=\"token punctuation\">;</span> <span class=\"token property\">margin-top</span><span class=\"token punctuation\">:</span> 40px<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>section-a<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>section-b<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>我们期待<code>section-a</code>和<code>section-b</code>直接间隔70px，但发现只隔了40px，上面元素的<code>margin-bottom</code>和下面元素的<code>margin-top</code>重叠在了一起。。。</p>\n<h2 id=\"2-父元素的margin-top和其普通流中的第一个子元素的margin-top\"><a class=\"markdownIt-Anchor\" href=\"#2-父元素的margin-top和其普通流中的第一个子元素的margin-top\"></a> 2、父元素的margin-top和其普通流中的第一个子元素的margin-top</h2>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n  <span class=\"token selector\">.section</span> <span class=\"token punctuation\">&#123;</span><span class=\"token property\">margin-top</span><span class=\"token punctuation\">:</span> 20px<span class=\"token punctuation\">;</span> <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> black<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token selector\">.sub-section</span> <span class=\"token punctuation\">&#123;</span><span class=\"token property\">margin-top</span><span class=\"token punctuation\">:</span> 30px<span class=\"token punctuation\">;</span> <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 20px<span class=\"token punctuation\">;</span> <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> grey<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>section<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sub-section<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>我们期待父元素和上方的块级元素间隔20px，子元素和父元素的上边间隔30px。但发现，父元素和上方的块级元素间隔30px，子元素的上边缘和父元素的上边缘重合。如果<code>.sub-section</code>的<code>margin-top</code>改为10px，则父元素和上方块级元素的间隔为20px。</p>\n<p>结论：父元素和上方块级元素的间隔为<code>.section</code>和<code>.sub-section</code>的margin-top中较大的那个值，父子元素的上边缘重叠。</p>\n<h2 id=\"3-height为auto的父元素的margin-bottom和其普通流中的最后一个子元素的margin-bottom\"><a class=\"markdownIt-Anchor\" href=\"#3-height为auto的父元素的margin-bottom和其普通流中的最后一个子元素的margin-bottom\"></a> 3、height为auto的父元素的margin-bottom和其普通流中的最后一个子元素的margin-bottom</h2>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n  <span class=\"token selector\">.section</span> <span class=\"token punctuation\">&#123;</span><span class=\"token property\">margin-bottom</span><span class=\"token punctuation\">:</span> 20px<span class=\"token punctuation\">;</span> <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> auto<span class=\"token punctuation\">;</span> <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> black<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token selector\">.sub-section</span> <span class=\"token punctuation\">&#123;</span><span class=\"token property\">margin-bottom</span><span class=\"token punctuation\">:</span> 30px<span class=\"token punctuation\">;</span> <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 20px<span class=\"token punctuation\">;</span> <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> grey<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>section<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sub-section<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>after<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>我们期待父元素和下方的<code>&lt;div&gt;after&lt;/div&gt;</code>间隔20px，子元素和父元素的下边间隔30px。但发现，父元素和下方的块级元素间隔30px，子元素的下边缘和父元素的下边缘重合。如果<code>.sub-section</code>的<code>margin-bottom</code>改为10px，则父元素和下方块级元素的间隔为20px。</p>\n<p>结论：父元素和下方块级元素的间隔为<code>.section</code>和<code>.sub-section</code>的margin-bottom中较大的那个值，父子元素的下边缘重叠。</p>\n<h2 id=\"解决方案\"><a class=\"markdownIt-Anchor\" href=\"#解决方案\"></a> 解决方案</h2>\n<h3 id=\"情况1\"><a class=\"markdownIt-Anchor\" href=\"#情况1\"></a> 情况1</h3>\n<p>创建一个BFC将<code>.section-a</code>或<code>.section-b</code>包起来，或者把它俩分别用一个BFC进行隔离？</p>\n<p>这是一种方案，确实能解决问题。但是这种方案岂不是杀鸡用牛刀？面试的时候倒是可以炫一炫技。。。</p>\n<p>我个人认为这种“bug”最简单也是最优的做法就是将<code>.section-a</code>的<code>margin-bottom</code>设置为<code>70px</code>，<code>.section-b</code>的<code>margin-top</code>不做设置。因为这道题需要达到的效果就是“第一块和第二块之间相隔70px”而已，何必凭空添加一个包裹元素？</p>\n<p><strong>注意：</strong> 如果BFC使用不当，依然不会解决问题。比如：把<code>.section-a</code>和<code>.section-b</code>这两个元素 <strong>本身</strong> 变成BFC，问题就解决了吗？不会！margin依然是重叠的。错误示例如下：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n  <span class=\"token comment\">/*加了overflow:hidden之后，.section-a 和 .section-b 都成了BFC*/</span>\n  <span class=\"token selector\">.section-a</span> <span class=\"token punctuation\">&#123;</span><span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 30px<span class=\"token punctuation\">;</span> <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> black<span class=\"token punctuation\">;</span> <span class=\"token property\">margin-bottom</span><span class=\"token punctuation\">:</span> 30px<span class=\"token punctuation\">;</span> <span class=\"token property\">overflow</span><span class=\"token punctuation\">:</span> hidden<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token selector\">.section-b</span> <span class=\"token punctuation\">&#123;</span><span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 30px<span class=\"token punctuation\">;</span> <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> grey<span class=\"token punctuation\">;</span> <span class=\"token property\">margin-top</span><span class=\"token punctuation\">:</span> 40px<span class=\"token punctuation\">;</span> <span class=\"token property\">overflow</span><span class=\"token punctuation\">:</span>hidden<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>section-a<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>section-b<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>为什么呢？因为：</p>\n<blockquote>\n<p>属于同一个BFC的两个相邻Box，垂直方向上的margin会发生重叠</p>\n</blockquote>\n<p>做了上面设置的<code>.section-a</code>和<code>.section-b</code>分别都成了BFC，但它们本身都属于同一个BFC，这个BFC的名字叫<code>html</code>！</p>\n<p>而如果把<code>.section-a</code>外面用一个BFC包裹（假设是<code>&lt;div class=&quot;wrapper&quot;&gt;&lt;/div&gt;</code>），那么<code>.section-a</code>这个Box属于<code>.wrapper</code>这个BFC，而<code>.section-b</code>这个Box属于<code>html</code>这个BFC，他们的外边距当然就不会重叠了！而这个做法正是情况2和情况3的解决方案~只不过这个做法是情况2和3中“父元素margin为0”的特殊情况。</p>\n<h3 id=\"情况2情况3\"><a class=\"markdownIt-Anchor\" href=\"#情况2情况3\"></a> 情况2&amp;情况3</h3>\n<p>解决方案上面已经说了，也就是说：</p>\n<blockquote>\n<p>创建了BFC的元素，不会和它的子元素发生margin重叠</p>\n</blockquote>\n<p>给父元素添加<code>overflow: hidden</code>即可以将父元素变成BFC。其第一个子元素如果设置了<code>margin-top: 30px</code>，那么它就会如我们所想“距离父元素上边缘30px”：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n<span class=\"token selector\">.section-a</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 30px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> black<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">margin-bottom</span><span class=\"token punctuation\">:</span> 30px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token selector\">.wrapper</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">overflow</span><span class=\"token punctuation\">:</span> hidden<span class=\"token punctuation\">;</span><span class=\"token comment\">/*.wrapper是一个BFC*/</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token selector\">.section-b</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 30px<span class=\"token punctuation\">;</span><span class=\"token comment\">/*.section-b距离.wrapper上边缘30px，距离.section-a下边缘60px*/</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> blue<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">margin-top</span><span class=\"token punctuation\">:</span> 30px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>section-a<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>wrapper<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>section-b<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>在父元素<code>height: auto</code>的前提下，其最后一个子元素如果设置了<code>margin-bottom: 20px</code>，那么它也会如我们所想“距离父元素下边缘20px”：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n<span class=\"token selector\">.wrapper</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">overflow</span><span class=\"token punctuation\">:</span> hidden<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token selector\">.section-a</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 30px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> black<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">margin-bottom</span><span class=\"token punctuation\">:</span> 20px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>wrapper<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>section-a<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>注意：给元素添加<code>overflow:hidden</code>只是将一个元素变为BFC的多种方式中的一种，本文不详细讨论BFC</strong></p>\n<p><strong>END</strong></p>\n"},{"title":"左右定宽中间自适应3栏布局","date":"2016-11-18T06:00:00.000Z","_content":"\n> 总结了4种“左右固定中间自适应的3栏布局”，强烈参考了张鑫旭的[博客](http://www.zhangxinxu.com/wordpress/2009/11/%E6%88%91%E7%86%9F%E7%9F%A5%E7%9A%84%E4%B8%89%E7%A7%8D%E4%B8%89%E6%A0%8F%E7%BD%91%E9%A1%B5%E5%AE%BD%E5%BA%A6%E8%87%AA%E9%80%82%E5%BA%94%E5%B8%83%E5%B1%80%E6%96%B9%E6%B3%95/)\n\n## 1.左侧左浮动，右侧右浮动\n\n> 左侧左浮动，右侧右浮动，中间div设置左右margin、宽度自适应，中间一栏必须放在最后\n\n```html\n<style>\n  html, body {margin: 0; padding: 0; height: 100%;}\n  .col {width: 200px; height: 100%;}\n  .left.col {float: left; background-color: #03A9F4;}\n  .right.col {float: right; background-color: #F44336;}\n  .mid {margin: 0 210px; height: 100%; background-color: #eee;}\n</style>\n\n<body>\n  <div class=\"right col\"></div>\n  <div class=\"left col\"></div>\n  <div class=\"mid\"></div>\n</body>\n```\n\n## 2.左右绝对定位\n\n> 左右绝对定位，中间栏设置左右margin，左中右三栏顺序随意排列都可以\n\n```html\n<style>\n  html, body {margin: 0; height: 100%;}\n  .col {height: 100%;}\n  .left,.right {width: 200px; position: absolute;top: 0;}\n  .left {left: 0; background-color: #03A9F4;}\n  .right {right: 0; background-color: #F44336;}\n  .mid {margin: 0 210px; background-color: #ccc;}\n</style>\n\n<body>\n  <div class=\"left col\"></div>\n  <div class=\"mid col\"></div>\n  <div class=\"right col\"></div>\n</body>\n```\n\n## 3.全部左浮动\n\n>中间部分100%宽度，左浮动；左边部分也左浮动，并且margin-left: -100%；右边部分也是左浮动，margin-left: -200px；中间部分内部包含一个“真正的中间div”，margin: 0 210px\"\n\n```html\n<style>\n  html,body {margin: 0; height: 100%;}\n  .col {height: 100%;}\n  .left, .right {float: left; width: 200px;}\n  .left {background-color: #03A9F4; margin-left: -100%;}\n  .right {background-color: #F44336; margin-left: -200px;}\n  .mid-container {width: 100%; float: left;}\n  .mid {background-color: #eee; margin: 0 210px;}\n</style>\n<body>\n  <div class=\"mid-container col\">\n    <div class=\"mid col\"></div>\n  </div>\n  <div class=\"left col\"></div>\n  <div class=\"right col\"></div>\n</body>\n```\n\n## 4.左侧左浮动，右侧绝对定位\n\n> 方案1和2的结合，能保证DOM结构的顺序是左中右的，并且尽可能少用绝对定位\n\n```html\n<style>\n  html, body {margin: 0; padding: 0; height: 100%;}\n  .col {height: 100%;}\n  .left {width: 200px; float: left; background-color: #03A9F4;}\n  .mid {margin: 0 210px; background-color: #eee;}\n  .right {width: 200px; position: absolute; top: 0; right: 0; background-color: #F44336;}\n</style>\n<body>\n  <div class=\"left col\"></div>\n  <div class=\"mid col\"></div>\n  <div class=\"right col\"></div>\n</body>\n```\n\n## 5.左侧左浮动，右侧右浮动，中间元素触发[BFC](/frontend/2016/11/21/bfc.html)\n\n> 中间元素设置 `overflow: hidden` 触发[BFC](/frontend/2016/11/21/bfc.html)，但是溢出元素将不可见\n\n```html\n<style>\n  html, body {margin: 0; padding: 0; height: 100%;}\n  .col {width: 200px; height: 100%;}\n  .left.col {float: left; background-color: #03A9F4; margin-right: 10px;}\n  .right.col {float: right; background-color: #F44336; margin-left: 10px;}\n  .mid {height: 100%; background-color: #eee; overflow: hidden;}\n</style>\n<body>\n  <div class=\"right col\"></div>\n  <div class=\"left col\"></div>\n  <div class=\"mid\"></div>\n</body>\n```\n\n**END**","source":"_posts/3-col-layout.md","raw":"---\ntitle: 左右定宽中间自适应3栏布局\ndate: 2016-11-18 14:00\ntags:\n- tech\n---\n\n> 总结了4种“左右固定中间自适应的3栏布局”，强烈参考了张鑫旭的[博客](http://www.zhangxinxu.com/wordpress/2009/11/%E6%88%91%E7%86%9F%E7%9F%A5%E7%9A%84%E4%B8%89%E7%A7%8D%E4%B8%89%E6%A0%8F%E7%BD%91%E9%A1%B5%E5%AE%BD%E5%BA%A6%E8%87%AA%E9%80%82%E5%BA%94%E5%B8%83%E5%B1%80%E6%96%B9%E6%B3%95/)\n\n## 1.左侧左浮动，右侧右浮动\n\n> 左侧左浮动，右侧右浮动，中间div设置左右margin、宽度自适应，中间一栏必须放在最后\n\n```html\n<style>\n  html, body {margin: 0; padding: 0; height: 100%;}\n  .col {width: 200px; height: 100%;}\n  .left.col {float: left; background-color: #03A9F4;}\n  .right.col {float: right; background-color: #F44336;}\n  .mid {margin: 0 210px; height: 100%; background-color: #eee;}\n</style>\n\n<body>\n  <div class=\"right col\"></div>\n  <div class=\"left col\"></div>\n  <div class=\"mid\"></div>\n</body>\n```\n\n## 2.左右绝对定位\n\n> 左右绝对定位，中间栏设置左右margin，左中右三栏顺序随意排列都可以\n\n```html\n<style>\n  html, body {margin: 0; height: 100%;}\n  .col {height: 100%;}\n  .left,.right {width: 200px; position: absolute;top: 0;}\n  .left {left: 0; background-color: #03A9F4;}\n  .right {right: 0; background-color: #F44336;}\n  .mid {margin: 0 210px; background-color: #ccc;}\n</style>\n\n<body>\n  <div class=\"left col\"></div>\n  <div class=\"mid col\"></div>\n  <div class=\"right col\"></div>\n</body>\n```\n\n## 3.全部左浮动\n\n>中间部分100%宽度，左浮动；左边部分也左浮动，并且margin-left: -100%；右边部分也是左浮动，margin-left: -200px；中间部分内部包含一个“真正的中间div”，margin: 0 210px\"\n\n```html\n<style>\n  html,body {margin: 0; height: 100%;}\n  .col {height: 100%;}\n  .left, .right {float: left; width: 200px;}\n  .left {background-color: #03A9F4; margin-left: -100%;}\n  .right {background-color: #F44336; margin-left: -200px;}\n  .mid-container {width: 100%; float: left;}\n  .mid {background-color: #eee; margin: 0 210px;}\n</style>\n<body>\n  <div class=\"mid-container col\">\n    <div class=\"mid col\"></div>\n  </div>\n  <div class=\"left col\"></div>\n  <div class=\"right col\"></div>\n</body>\n```\n\n## 4.左侧左浮动，右侧绝对定位\n\n> 方案1和2的结合，能保证DOM结构的顺序是左中右的，并且尽可能少用绝对定位\n\n```html\n<style>\n  html, body {margin: 0; padding: 0; height: 100%;}\n  .col {height: 100%;}\n  .left {width: 200px; float: left; background-color: #03A9F4;}\n  .mid {margin: 0 210px; background-color: #eee;}\n  .right {width: 200px; position: absolute; top: 0; right: 0; background-color: #F44336;}\n</style>\n<body>\n  <div class=\"left col\"></div>\n  <div class=\"mid col\"></div>\n  <div class=\"right col\"></div>\n</body>\n```\n\n## 5.左侧左浮动，右侧右浮动，中间元素触发[BFC](/frontend/2016/11/21/bfc.html)\n\n> 中间元素设置 `overflow: hidden` 触发[BFC](/frontend/2016/11/21/bfc.html)，但是溢出元素将不可见\n\n```html\n<style>\n  html, body {margin: 0; padding: 0; height: 100%;}\n  .col {width: 200px; height: 100%;}\n  .left.col {float: left; background-color: #03A9F4; margin-right: 10px;}\n  .right.col {float: right; background-color: #F44336; margin-left: 10px;}\n  .mid {height: 100%; background-color: #eee; overflow: hidden;}\n</style>\n<body>\n  <div class=\"right col\"></div>\n  <div class=\"left col\"></div>\n  <div class=\"mid\"></div>\n</body>\n```\n\n**END**","slug":"3-col-layout","published":1,"updated":"2024-10-22T07:01:56.479Z","_id":"cm2k3l4dg001si804g70r0wya","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>总结了4种“左右固定中间自适应的3栏布局”，强烈参考了张鑫旭的<a href=\"http://www.zhangxinxu.com/wordpress/2009/11/%E6%88%91%E7%86%9F%E7%9F%A5%E7%9A%84%E4%B8%89%E7%A7%8D%E4%B8%89%E6%A0%8F%E7%BD%91%E9%A1%B5%E5%AE%BD%E5%BA%A6%E8%87%AA%E9%80%82%E5%BA%94%E5%B8%83%E5%B1%80%E6%96%B9%E6%B3%95/\">博客</a></p>\n</blockquote>\n<h2 id=\"1左侧左浮动右侧右浮动\"><a class=\"markdownIt-Anchor\" href=\"#1左侧左浮动右侧右浮动\"></a> 1.左侧左浮动，右侧右浮动</h2>\n<blockquote>\n<p>左侧左浮动，右侧右浮动，中间div设置左右margin、宽度自适应，中间一栏必须放在最后</p>\n</blockquote>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n  <span class=\"token selector\">html, body</span> <span class=\"token punctuation\">&#123;</span><span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span> <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span> <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token selector\">.col</span> <span class=\"token punctuation\">&#123;</span><span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 200px<span class=\"token punctuation\">;</span> <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token selector\">.left.col</span> <span class=\"token punctuation\">&#123;</span><span class=\"token property\">float</span><span class=\"token punctuation\">:</span> left<span class=\"token punctuation\">;</span> <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #03A9F4<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token selector\">.right.col</span> <span class=\"token punctuation\">&#123;</span><span class=\"token property\">float</span><span class=\"token punctuation\">:</span> right<span class=\"token punctuation\">;</span> <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #F44336<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token selector\">.mid</span> <span class=\"token punctuation\">&#123;</span><span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0 210px<span class=\"token punctuation\">;</span> <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span> <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #eee<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>right col<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>left col<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>mid<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"2左右绝对定位\"><a class=\"markdownIt-Anchor\" href=\"#2左右绝对定位\"></a> 2.左右绝对定位</h2>\n<blockquote>\n<p>左右绝对定位，中间栏设置左右margin，左中右三栏顺序随意排列都可以</p>\n</blockquote>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n  <span class=\"token selector\">html, body</span> <span class=\"token punctuation\">&#123;</span><span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span> <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token selector\">.col</span> <span class=\"token punctuation\">&#123;</span><span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token selector\">.left,.right</span> <span class=\"token punctuation\">&#123;</span><span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 200px<span class=\"token punctuation\">;</span> <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span><span class=\"token property\">top</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token selector\">.left</span> <span class=\"token punctuation\">&#123;</span><span class=\"token property\">left</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span> <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #03A9F4<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token selector\">.right</span> <span class=\"token punctuation\">&#123;</span><span class=\"token property\">right</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span> <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #F44336<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token selector\">.mid</span> <span class=\"token punctuation\">&#123;</span><span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0 210px<span class=\"token punctuation\">;</span> <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #ccc<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>left col<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>mid col<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>right col<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"3全部左浮动\"><a class=\"markdownIt-Anchor\" href=\"#3全部左浮动\"></a> 3.全部左浮动</h2>\n<blockquote>\n<p>中间部分100%宽度，左浮动；左边部分也左浮动，并且margin-left: -100%；右边部分也是左浮动，margin-left: -200px；中间部分内部包含一个“真正的中间div”，margin: 0 210px&quot;</p>\n</blockquote>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n  <span class=\"token selector\">html,body</span> <span class=\"token punctuation\">&#123;</span><span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span> <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token selector\">.col</span> <span class=\"token punctuation\">&#123;</span><span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token selector\">.left, .right</span> <span class=\"token punctuation\">&#123;</span><span class=\"token property\">float</span><span class=\"token punctuation\">:</span> left<span class=\"token punctuation\">;</span> <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 200px<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token selector\">.left</span> <span class=\"token punctuation\">&#123;</span><span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #03A9F4<span class=\"token punctuation\">;</span> <span class=\"token property\">margin-left</span><span class=\"token punctuation\">:</span> -100%<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token selector\">.right</span> <span class=\"token punctuation\">&#123;</span><span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #F44336<span class=\"token punctuation\">;</span> <span class=\"token property\">margin-left</span><span class=\"token punctuation\">:</span> -200px<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token selector\">.mid-container</span> <span class=\"token punctuation\">&#123;</span><span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span> <span class=\"token property\">float</span><span class=\"token punctuation\">:</span> left<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token selector\">.mid</span> <span class=\"token punctuation\">&#123;</span><span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #eee<span class=\"token punctuation\">;</span> <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0 210px<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>mid-container col<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>mid col<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>left col<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>right col<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"4左侧左浮动右侧绝对定位\"><a class=\"markdownIt-Anchor\" href=\"#4左侧左浮动右侧绝对定位\"></a> 4.左侧左浮动，右侧绝对定位</h2>\n<blockquote>\n<p>方案1和2的结合，能保证DOM结构的顺序是左中右的，并且尽可能少用绝对定位</p>\n</blockquote>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n  <span class=\"token selector\">html, body</span> <span class=\"token punctuation\">&#123;</span><span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span> <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span> <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token selector\">.col</span> <span class=\"token punctuation\">&#123;</span><span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token selector\">.left</span> <span class=\"token punctuation\">&#123;</span><span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 200px<span class=\"token punctuation\">;</span> <span class=\"token property\">float</span><span class=\"token punctuation\">:</span> left<span class=\"token punctuation\">;</span> <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #03A9F4<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token selector\">.mid</span> <span class=\"token punctuation\">&#123;</span><span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0 210px<span class=\"token punctuation\">;</span> <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #eee<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token selector\">.right</span> <span class=\"token punctuation\">&#123;</span><span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 200px<span class=\"token punctuation\">;</span> <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span> <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span> <span class=\"token property\">right</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span> <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #F44336<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>left col<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>mid col<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>right col<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"5左侧左浮动右侧右浮动中间元素触发bfc\"><a class=\"markdownIt-Anchor\" href=\"#5左侧左浮动右侧右浮动中间元素触发bfc\"></a> 5.左侧左浮动，右侧右浮动，中间元素触发<a href=\"/frontend/2016/11/21/bfc.html\">BFC</a></h2>\n<blockquote>\n<p>中间元素设置 <code>overflow: hidden</code> 触发<a href=\"/frontend/2016/11/21/bfc.html\">BFC</a>，但是溢出元素将不可见</p>\n</blockquote>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n  <span class=\"token selector\">html, body</span> <span class=\"token punctuation\">&#123;</span><span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span> <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span> <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token selector\">.col</span> <span class=\"token punctuation\">&#123;</span><span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 200px<span class=\"token punctuation\">;</span> <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token selector\">.left.col</span> <span class=\"token punctuation\">&#123;</span><span class=\"token property\">float</span><span class=\"token punctuation\">:</span> left<span class=\"token punctuation\">;</span> <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #03A9F4<span class=\"token punctuation\">;</span> <span class=\"token property\">margin-right</span><span class=\"token punctuation\">:</span> 10px<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token selector\">.right.col</span> <span class=\"token punctuation\">&#123;</span><span class=\"token property\">float</span><span class=\"token punctuation\">:</span> right<span class=\"token punctuation\">;</span> <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #F44336<span class=\"token punctuation\">;</span> <span class=\"token property\">margin-left</span><span class=\"token punctuation\">:</span> 10px<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token selector\">.mid</span> <span class=\"token punctuation\">&#123;</span><span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span> <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #eee<span class=\"token punctuation\">;</span> <span class=\"token property\">overflow</span><span class=\"token punctuation\">:</span> hidden<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>right col<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>left col<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>mid<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>END</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>总结了4种“左右固定中间自适应的3栏布局”，强烈参考了张鑫旭的<a href=\"http://www.zhangxinxu.com/wordpress/2009/11/%E6%88%91%E7%86%9F%E7%9F%A5%E7%9A%84%E4%B8%89%E7%A7%8D%E4%B8%89%E6%A0%8F%E7%BD%91%E9%A1%B5%E5%AE%BD%E5%BA%A6%E8%87%AA%E9%80%82%E5%BA%94%E5%B8%83%E5%B1%80%E6%96%B9%E6%B3%95/\">博客</a></p>\n</blockquote>\n<h2 id=\"1左侧左浮动右侧右浮动\"><a class=\"markdownIt-Anchor\" href=\"#1左侧左浮动右侧右浮动\"></a> 1.左侧左浮动，右侧右浮动</h2>\n<blockquote>\n<p>左侧左浮动，右侧右浮动，中间div设置左右margin、宽度自适应，中间一栏必须放在最后</p>\n</blockquote>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n  <span class=\"token selector\">html, body</span> <span class=\"token punctuation\">&#123;</span><span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span> <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span> <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token selector\">.col</span> <span class=\"token punctuation\">&#123;</span><span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 200px<span class=\"token punctuation\">;</span> <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token selector\">.left.col</span> <span class=\"token punctuation\">&#123;</span><span class=\"token property\">float</span><span class=\"token punctuation\">:</span> left<span class=\"token punctuation\">;</span> <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #03A9F4<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token selector\">.right.col</span> <span class=\"token punctuation\">&#123;</span><span class=\"token property\">float</span><span class=\"token punctuation\">:</span> right<span class=\"token punctuation\">;</span> <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #F44336<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token selector\">.mid</span> <span class=\"token punctuation\">&#123;</span><span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0 210px<span class=\"token punctuation\">;</span> <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span> <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #eee<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>right col<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>left col<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>mid<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"2左右绝对定位\"><a class=\"markdownIt-Anchor\" href=\"#2左右绝对定位\"></a> 2.左右绝对定位</h2>\n<blockquote>\n<p>左右绝对定位，中间栏设置左右margin，左中右三栏顺序随意排列都可以</p>\n</blockquote>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n  <span class=\"token selector\">html, body</span> <span class=\"token punctuation\">&#123;</span><span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span> <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token selector\">.col</span> <span class=\"token punctuation\">&#123;</span><span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token selector\">.left,.right</span> <span class=\"token punctuation\">&#123;</span><span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 200px<span class=\"token punctuation\">;</span> <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span><span class=\"token property\">top</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token selector\">.left</span> <span class=\"token punctuation\">&#123;</span><span class=\"token property\">left</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span> <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #03A9F4<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token selector\">.right</span> <span class=\"token punctuation\">&#123;</span><span class=\"token property\">right</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span> <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #F44336<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token selector\">.mid</span> <span class=\"token punctuation\">&#123;</span><span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0 210px<span class=\"token punctuation\">;</span> <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #ccc<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>left col<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>mid col<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>right col<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"3全部左浮动\"><a class=\"markdownIt-Anchor\" href=\"#3全部左浮动\"></a> 3.全部左浮动</h2>\n<blockquote>\n<p>中间部分100%宽度，左浮动；左边部分也左浮动，并且margin-left: -100%；右边部分也是左浮动，margin-left: -200px；中间部分内部包含一个“真正的中间div”，margin: 0 210px&quot;</p>\n</blockquote>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n  <span class=\"token selector\">html,body</span> <span class=\"token punctuation\">&#123;</span><span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span> <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token selector\">.col</span> <span class=\"token punctuation\">&#123;</span><span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token selector\">.left, .right</span> <span class=\"token punctuation\">&#123;</span><span class=\"token property\">float</span><span class=\"token punctuation\">:</span> left<span class=\"token punctuation\">;</span> <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 200px<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token selector\">.left</span> <span class=\"token punctuation\">&#123;</span><span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #03A9F4<span class=\"token punctuation\">;</span> <span class=\"token property\">margin-left</span><span class=\"token punctuation\">:</span> -100%<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token selector\">.right</span> <span class=\"token punctuation\">&#123;</span><span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #F44336<span class=\"token punctuation\">;</span> <span class=\"token property\">margin-left</span><span class=\"token punctuation\">:</span> -200px<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token selector\">.mid-container</span> <span class=\"token punctuation\">&#123;</span><span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span> <span class=\"token property\">float</span><span class=\"token punctuation\">:</span> left<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token selector\">.mid</span> <span class=\"token punctuation\">&#123;</span><span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #eee<span class=\"token punctuation\">;</span> <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0 210px<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>mid-container col<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>mid col<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>left col<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>right col<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"4左侧左浮动右侧绝对定位\"><a class=\"markdownIt-Anchor\" href=\"#4左侧左浮动右侧绝对定位\"></a> 4.左侧左浮动，右侧绝对定位</h2>\n<blockquote>\n<p>方案1和2的结合，能保证DOM结构的顺序是左中右的，并且尽可能少用绝对定位</p>\n</blockquote>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n  <span class=\"token selector\">html, body</span> <span class=\"token punctuation\">&#123;</span><span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span> <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span> <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token selector\">.col</span> <span class=\"token punctuation\">&#123;</span><span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token selector\">.left</span> <span class=\"token punctuation\">&#123;</span><span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 200px<span class=\"token punctuation\">;</span> <span class=\"token property\">float</span><span class=\"token punctuation\">:</span> left<span class=\"token punctuation\">;</span> <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #03A9F4<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token selector\">.mid</span> <span class=\"token punctuation\">&#123;</span><span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0 210px<span class=\"token punctuation\">;</span> <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #eee<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token selector\">.right</span> <span class=\"token punctuation\">&#123;</span><span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 200px<span class=\"token punctuation\">;</span> <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span> <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span> <span class=\"token property\">right</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span> <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #F44336<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>left col<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>mid col<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>right col<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"5左侧左浮动右侧右浮动中间元素触发bfc\"><a class=\"markdownIt-Anchor\" href=\"#5左侧左浮动右侧右浮动中间元素触发bfc\"></a> 5.左侧左浮动，右侧右浮动，中间元素触发<a href=\"/frontend/2016/11/21/bfc.html\">BFC</a></h2>\n<blockquote>\n<p>中间元素设置 <code>overflow: hidden</code> 触发<a href=\"/frontend/2016/11/21/bfc.html\">BFC</a>，但是溢出元素将不可见</p>\n</blockquote>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n  <span class=\"token selector\">html, body</span> <span class=\"token punctuation\">&#123;</span><span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span> <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span> <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token selector\">.col</span> <span class=\"token punctuation\">&#123;</span><span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 200px<span class=\"token punctuation\">;</span> <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token selector\">.left.col</span> <span class=\"token punctuation\">&#123;</span><span class=\"token property\">float</span><span class=\"token punctuation\">:</span> left<span class=\"token punctuation\">;</span> <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #03A9F4<span class=\"token punctuation\">;</span> <span class=\"token property\">margin-right</span><span class=\"token punctuation\">:</span> 10px<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token selector\">.right.col</span> <span class=\"token punctuation\">&#123;</span><span class=\"token property\">float</span><span class=\"token punctuation\">:</span> right<span class=\"token punctuation\">;</span> <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #F44336<span class=\"token punctuation\">;</span> <span class=\"token property\">margin-left</span><span class=\"token punctuation\">:</span> 10px<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token selector\">.mid</span> <span class=\"token punctuation\">&#123;</span><span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span> <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #eee<span class=\"token punctuation\">;</span> <span class=\"token property\">overflow</span><span class=\"token punctuation\">:</span> hidden<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>right col<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>left col<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>mid<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>END</strong></p>\n"},{"title":"call apply bind简析","date":"2016-11-17T06:00:00.000Z","_content":"\n## Function.prototype.call()\n\n> `call()`方法可以**指定this值**，传入若干参数，调用该函数（方法）\n\n### 语法\n\n> fun.call(thisArg[, arg1[, arg2[, ...]]])\n\n### 作用\n\n#### 使用call方法调用函数并指定`this`\n\n```javascript\nfunction speak(when, msg) {\n  console.log(this.title + \" \" + this.name + \" 在 \" + when + \" 说了： \" + msg)\n}\nvar mao = {\n  title: \"主席\",\n  name: \"毛泽东\"\n}\nspeak.call(mao, \"1949年10月1日\", \"中华人民共和国中央人民政府今天成立啦！\")\n//主席 毛泽东 在 1949年10月1日 说了： 中华人民共和国中央人民政府今天成立啦！\n\nvar kiang = {\n  title: \"校长\",\n  name: \"蒋老师\"\n}\nspeak.call(kiang, \"1948年底\", \"娘希匹！\")\n//校长 蒋老师 在 1948年底 说了： 娘希匹！\n```\n\n#### 使用call方法实现继承\n\n```javascript\nfunction Product(name, price) {\n  this.name = name\n  this.price = price\n  if(price < 0) {\n    throw RangeError('Cannot create product ' + name + ' with a negative price')\n  }\n}\nfunction Clothes(name, price) {\n  Product.call(this, name, price)\n  this.category = 'clothes'\n}\nfunction Computer(name, price) {\n  Product.call(this, name, price)\n  this.category = 'computer'\n}\n\nvar clothes = new Clothes('机车皮衣', 5888)\nvar computer = new Computer('Macbook', 9998)\n```\n\n## Function.prototype.apply()\n\n> `apply()`和`call()`方法作用相同，只是参数传递方式不同\n\n### 语法\n\n> fun.apply(thisArg[, argsArray])\n\n### 用法\n\n还是以上述`speak()`函数举例，如果使用`apply()`方法，调用方式应该是：\n\n```javascript\nspeak.apply(mao, [\"1949年10月1日\", \"中华人民共和国中央人民政府今天成立啦！\"])\n```\n\n## Function.prototype.bind()\n\n> `bind()`函数执行后会**返回一个函数**，`bind()`函数接受的参数列表和`call()`函数相同，第一个参数的作用也是传递this值，剩下的参数则会传递给原函数\n\n### 语法\n\n> fun.bind(thisArg[, arg1[, arg2[, ...]]])\n\n### 返回值\n\n返回由指定的this值和初始化参数改造的**原函数拷贝**\n\n### 描述\n\nbind() 函数会创建一个新函数（称为**绑定函数**），新函数与被调函数（绑定函数的目标函数）具有相同的函数体（在 ECMAScript 5 规范中内置的call属性）。当目标函数被调用时 this 值绑定到 bind() 的第一个参数，该参数不能被重写。绑定函数被调用时，bind() 也接受预设的参数提供给原函数。一个绑定函数也能使用new操作符创建对象：这种行为就像把原函数当成构造器。提供的 this 值被忽略，同时调用时的参数被提供给模拟函数（即**绑定函数**）。\n\n### 用法\n\n上面的`speak()`函数，如果用`bind`调用，写法如下：\n\n```javascript\nspeak.bind(mao)(\"1949年10月1日\", \"中华人民共和国中央人民政府今天成立啦！\")\n\n//or\n\nspeak.bind(mao, \"1949年10月1日\", \"中华人民共和国中央人民政府今天成立啦！\")()\n```\n*注意！上面的第二种写法最后的`()`不能忽略哦~因为调用`Function.prototype.bind`只是返回了一个函数（其实就是个闭包），必须接上`()`操作符才能**执行**这个函数！*\n\n\n#### 偏函数（Partial Function）\n\n注意到，如果`bind()`函数只接受一个参数，那么他的作用其实正如`bind`这个词的意思：**绑定**，也就是说将这个函数“绑定”到这个参数对象本身，并返回一个新的函数。那么从此以后，这个新的函数体内的`this`就永远指向了传入的这个参数对象了。\n\n而`bind()`函数接受其它参数的作用是：可以预设函数的某些参数。比如，如果有现在有个打log的函数，像下面这样：\n\n```javascript\nfunction logger() {\n  console.log(Array.prototype.slice.call(arguments).join(\" \"))\n}\n```\n\n显然，这个函数的作用是接受多个参数，并且把参数用空格连接起来（仿佛没啥鸟用(⊙o⊙)…）\n\n调用这个函数的方法如下：\n\n```javascript\nlogger(\"ERROR:\", \"错啦！\", \"检查一下第5行，你输入了一个非法字符！\")\n//ERROR: 错啦！ 检查一下第5行，你输入了一个非法字符！\nlogger(\"WARN:\", \"注意变量提升的风险哦~\")\n//WARN: 注意变量提升的风险哦~\nlogger(\"SUCCESS\")\n//SUCCESS\n```\n\n现在如果需要封装一个errorLog方法，默认以`ERROR:`开头，后面跟上错误信息和错误跟踪；要封装一个warnLog方法，以`WARN:`开头，后面跟上告警提示；要封装一个successLog，输出`SUCCESS`就好~怎么做呢？这里就可以使用logger函数的bind方法，并且传入一个固定参数，限定log的类别：\n\n```javascript\nvar errorLog = logger.bind(undefined, \"ERROR:\")\nerrorLog(\"错啦！\", \"检查一下第5行，你输入了一个非法字符！\")\nvar warnLog = logger.bind(undefined, \"WARN:\")\nwarnLog(\"注意变量提升的风险哦~\")\nvar successLog = logger.bind(undefined, \"SUCESS\")\nsuccessLog()\n```\n\n#### 使用apply实现一个类似于bind的`xxx`函数\n\n```javascript\nFunction.prototype.xxx = function(obj) {\n  var thisFunc = this\n  return function() {\n    return thisFunc.apply(obj, arguments)\n  }\n}\nspeak.xxx(mao)(\"1949年10月1日\", \"中华人民共和国中央人民政府今天成立啦！\")\n```\n\n上面的代码只能通过`speak.xxx(mao)(\"1949年10月1日\", \"中华人民共和国中央人民政府今天成立啦！\")`这种方式调用，如果通过`speak.xxx(mao, \"1949年10月1日\", \"中华人民共和国中央人民政府今天成立啦！\")()`这种方式调用则会出错，怎么改进呢？\n\n```javascript\nFunction.prototype.xxx = function (oThis) {\n  var aArgs = Array.prototype.slice.call(arguments, 1)//aArgs即去除了对象的参数数组\n  var fToBind = this\n  var fBound = function () {\n    return fToBind.apply(oThis, aArgs.concat(Array.prototype.slice.call(arguments)))\n  }\n  return fBound\n}\nspeak.xxx(mao)(\"1949年10月1日\", \"中华人民共和国中央人民政府今天成立啦！\")\nspeak.xxx(mao, \"1949年10月1日\", \"中华人民共和国中央人民政府今天成立啦！\")()\n```\n\n严谨的`bind()`函数实现，还加入了其它的检验，水平有限没能搞透，日后再更~\n\nEND","source":"_posts/call-apply-bind.md","raw":"---\ntitle: call apply bind简析\ndate: 2016-11-17 14:00\ntags:\n- tech\n---\n\n## Function.prototype.call()\n\n> `call()`方法可以**指定this值**，传入若干参数，调用该函数（方法）\n\n### 语法\n\n> fun.call(thisArg[, arg1[, arg2[, ...]]])\n\n### 作用\n\n#### 使用call方法调用函数并指定`this`\n\n```javascript\nfunction speak(when, msg) {\n  console.log(this.title + \" \" + this.name + \" 在 \" + when + \" 说了： \" + msg)\n}\nvar mao = {\n  title: \"主席\",\n  name: \"毛泽东\"\n}\nspeak.call(mao, \"1949年10月1日\", \"中华人民共和国中央人民政府今天成立啦！\")\n//主席 毛泽东 在 1949年10月1日 说了： 中华人民共和国中央人民政府今天成立啦！\n\nvar kiang = {\n  title: \"校长\",\n  name: \"蒋老师\"\n}\nspeak.call(kiang, \"1948年底\", \"娘希匹！\")\n//校长 蒋老师 在 1948年底 说了： 娘希匹！\n```\n\n#### 使用call方法实现继承\n\n```javascript\nfunction Product(name, price) {\n  this.name = name\n  this.price = price\n  if(price < 0) {\n    throw RangeError('Cannot create product ' + name + ' with a negative price')\n  }\n}\nfunction Clothes(name, price) {\n  Product.call(this, name, price)\n  this.category = 'clothes'\n}\nfunction Computer(name, price) {\n  Product.call(this, name, price)\n  this.category = 'computer'\n}\n\nvar clothes = new Clothes('机车皮衣', 5888)\nvar computer = new Computer('Macbook', 9998)\n```\n\n## Function.prototype.apply()\n\n> `apply()`和`call()`方法作用相同，只是参数传递方式不同\n\n### 语法\n\n> fun.apply(thisArg[, argsArray])\n\n### 用法\n\n还是以上述`speak()`函数举例，如果使用`apply()`方法，调用方式应该是：\n\n```javascript\nspeak.apply(mao, [\"1949年10月1日\", \"中华人民共和国中央人民政府今天成立啦！\"])\n```\n\n## Function.prototype.bind()\n\n> `bind()`函数执行后会**返回一个函数**，`bind()`函数接受的参数列表和`call()`函数相同，第一个参数的作用也是传递this值，剩下的参数则会传递给原函数\n\n### 语法\n\n> fun.bind(thisArg[, arg1[, arg2[, ...]]])\n\n### 返回值\n\n返回由指定的this值和初始化参数改造的**原函数拷贝**\n\n### 描述\n\nbind() 函数会创建一个新函数（称为**绑定函数**），新函数与被调函数（绑定函数的目标函数）具有相同的函数体（在 ECMAScript 5 规范中内置的call属性）。当目标函数被调用时 this 值绑定到 bind() 的第一个参数，该参数不能被重写。绑定函数被调用时，bind() 也接受预设的参数提供给原函数。一个绑定函数也能使用new操作符创建对象：这种行为就像把原函数当成构造器。提供的 this 值被忽略，同时调用时的参数被提供给模拟函数（即**绑定函数**）。\n\n### 用法\n\n上面的`speak()`函数，如果用`bind`调用，写法如下：\n\n```javascript\nspeak.bind(mao)(\"1949年10月1日\", \"中华人民共和国中央人民政府今天成立啦！\")\n\n//or\n\nspeak.bind(mao, \"1949年10月1日\", \"中华人民共和国中央人民政府今天成立啦！\")()\n```\n*注意！上面的第二种写法最后的`()`不能忽略哦~因为调用`Function.prototype.bind`只是返回了一个函数（其实就是个闭包），必须接上`()`操作符才能**执行**这个函数！*\n\n\n#### 偏函数（Partial Function）\n\n注意到，如果`bind()`函数只接受一个参数，那么他的作用其实正如`bind`这个词的意思：**绑定**，也就是说将这个函数“绑定”到这个参数对象本身，并返回一个新的函数。那么从此以后，这个新的函数体内的`this`就永远指向了传入的这个参数对象了。\n\n而`bind()`函数接受其它参数的作用是：可以预设函数的某些参数。比如，如果有现在有个打log的函数，像下面这样：\n\n```javascript\nfunction logger() {\n  console.log(Array.prototype.slice.call(arguments).join(\" \"))\n}\n```\n\n显然，这个函数的作用是接受多个参数，并且把参数用空格连接起来（仿佛没啥鸟用(⊙o⊙)…）\n\n调用这个函数的方法如下：\n\n```javascript\nlogger(\"ERROR:\", \"错啦！\", \"检查一下第5行，你输入了一个非法字符！\")\n//ERROR: 错啦！ 检查一下第5行，你输入了一个非法字符！\nlogger(\"WARN:\", \"注意变量提升的风险哦~\")\n//WARN: 注意变量提升的风险哦~\nlogger(\"SUCCESS\")\n//SUCCESS\n```\n\n现在如果需要封装一个errorLog方法，默认以`ERROR:`开头，后面跟上错误信息和错误跟踪；要封装一个warnLog方法，以`WARN:`开头，后面跟上告警提示；要封装一个successLog，输出`SUCCESS`就好~怎么做呢？这里就可以使用logger函数的bind方法，并且传入一个固定参数，限定log的类别：\n\n```javascript\nvar errorLog = logger.bind(undefined, \"ERROR:\")\nerrorLog(\"错啦！\", \"检查一下第5行，你输入了一个非法字符！\")\nvar warnLog = logger.bind(undefined, \"WARN:\")\nwarnLog(\"注意变量提升的风险哦~\")\nvar successLog = logger.bind(undefined, \"SUCESS\")\nsuccessLog()\n```\n\n#### 使用apply实现一个类似于bind的`xxx`函数\n\n```javascript\nFunction.prototype.xxx = function(obj) {\n  var thisFunc = this\n  return function() {\n    return thisFunc.apply(obj, arguments)\n  }\n}\nspeak.xxx(mao)(\"1949年10月1日\", \"中华人民共和国中央人民政府今天成立啦！\")\n```\n\n上面的代码只能通过`speak.xxx(mao)(\"1949年10月1日\", \"中华人民共和国中央人民政府今天成立啦！\")`这种方式调用，如果通过`speak.xxx(mao, \"1949年10月1日\", \"中华人民共和国中央人民政府今天成立啦！\")()`这种方式调用则会出错，怎么改进呢？\n\n```javascript\nFunction.prototype.xxx = function (oThis) {\n  var aArgs = Array.prototype.slice.call(arguments, 1)//aArgs即去除了对象的参数数组\n  var fToBind = this\n  var fBound = function () {\n    return fToBind.apply(oThis, aArgs.concat(Array.prototype.slice.call(arguments)))\n  }\n  return fBound\n}\nspeak.xxx(mao)(\"1949年10月1日\", \"中华人民共和国中央人民政府今天成立啦！\")\nspeak.xxx(mao, \"1949年10月1日\", \"中华人民共和国中央人民政府今天成立啦！\")()\n```\n\n严谨的`bind()`函数实现，还加入了其它的检验，水平有限没能搞透，日后再更~\n\nEND","slug":"call-apply-bind","published":1,"updated":"2024-10-22T07:02:22.116Z","_id":"cm2k3lo93001vi804f1018sdq","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"functionprototypecall\"><a class=\"markdownIt-Anchor\" href=\"#functionprototypecall\"></a> Function.prototype.call()</h2>\n<blockquote>\n<p><code>call()</code>方法可以<strong>指定this值</strong>，传入若干参数，调用该函数（方法）</p>\n</blockquote>\n<h3 id=\"语法\"><a class=\"markdownIt-Anchor\" href=\"#语法\"></a> 语法</h3>\n<blockquote>\n<p>fun.call(thisArg[, arg1[, arg2[, …]]])</p>\n</blockquote>\n<h3 id=\"作用\"><a class=\"markdownIt-Anchor\" href=\"#作用\"></a> 作用</h3>\n<h4 id=\"使用call方法调用函数并指定this\"><a class=\"markdownIt-Anchor\" href=\"#使用call方法调用函数并指定this\"></a> 使用call方法调用函数并指定<code>this</code></h4>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">speak</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">when<span class=\"token punctuation\">,</span> msg</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>title <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\" 在 \"</span> <span class=\"token operator\">+</span> when <span class=\"token operator\">+</span> <span class=\"token string\">\" 说了： \"</span> <span class=\"token operator\">+</span> msg<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">var</span> mao <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">\"主席\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"毛泽东\"</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token function\">speak</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>mao<span class=\"token punctuation\">,</span> <span class=\"token string\">\"1949年10月1日\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"中华人民共和国中央人民政府今天成立啦！\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//主席 毛泽东 在 1949年10月1日 说了： 中华人民共和国中央人民政府今天成立啦！</span>\n\n<span class=\"token keyword\">var</span> kiang <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">\"校长\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"蒋老师\"</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token function\">speak</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>kiang<span class=\"token punctuation\">,</span> <span class=\"token string\">\"1948年底\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"娘希匹！\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//校长 蒋老师 在 1948年底 说了： 娘希匹！</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"使用call方法实现继承\"><a class=\"markdownIt-Anchor\" href=\"#使用call方法实现继承\"></a> 使用call方法实现继承</h4>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Product</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> price</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>price <span class=\"token operator\">=</span> price\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>price <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token function\">RangeError</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Cannot create product '</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token string\">' with a negative price'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Clothes</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> price</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">Product</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> price<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>category <span class=\"token operator\">=</span> <span class=\"token string\">'clothes'</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Computer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> price</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">Product</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> price<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>category <span class=\"token operator\">=</span> <span class=\"token string\">'computer'</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">var</span> clothes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Clothes</span><span class=\"token punctuation\">(</span><span class=\"token string\">'机车皮衣'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5888</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> computer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Computer</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Macbook'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9998</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"functionprototypeapply\"><a class=\"markdownIt-Anchor\" href=\"#functionprototypeapply\"></a> Function.prototype.apply()</h2>\n<blockquote>\n<p><code>apply()</code>和<code>call()</code>方法作用相同，只是参数传递方式不同</p>\n</blockquote>\n<h3 id=\"语法-2\"><a class=\"markdownIt-Anchor\" href=\"#语法-2\"></a> 语法</h3>\n<blockquote>\n<p>fun.apply(thisArg[, argsArray])</p>\n</blockquote>\n<h3 id=\"用法\"><a class=\"markdownIt-Anchor\" href=\"#用法\"></a> 用法</h3>\n<p>还是以上述<code>speak()</code>函数举例，如果使用<code>apply()</code>方法，调用方式应该是：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">speak</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>mao<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"1949年10月1日\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"中华人民共和国中央人民政府今天成立啦！\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"functionprototypebind\"><a class=\"markdownIt-Anchor\" href=\"#functionprototypebind\"></a> Function.prototype.bind()</h2>\n<blockquote>\n<p><code>bind()</code>函数执行后会<strong>返回一个函数</strong>，<code>bind()</code>函数接受的参数列表和<code>call()</code>函数相同，第一个参数的作用也是传递this值，剩下的参数则会传递给原函数</p>\n</blockquote>\n<h3 id=\"语法-3\"><a class=\"markdownIt-Anchor\" href=\"#语法-3\"></a> 语法</h3>\n<blockquote>\n<p>fun.bind(thisArg[, arg1[, arg2[, …]]])</p>\n</blockquote>\n<h3 id=\"返回值\"><a class=\"markdownIt-Anchor\" href=\"#返回值\"></a> 返回值</h3>\n<p>返回由指定的this值和初始化参数改造的<strong>原函数拷贝</strong></p>\n<h3 id=\"描述\"><a class=\"markdownIt-Anchor\" href=\"#描述\"></a> 描述</h3>\n<p>bind() 函数会创建一个新函数（称为<strong>绑定函数</strong>），新函数与被调函数（绑定函数的目标函数）具有相同的函数体（在 ECMAScript 5 规范中内置的call属性）。当目标函数被调用时 this 值绑定到 bind() 的第一个参数，该参数不能被重写。绑定函数被调用时，bind() 也接受预设的参数提供给原函数。一个绑定函数也能使用new操作符创建对象：这种行为就像把原函数当成构造器。提供的 this 值被忽略，同时调用时的参数被提供给模拟函数（即<strong>绑定函数</strong>）。</p>\n<h3 id=\"用法-2\"><a class=\"markdownIt-Anchor\" href=\"#用法-2\"></a> 用法</h3>\n<p>上面的<code>speak()</code>函数，如果用<code>bind</code>调用，写法如下：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">speak</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>mao<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1949年10月1日\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"中华人民共和国中央人民政府今天成立啦！\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">//or</span>\n\n<span class=\"token function\">speak</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>mao<span class=\"token punctuation\">,</span> <span class=\"token string\">\"1949年10月1日\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"中华人民共和国中央人民政府今天成立啦！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><em>注意！上面的第二种写法最后的<code>()</code>不能忽略哦~因为调用<code>Function.prototype.bind</code>只是返回了一个函数（其实就是个闭包），必须接上<code>()</code>操作符才能<strong>执行</strong>这个函数！</em></p>\n<h4 id=\"偏函数partial-function\"><a class=\"markdownIt-Anchor\" href=\"#偏函数partial-function\"></a> 偏函数（Partial Function）</h4>\n<p>注意到，如果<code>bind()</code>函数只接受一个参数，那么他的作用其实正如<code>bind</code>这个词的意思：<strong>绑定</strong>，也就是说将这个函数“绑定”到这个参数对象本身，并返回一个新的函数。那么从此以后，这个新的函数体内的<code>this</code>就永远指向了传入的这个参数对象了。</p>\n<p>而<code>bind()</code>函数接受其它参数的作用是：可以预设函数的某些参数。比如，如果有现在有个打log的函数，像下面这样：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">logger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>显然，这个函数的作用是接受多个参数，并且把参数用空格连接起来（仿佛没啥鸟用(⊙o⊙)…）</p>\n<p>调用这个函数的方法如下：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">logger</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ERROR:\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"错啦！\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"检查一下第5行，你输入了一个非法字符！\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//ERROR: 错啦！ 检查一下第5行，你输入了一个非法字符！</span>\n<span class=\"token function\">logger</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"WARN:\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"注意变量提升的风险哦~\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//WARN: 注意变量提升的风险哦~</span>\n<span class=\"token function\">logger</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SUCCESS\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//SUCCESS</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>现在如果需要封装一个errorLog方法，默认以<code>ERROR:</code>开头，后面跟上错误信息和错误跟踪；要封装一个warnLog方法，以<code>WARN:</code>开头，后面跟上告警提示；要封装一个successLog，输出<code>SUCCESS</code>就好~怎么做呢？这里就可以使用logger函数的bind方法，并且传入一个固定参数，限定log的类别：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> errorLog <span class=\"token operator\">=</span> <span class=\"token function\">logger</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ERROR:\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">errorLog</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"错啦！\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"检查一下第5行，你输入了一个非法字符！\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> warnLog <span class=\"token operator\">=</span> <span class=\"token function\">logger</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"WARN:\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">warnLog</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"注意变量提升的风险哦~\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> successLog <span class=\"token operator\">=</span> <span class=\"token function\">logger</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"SUCESS\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">successLog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"使用apply实现一个类似于bind的xxx函数\"><a class=\"markdownIt-Anchor\" href=\"#使用apply实现一个类似于bind的xxx函数\"></a> 使用apply实现一个类似于bind的<code>xxx</code>函数</h4>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token class-name\">Function</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">xxx</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> thisFunc <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">thisFunc</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\nspeak<span class=\"token punctuation\">.</span><span class=\"token function\">xxx</span><span class=\"token punctuation\">(</span>mao<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1949年10月1日\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"中华人民共和国中央人民政府今天成立啦！\"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>上面的代码只能通过<code>speak.xxx(mao)(&quot;1949年10月1日&quot;, &quot;中华人民共和国中央人民政府今天成立啦！&quot;)</code>这种方式调用，如果通过<code>speak.xxx(mao, &quot;1949年10月1日&quot;, &quot;中华人民共和国中央人民政府今天成立啦！&quot;)()</code>这种方式调用则会出错，怎么改进呢？</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token class-name\">Function</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">xxx</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">oThis</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> aArgs <span class=\"token operator\">=</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//aArgs即去除了对象的参数数组</span>\n  <span class=\"token keyword\">var</span> fToBind <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span>\n  <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">fBound</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">fToBind</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>oThis<span class=\"token punctuation\">,</span> aArgs<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> fBound\n<span class=\"token punctuation\">&#125;</span>\nspeak<span class=\"token punctuation\">.</span><span class=\"token function\">xxx</span><span class=\"token punctuation\">(</span>mao<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1949年10月1日\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"中华人民共和国中央人民政府今天成立啦！\"</span><span class=\"token punctuation\">)</span>\nspeak<span class=\"token punctuation\">.</span><span class=\"token function\">xxx</span><span class=\"token punctuation\">(</span>mao<span class=\"token punctuation\">,</span> <span class=\"token string\">\"1949年10月1日\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"中华人民共和国中央人民政府今天成立啦！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>严谨的<code>bind()</code>函数实现，还加入了其它的检验，水平有限没能搞透，日后再更~</p>\n<p>END</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"functionprototypecall\"><a class=\"markdownIt-Anchor\" href=\"#functionprototypecall\"></a> Function.prototype.call()</h2>\n<blockquote>\n<p><code>call()</code>方法可以<strong>指定this值</strong>，传入若干参数，调用该函数（方法）</p>\n</blockquote>\n<h3 id=\"语法\"><a class=\"markdownIt-Anchor\" href=\"#语法\"></a> 语法</h3>\n<blockquote>\n<p>fun.call(thisArg[, arg1[, arg2[, …]]])</p>\n</blockquote>\n<h3 id=\"作用\"><a class=\"markdownIt-Anchor\" href=\"#作用\"></a> 作用</h3>\n<h4 id=\"使用call方法调用函数并指定this\"><a class=\"markdownIt-Anchor\" href=\"#使用call方法调用函数并指定this\"></a> 使用call方法调用函数并指定<code>this</code></h4>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">speak</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">when<span class=\"token punctuation\">,</span> msg</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>title <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\" 在 \"</span> <span class=\"token operator\">+</span> when <span class=\"token operator\">+</span> <span class=\"token string\">\" 说了： \"</span> <span class=\"token operator\">+</span> msg<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">var</span> mao <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">\"主席\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"毛泽东\"</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token function\">speak</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>mao<span class=\"token punctuation\">,</span> <span class=\"token string\">\"1949年10月1日\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"中华人民共和国中央人民政府今天成立啦！\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//主席 毛泽东 在 1949年10月1日 说了： 中华人民共和国中央人民政府今天成立啦！</span>\n\n<span class=\"token keyword\">var</span> kiang <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">\"校长\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"蒋老师\"</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token function\">speak</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>kiang<span class=\"token punctuation\">,</span> <span class=\"token string\">\"1948年底\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"娘希匹！\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//校长 蒋老师 在 1948年底 说了： 娘希匹！</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"使用call方法实现继承\"><a class=\"markdownIt-Anchor\" href=\"#使用call方法实现继承\"></a> 使用call方法实现继承</h4>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Product</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> price</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>price <span class=\"token operator\">=</span> price\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>price <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token function\">RangeError</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Cannot create product '</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token string\">' with a negative price'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Clothes</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> price</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">Product</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> price<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>category <span class=\"token operator\">=</span> <span class=\"token string\">'clothes'</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Computer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> price</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">Product</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> price<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>category <span class=\"token operator\">=</span> <span class=\"token string\">'computer'</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">var</span> clothes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Clothes</span><span class=\"token punctuation\">(</span><span class=\"token string\">'机车皮衣'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5888</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> computer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Computer</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Macbook'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9998</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"functionprototypeapply\"><a class=\"markdownIt-Anchor\" href=\"#functionprototypeapply\"></a> Function.prototype.apply()</h2>\n<blockquote>\n<p><code>apply()</code>和<code>call()</code>方法作用相同，只是参数传递方式不同</p>\n</blockquote>\n<h3 id=\"语法-2\"><a class=\"markdownIt-Anchor\" href=\"#语法-2\"></a> 语法</h3>\n<blockquote>\n<p>fun.apply(thisArg[, argsArray])</p>\n</blockquote>\n<h3 id=\"用法\"><a class=\"markdownIt-Anchor\" href=\"#用法\"></a> 用法</h3>\n<p>还是以上述<code>speak()</code>函数举例，如果使用<code>apply()</code>方法，调用方式应该是：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">speak</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>mao<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"1949年10月1日\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"中华人民共和国中央人民政府今天成立啦！\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"functionprototypebind\"><a class=\"markdownIt-Anchor\" href=\"#functionprototypebind\"></a> Function.prototype.bind()</h2>\n<blockquote>\n<p><code>bind()</code>函数执行后会<strong>返回一个函数</strong>，<code>bind()</code>函数接受的参数列表和<code>call()</code>函数相同，第一个参数的作用也是传递this值，剩下的参数则会传递给原函数</p>\n</blockquote>\n<h3 id=\"语法-3\"><a class=\"markdownIt-Anchor\" href=\"#语法-3\"></a> 语法</h3>\n<blockquote>\n<p>fun.bind(thisArg[, arg1[, arg2[, …]]])</p>\n</blockquote>\n<h3 id=\"返回值\"><a class=\"markdownIt-Anchor\" href=\"#返回值\"></a> 返回值</h3>\n<p>返回由指定的this值和初始化参数改造的<strong>原函数拷贝</strong></p>\n<h3 id=\"描述\"><a class=\"markdownIt-Anchor\" href=\"#描述\"></a> 描述</h3>\n<p>bind() 函数会创建一个新函数（称为<strong>绑定函数</strong>），新函数与被调函数（绑定函数的目标函数）具有相同的函数体（在 ECMAScript 5 规范中内置的call属性）。当目标函数被调用时 this 值绑定到 bind() 的第一个参数，该参数不能被重写。绑定函数被调用时，bind() 也接受预设的参数提供给原函数。一个绑定函数也能使用new操作符创建对象：这种行为就像把原函数当成构造器。提供的 this 值被忽略，同时调用时的参数被提供给模拟函数（即<strong>绑定函数</strong>）。</p>\n<h3 id=\"用法-2\"><a class=\"markdownIt-Anchor\" href=\"#用法-2\"></a> 用法</h3>\n<p>上面的<code>speak()</code>函数，如果用<code>bind</code>调用，写法如下：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">speak</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>mao<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1949年10月1日\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"中华人民共和国中央人民政府今天成立啦！\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">//or</span>\n\n<span class=\"token function\">speak</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>mao<span class=\"token punctuation\">,</span> <span class=\"token string\">\"1949年10月1日\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"中华人民共和国中央人民政府今天成立啦！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><em>注意！上面的第二种写法最后的<code>()</code>不能忽略哦~因为调用<code>Function.prototype.bind</code>只是返回了一个函数（其实就是个闭包），必须接上<code>()</code>操作符才能<strong>执行</strong>这个函数！</em></p>\n<h4 id=\"偏函数partial-function\"><a class=\"markdownIt-Anchor\" href=\"#偏函数partial-function\"></a> 偏函数（Partial Function）</h4>\n<p>注意到，如果<code>bind()</code>函数只接受一个参数，那么他的作用其实正如<code>bind</code>这个词的意思：<strong>绑定</strong>，也就是说将这个函数“绑定”到这个参数对象本身，并返回一个新的函数。那么从此以后，这个新的函数体内的<code>this</code>就永远指向了传入的这个参数对象了。</p>\n<p>而<code>bind()</code>函数接受其它参数的作用是：可以预设函数的某些参数。比如，如果有现在有个打log的函数，像下面这样：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">logger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>显然，这个函数的作用是接受多个参数，并且把参数用空格连接起来（仿佛没啥鸟用(⊙o⊙)…）</p>\n<p>调用这个函数的方法如下：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">logger</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ERROR:\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"错啦！\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"检查一下第5行，你输入了一个非法字符！\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//ERROR: 错啦！ 检查一下第5行，你输入了一个非法字符！</span>\n<span class=\"token function\">logger</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"WARN:\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"注意变量提升的风险哦~\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//WARN: 注意变量提升的风险哦~</span>\n<span class=\"token function\">logger</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SUCCESS\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//SUCCESS</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>现在如果需要封装一个errorLog方法，默认以<code>ERROR:</code>开头，后面跟上错误信息和错误跟踪；要封装一个warnLog方法，以<code>WARN:</code>开头，后面跟上告警提示；要封装一个successLog，输出<code>SUCCESS</code>就好~怎么做呢？这里就可以使用logger函数的bind方法，并且传入一个固定参数，限定log的类别：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> errorLog <span class=\"token operator\">=</span> <span class=\"token function\">logger</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ERROR:\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">errorLog</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"错啦！\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"检查一下第5行，你输入了一个非法字符！\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> warnLog <span class=\"token operator\">=</span> <span class=\"token function\">logger</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"WARN:\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">warnLog</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"注意变量提升的风险哦~\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> successLog <span class=\"token operator\">=</span> <span class=\"token function\">logger</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"SUCESS\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">successLog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"使用apply实现一个类似于bind的xxx函数\"><a class=\"markdownIt-Anchor\" href=\"#使用apply实现一个类似于bind的xxx函数\"></a> 使用apply实现一个类似于bind的<code>xxx</code>函数</h4>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token class-name\">Function</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">xxx</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> thisFunc <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">thisFunc</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\nspeak<span class=\"token punctuation\">.</span><span class=\"token function\">xxx</span><span class=\"token punctuation\">(</span>mao<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1949年10月1日\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"中华人民共和国中央人民政府今天成立啦！\"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>上面的代码只能通过<code>speak.xxx(mao)(&quot;1949年10月1日&quot;, &quot;中华人民共和国中央人民政府今天成立啦！&quot;)</code>这种方式调用，如果通过<code>speak.xxx(mao, &quot;1949年10月1日&quot;, &quot;中华人民共和国中央人民政府今天成立啦！&quot;)()</code>这种方式调用则会出错，怎么改进呢？</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token class-name\">Function</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">xxx</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">oThis</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> aArgs <span class=\"token operator\">=</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//aArgs即去除了对象的参数数组</span>\n  <span class=\"token keyword\">var</span> fToBind <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span>\n  <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">fBound</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">fToBind</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>oThis<span class=\"token punctuation\">,</span> aArgs<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> fBound\n<span class=\"token punctuation\">&#125;</span>\nspeak<span class=\"token punctuation\">.</span><span class=\"token function\">xxx</span><span class=\"token punctuation\">(</span>mao<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1949年10月1日\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"中华人民共和国中央人民政府今天成立啦！\"</span><span class=\"token punctuation\">)</span>\nspeak<span class=\"token punctuation\">.</span><span class=\"token function\">xxx</span><span class=\"token punctuation\">(</span>mao<span class=\"token punctuation\">,</span> <span class=\"token string\">\"1949年10月1日\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"中华人民共和国中央人民政府今天成立啦！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>严谨的<code>bind()</code>函数实现，还加入了其它的检验，水平有限没能搞透，日后再更~</p>\n<p>END</p>\n"},{"title":"JS去除字符串前后的空格","date":"2016-11-16T06:00:00.000Z","_content":"\n在很多场景中，会遇到“把一个字符串前后的空格去掉”的需求，例如提交表单时。\n\n主流浏览器都有`String.prototype.trim`方法，IE 9 及以上也有。如果要手工实现一个，可以使用正则表达式。\n\n## 去除两端空格\n\n```javascript\nfunction trim(str) {\n  return str.replace(/(^\\s*)|(\\s*$)/g, '');\n}\n```\n\n## 去除左侧空格\n\n```javascript\nfunction trimLeft(str) {\n  return str.replace(/^\\s*/g, '');\n}\n```\n\n## 去除右侧空格\n\n```javascript\nfunction trimRight(str) {\n  return str.replace(/\\s*$/g, '');\n}\n```","source":"_posts/string-trim.md","raw":"---\ntitle: JS去除字符串前后的空格\ndate: 2016-11-16 14:00\ntags:\n- tech\n---\n\n在很多场景中，会遇到“把一个字符串前后的空格去掉”的需求，例如提交表单时。\n\n主流浏览器都有`String.prototype.trim`方法，IE 9 及以上也有。如果要手工实现一个，可以使用正则表达式。\n\n## 去除两端空格\n\n```javascript\nfunction trim(str) {\n  return str.replace(/(^\\s*)|(\\s*$)/g, '');\n}\n```\n\n## 去除左侧空格\n\n```javascript\nfunction trimLeft(str) {\n  return str.replace(/^\\s*/g, '');\n}\n```\n\n## 去除右侧空格\n\n```javascript\nfunction trimRight(str) {\n  return str.replace(/\\s*$/g, '');\n}\n```","slug":"string-trim","published":1,"updated":"2024-10-22T07:02:48.763Z","_id":"cm2k3mg53001yi804fuci4pwg","comments":1,"layout":"post","photos":[],"link":"","content":"<p>在很多场景中，会遇到“把一个字符串前后的空格去掉”的需求，例如提交表单时。</p>\n<p>主流浏览器都有<code>String.prototype.trim</code>方法，IE 9 及以上也有。如果要手工实现一个，可以使用正则表达式。</p>\n<h2 id=\"去除两端空格\"><a class=\"markdownIt-Anchor\" href=\"#去除两端空格\"></a> 去除两端空格</h2>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">(^\\s*)|(\\s*$)</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"去除左侧空格\"><a class=\"markdownIt-Anchor\" href=\"#去除左侧空格\"></a> 去除左侧空格</h2>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">trimLeft</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^\\s*</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"去除右侧空格\"><a class=\"markdownIt-Anchor\" href=\"#去除右侧空格\"></a> 去除右侧空格</h2>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">trimRight</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\s*$</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>","site":{"data":{}},"excerpt":"","more":"<p>在很多场景中，会遇到“把一个字符串前后的空格去掉”的需求，例如提交表单时。</p>\n<p>主流浏览器都有<code>String.prototype.trim</code>方法，IE 9 及以上也有。如果要手工实现一个，可以使用正则表达式。</p>\n<h2 id=\"去除两端空格\"><a class=\"markdownIt-Anchor\" href=\"#去除两端空格\"></a> 去除两端空格</h2>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">(^\\s*)|(\\s*$)</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"去除左侧空格\"><a class=\"markdownIt-Anchor\" href=\"#去除左侧空格\"></a> 去除左侧空格</h2>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">trimLeft</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^\\s*</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"去除右侧空格\"><a class=\"markdownIt-Anchor\" href=\"#去除右侧空格\"></a> 去除右侧空格</h2>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">trimRight</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\s*$</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>"},{"title":"Git最常用的n个操作","date":"2016-10-22T06:00:00.000Z","_content":"\n![git_draft](../assets/images/posts/git/git_draft.jpg)\n\n上面这张图是我最开始学Git，按照自己的理解画出来的，可能会有问题，但总体问题不大。\n\n其实Git是个非常复杂的系统，很多细节的特性，平时用到的不多，我也不太清楚，这篇文章只说我日常开发中最常用的操作。\n\n## git clone\n\n### 作用\n\n> 将远程仓库中的项目下载到本地仓库\n\n### 用法\n\n在浏览器中打开github或公司的gitlab，进入项目，复制项目的git地址（如果公司的gitlab不支持SSH，因此请注意选择HTTPS的地址）\n\n![](../assets/images/posts/git/clone.jpg)\n\n进入到工作目录（通常我们会把各个项目放在同一个文件夹，例如workingDir啥的，当然，你可以在任意目录做git操作），敲下命令\n\n`git clone https://github.com/rodickmini/taptempo.git`\n\n这个操作会把taptempo项目下载到workingDir下的taptempo目录，如果你不想使用taptempo这个目录名，可以指定一个目录名，比如taptempo2\n\n`git clone https://github.com/rodickmini/taptempo.git taptempo2`\n\n## git checkout\n\n### 作用\n\n> 切换分支或将修改的文件恢复\n\n### 用法\n\n`clone`下代码后，代码默认会在`master`分支，我们需要把代码切换到一个自己的分支，这样的话，我们随便怎样修改，怎样提交，都不会影响到`master`或其它分支。\n\n`git checkout -b feature-test`\n\n这个时候，`feature-test`分支和`master`分支的代码是完全一样的，但是此后，你做的所有修改都不会影响`master`分支，只会在`feature-test`分支上往下进行。\n\n## git status\n\n### 作用\n\n> 显示当前工作目录的文件状态\n\n### 用法\n\n`git status`\n\n![git_status](../assets/images/posts/git/git_status.png)\n\n- Changes to be committed列出了已经add了还没有commit的文件\n- Changes not staged for commit列出了修改了，但还没有add的文件\n- Untracked files列出了新加入的，还没有被git管理起来的文件\n\n**经常敲一敲这个命令，可以让你对当前git的状态了如指掌！**\n\n## git add\n\n### 作用\n\n> 将一个普通文件交给git管理或者将修改过的文件添加到git的索引库中。当我们使用`git commit`时，git将依据索引库中的内容来进行文件的提交。\n\n### 用法\n\n`git add index.html`\n\n如果我们一次修改比较多的文件，需要把所有修改的文件都添加到索引库，可以使用：\n\n`git add --all`\n\n如果我们误把一个文件添加进了索引库，可以使用以下命令将其“拉回”暂存区：\n\n`git reset HEAD index.html`\n\n如果我们想把一个文件恢复成修改前的状态，可以使用以下命令，就撤销了我们所有的修改：\n\n`git checkout index.html`\n\n**但是，执行这个命令要慎重哦！一旦执行，你的所有修改都找不回来啦！**\n\n所以，最好在执行之前，先看一下这次修改了那些东西，那么就需要使用git diff命令：\n\n`git diff index.html`\n\n![git_diff](../assets/images/posts/git/git_diff.png)\n\n`git diff` 命令会调出一个类似于vi的文本编辑器（只读），里面红色的部分说明你删除了`<h1>catch the beat</h1>`这一行，绿色的部分说明你添加了`display: block;`这一行。看完了，按`q`键就可以退出啦~\n\n经过上面这几步“折腾”，你就可以信心十足地决定把哪些文件add进索引库，哪些只是手贱现在要放弃修改的！\n\n## git commit\n\n### 作用\n\n> 将所有添加到索引库的文件提交到本地仓库\n\n终于要commit了！为什么commit这么重要？\n\n因为一旦commit了之后，就会在git中形成一个历史版本，以后不管走到天涯海角，你都可以像乘坐时光机一样找到当年在村口老槐树下埋下的那颗玻璃球，哦不，是找到当年在git里提交的那次变动。\n\ncommit操作也是考验一个开发者职业素养的试金石，老司机搂一眼commit message就知道他有没有搞清楚js的闭包和原型链。。。\n\n### 用法\n\n最简单的commit操作如下：\n\n`git commit -m \"upd\"`\n\n当然，这样commit肯定永远成不了老司机哒！\n\n你看到了，`commit`操作要写一个`commit message`，可以在行内用`-m`参数直接写，一些简单的修改可以这么做，但千万别像我一样，光溜溜写个没营养的upd，稍微好一点的写法呢是想这样的：\n\n> `git commit -m \"upd 修改了首页的表格样式，避免字数多了在一行内显示不下\"`<br>\n> 或者<br>\n> `git commit -m \"add package.json 引入node包管理，方便安装node依赖\"`<br>\n> 或者<br>\n> `git commit -m \"del npm-debug.log日志文件，避免污染git仓库\"`\n\n所以`commit message`主要要说3件事：\n\n1. 是upd（更新）、add（添加）还是del（删除）操作\n2. 操作了什么文件（或者什么内容）\n3. 为什么要做这个操作（或者能够解决什么bug，解决什么问题）\n\n另外如果做了比较重大的提交，一句两句说不完，那么就不能再一行之内解决了，这时候需要用到更高级、更规范的`commit message`写法：\n\n`git commit`\n\n啥？我读书少你不要骗我！最高级的命令怎么是最短的？！别急，往下看~此时git又会调出我们的老朋友`vi`编辑器：\n\n将输入法调到英文状态，按下`Shift+G`再按`o`键，`vi`将在文件最后一行待命，此时就可以输入详细的commit message啦~\n\n![git_diff](../assets/images/posts/git/git_commit.png)\n\n注意，commit message要注意及时换行，不要超过开头注释部分的宽度。\n\ncommit message在某些系统里面可以被转化成email，所以格式类似于email，第一行是主题，空一行，后面的是正文。\n\n写完之后，按10次`ESC`键，输入`:wq`即可退出`vi`编辑器，commit操作完成！深藏功与名！\n\n**当然，以上所说关于commit的注意事项都是我瞎说的。。。操作过程中出现任何问题，本人概不负责！**\n\n## git push\n\n### 作用\n\n> 将本地仓库的修改推送到远程仓库\n\n### 用法\n\n`git push origin feature-test`\n\n如果不push，协作的小伙伴们将永远不知道你关起门来做了什么伤天害理的事儿，所以，当我们做完功能后，要记得使用`git push`将自己的改动推送到远程代码仓库。\n\n如果远程仓库当前没有`feature-test`这个分支，将会新建分支。\n\n## git fetch\n\n### 作用\n\n> 将远程代码仓库的代码下载到本地\n\n### 用法\n\n本地仓库维护这一堆“remote-tracking branches”，翻译过来叫“远程跟踪分支”，对应着本地仓库里`remote/master` `remote/develop`这些分支。\n\nfetch操作后，远程跟踪分支就和远程代码仓库里的相应分支代码保持一致了~\n\n`git fetch`\n\n`fetch`操作默认只会fetch`origin`仓库的分支，如果要fetch其它仓库的分支，需要在后面加上仓库名：\n\n`git fetch repo-caiyou`\n\n通常，我们的feature分支在完成使命后会被管理员删除掉，而我们各自的本地却不知道，硬盘空间吃紧。所以，如果我们想在管理员删除了远端的某些分支的时候，将自己本地对应的“远程跟踪分支”删除掉，需要在fetch操作时加一个`-p`参数：\n\n`git fetch -p`\n\n## git merge\n\n### 作用\n\n> 将一个或多个分支合并到当前所在分支\n\n### 用法\n\n比如我们当前在`develop`分支上，`git fetch`之后，我们把远程代码仓库中的`develop`分支下载到了本地仓库，但是并没有`merge`到我们当前工作的`develop`分支里，看`log`的话，我们会发现我们本地的`develop`分支和`remote/develop`分支还差了老远~因此需要进行如下操作：\n\n`git merge origin/develop`\n\n这样，`develop`分支就和`remote/develop`分支一样了。\n\n`git merge`操作通常还用在别的一些场景中，比如，我们的同事在`feature-x`分支上做好了某个业务，此时，需要将`feature-x`分支合并到`develop`分支，便于在测试环境上线，就需要先切换到`develop`分支：\n\n`git checkout develop`\n\n再将`feature-x`分支merge到`develop`分支：\n\n`git merge feature-x`\n\n当然，如果是比较大的变更，或是涉及到比较重要的文件时，这类业务上的merge操作建议在github上使用`pull-request`，或是gitlab系统里的`merge-request`，贸然merge产生大量冲突会很蛋疼的哦~\n\n## git pull\n\n### 作用\n\n> 将远程代码仓库里的代码下载下来并自动合并到当前工作的分支\n\n### 用法\n\n`git pull`\n\n不负责任地讲，`git pull`基本上等于`git fetch` + `git merge FETCH_HEAD`，但是，`git pull`操作无法看清中间的代码差异和合并的逻辑（其实是我不太清楚啊。。。），曾经踩过坑，代码合并出问题，所以我个人不会直接使用`git pull`这个操作，毕竟，耿直boy们更喜欢手动挡嘛~\n\n## git log\n\n### 作用\n\n> 查看代码提交日志\n\n### 用法\n\n`git log`\n\n会显示最基本的log信息，但是不直观，不能看清分支之间的分叉、合并、前因后果，所以个人习惯加上`--all``--decorate``--graph`这3个参数：\n\n`git log --all --decorate --graph`\n\n出来的log是这样色儿的：\n\n![git_log](../assets/images/posts/git/git_log.jpg)\n\n`git log`平时是和`git status`一样最常用的命令，毕竟强迫症，需要不断通过这两个命令找到安全感。。。\n\n**THE END**","source":"_posts/git-n-operations.md","raw":"---\ntitle: Git最常用的n个操作\ndate: 2016-10-22 14:00\ntags:\n- tech\n---\n\n![git_draft](../assets/images/posts/git/git_draft.jpg)\n\n上面这张图是我最开始学Git，按照自己的理解画出来的，可能会有问题，但总体问题不大。\n\n其实Git是个非常复杂的系统，很多细节的特性，平时用到的不多，我也不太清楚，这篇文章只说我日常开发中最常用的操作。\n\n## git clone\n\n### 作用\n\n> 将远程仓库中的项目下载到本地仓库\n\n### 用法\n\n在浏览器中打开github或公司的gitlab，进入项目，复制项目的git地址（如果公司的gitlab不支持SSH，因此请注意选择HTTPS的地址）\n\n![](../assets/images/posts/git/clone.jpg)\n\n进入到工作目录（通常我们会把各个项目放在同一个文件夹，例如workingDir啥的，当然，你可以在任意目录做git操作），敲下命令\n\n`git clone https://github.com/rodickmini/taptempo.git`\n\n这个操作会把taptempo项目下载到workingDir下的taptempo目录，如果你不想使用taptempo这个目录名，可以指定一个目录名，比如taptempo2\n\n`git clone https://github.com/rodickmini/taptempo.git taptempo2`\n\n## git checkout\n\n### 作用\n\n> 切换分支或将修改的文件恢复\n\n### 用法\n\n`clone`下代码后，代码默认会在`master`分支，我们需要把代码切换到一个自己的分支，这样的话，我们随便怎样修改，怎样提交，都不会影响到`master`或其它分支。\n\n`git checkout -b feature-test`\n\n这个时候，`feature-test`分支和`master`分支的代码是完全一样的，但是此后，你做的所有修改都不会影响`master`分支，只会在`feature-test`分支上往下进行。\n\n## git status\n\n### 作用\n\n> 显示当前工作目录的文件状态\n\n### 用法\n\n`git status`\n\n![git_status](../assets/images/posts/git/git_status.png)\n\n- Changes to be committed列出了已经add了还没有commit的文件\n- Changes not staged for commit列出了修改了，但还没有add的文件\n- Untracked files列出了新加入的，还没有被git管理起来的文件\n\n**经常敲一敲这个命令，可以让你对当前git的状态了如指掌！**\n\n## git add\n\n### 作用\n\n> 将一个普通文件交给git管理或者将修改过的文件添加到git的索引库中。当我们使用`git commit`时，git将依据索引库中的内容来进行文件的提交。\n\n### 用法\n\n`git add index.html`\n\n如果我们一次修改比较多的文件，需要把所有修改的文件都添加到索引库，可以使用：\n\n`git add --all`\n\n如果我们误把一个文件添加进了索引库，可以使用以下命令将其“拉回”暂存区：\n\n`git reset HEAD index.html`\n\n如果我们想把一个文件恢复成修改前的状态，可以使用以下命令，就撤销了我们所有的修改：\n\n`git checkout index.html`\n\n**但是，执行这个命令要慎重哦！一旦执行，你的所有修改都找不回来啦！**\n\n所以，最好在执行之前，先看一下这次修改了那些东西，那么就需要使用git diff命令：\n\n`git diff index.html`\n\n![git_diff](../assets/images/posts/git/git_diff.png)\n\n`git diff` 命令会调出一个类似于vi的文本编辑器（只读），里面红色的部分说明你删除了`<h1>catch the beat</h1>`这一行，绿色的部分说明你添加了`display: block;`这一行。看完了，按`q`键就可以退出啦~\n\n经过上面这几步“折腾”，你就可以信心十足地决定把哪些文件add进索引库，哪些只是手贱现在要放弃修改的！\n\n## git commit\n\n### 作用\n\n> 将所有添加到索引库的文件提交到本地仓库\n\n终于要commit了！为什么commit这么重要？\n\n因为一旦commit了之后，就会在git中形成一个历史版本，以后不管走到天涯海角，你都可以像乘坐时光机一样找到当年在村口老槐树下埋下的那颗玻璃球，哦不，是找到当年在git里提交的那次变动。\n\ncommit操作也是考验一个开发者职业素养的试金石，老司机搂一眼commit message就知道他有没有搞清楚js的闭包和原型链。。。\n\n### 用法\n\n最简单的commit操作如下：\n\n`git commit -m \"upd\"`\n\n当然，这样commit肯定永远成不了老司机哒！\n\n你看到了，`commit`操作要写一个`commit message`，可以在行内用`-m`参数直接写，一些简单的修改可以这么做，但千万别像我一样，光溜溜写个没营养的upd，稍微好一点的写法呢是想这样的：\n\n> `git commit -m \"upd 修改了首页的表格样式，避免字数多了在一行内显示不下\"`<br>\n> 或者<br>\n> `git commit -m \"add package.json 引入node包管理，方便安装node依赖\"`<br>\n> 或者<br>\n> `git commit -m \"del npm-debug.log日志文件，避免污染git仓库\"`\n\n所以`commit message`主要要说3件事：\n\n1. 是upd（更新）、add（添加）还是del（删除）操作\n2. 操作了什么文件（或者什么内容）\n3. 为什么要做这个操作（或者能够解决什么bug，解决什么问题）\n\n另外如果做了比较重大的提交，一句两句说不完，那么就不能再一行之内解决了，这时候需要用到更高级、更规范的`commit message`写法：\n\n`git commit`\n\n啥？我读书少你不要骗我！最高级的命令怎么是最短的？！别急，往下看~此时git又会调出我们的老朋友`vi`编辑器：\n\n将输入法调到英文状态，按下`Shift+G`再按`o`键，`vi`将在文件最后一行待命，此时就可以输入详细的commit message啦~\n\n![git_diff](../assets/images/posts/git/git_commit.png)\n\n注意，commit message要注意及时换行，不要超过开头注释部分的宽度。\n\ncommit message在某些系统里面可以被转化成email，所以格式类似于email，第一行是主题，空一行，后面的是正文。\n\n写完之后，按10次`ESC`键，输入`:wq`即可退出`vi`编辑器，commit操作完成！深藏功与名！\n\n**当然，以上所说关于commit的注意事项都是我瞎说的。。。操作过程中出现任何问题，本人概不负责！**\n\n## git push\n\n### 作用\n\n> 将本地仓库的修改推送到远程仓库\n\n### 用法\n\n`git push origin feature-test`\n\n如果不push，协作的小伙伴们将永远不知道你关起门来做了什么伤天害理的事儿，所以，当我们做完功能后，要记得使用`git push`将自己的改动推送到远程代码仓库。\n\n如果远程仓库当前没有`feature-test`这个分支，将会新建分支。\n\n## git fetch\n\n### 作用\n\n> 将远程代码仓库的代码下载到本地\n\n### 用法\n\n本地仓库维护这一堆“remote-tracking branches”，翻译过来叫“远程跟踪分支”，对应着本地仓库里`remote/master` `remote/develop`这些分支。\n\nfetch操作后，远程跟踪分支就和远程代码仓库里的相应分支代码保持一致了~\n\n`git fetch`\n\n`fetch`操作默认只会fetch`origin`仓库的分支，如果要fetch其它仓库的分支，需要在后面加上仓库名：\n\n`git fetch repo-caiyou`\n\n通常，我们的feature分支在完成使命后会被管理员删除掉，而我们各自的本地却不知道，硬盘空间吃紧。所以，如果我们想在管理员删除了远端的某些分支的时候，将自己本地对应的“远程跟踪分支”删除掉，需要在fetch操作时加一个`-p`参数：\n\n`git fetch -p`\n\n## git merge\n\n### 作用\n\n> 将一个或多个分支合并到当前所在分支\n\n### 用法\n\n比如我们当前在`develop`分支上，`git fetch`之后，我们把远程代码仓库中的`develop`分支下载到了本地仓库，但是并没有`merge`到我们当前工作的`develop`分支里，看`log`的话，我们会发现我们本地的`develop`分支和`remote/develop`分支还差了老远~因此需要进行如下操作：\n\n`git merge origin/develop`\n\n这样，`develop`分支就和`remote/develop`分支一样了。\n\n`git merge`操作通常还用在别的一些场景中，比如，我们的同事在`feature-x`分支上做好了某个业务，此时，需要将`feature-x`分支合并到`develop`分支，便于在测试环境上线，就需要先切换到`develop`分支：\n\n`git checkout develop`\n\n再将`feature-x`分支merge到`develop`分支：\n\n`git merge feature-x`\n\n当然，如果是比较大的变更，或是涉及到比较重要的文件时，这类业务上的merge操作建议在github上使用`pull-request`，或是gitlab系统里的`merge-request`，贸然merge产生大量冲突会很蛋疼的哦~\n\n## git pull\n\n### 作用\n\n> 将远程代码仓库里的代码下载下来并自动合并到当前工作的分支\n\n### 用法\n\n`git pull`\n\n不负责任地讲，`git pull`基本上等于`git fetch` + `git merge FETCH_HEAD`，但是，`git pull`操作无法看清中间的代码差异和合并的逻辑（其实是我不太清楚啊。。。），曾经踩过坑，代码合并出问题，所以我个人不会直接使用`git pull`这个操作，毕竟，耿直boy们更喜欢手动挡嘛~\n\n## git log\n\n### 作用\n\n> 查看代码提交日志\n\n### 用法\n\n`git log`\n\n会显示最基本的log信息，但是不直观，不能看清分支之间的分叉、合并、前因后果，所以个人习惯加上`--all``--decorate``--graph`这3个参数：\n\n`git log --all --decorate --graph`\n\n出来的log是这样色儿的：\n\n![git_log](../assets/images/posts/git/git_log.jpg)\n\n`git log`平时是和`git status`一样最常用的命令，毕竟强迫症，需要不断通过这两个命令找到安全感。。。\n\n**THE END**","slug":"git-n-operations","published":1,"updated":"2024-10-22T07:03:51.634Z","_id":"cm2k3npmi0021i80471i238iv","comments":1,"layout":"post","photos":[],"link":"","content":"<p><img src=\"../assets/images/posts/git/git_draft.jpg\" alt=\"git_draft\" /></p>\n<p>上面这张图是我最开始学Git，按照自己的理解画出来的，可能会有问题，但总体问题不大。</p>\n<p>其实Git是个非常复杂的系统，很多细节的特性，平时用到的不多，我也不太清楚，这篇文章只说我日常开发中最常用的操作。</p>\n<h2 id=\"git-clone\"><a class=\"markdownIt-Anchor\" href=\"#git-clone\"></a> git clone</h2>\n<h3 id=\"作用\"><a class=\"markdownIt-Anchor\" href=\"#作用\"></a> 作用</h3>\n<blockquote>\n<p>将远程仓库中的项目下载到本地仓库</p>\n</blockquote>\n<h3 id=\"用法\"><a class=\"markdownIt-Anchor\" href=\"#用法\"></a> 用法</h3>\n<p>在浏览器中打开github或公司的gitlab，进入项目，复制项目的git地址（如果公司的gitlab不支持SSH，因此请注意选择HTTPS的地址）</p>\n<p><img src=\"../assets/images/posts/git/clone.jpg\" alt=\"\" /></p>\n<p>进入到工作目录（通常我们会把各个项目放在同一个文件夹，例如workingDir啥的，当然，你可以在任意目录做git操作），敲下命令</p>\n<p><code>git clone https://github.com/rodickmini/taptempo.git</code></p>\n<p>这个操作会把taptempo项目下载到workingDir下的taptempo目录，如果你不想使用taptempo这个目录名，可以指定一个目录名，比如taptempo2</p>\n<p><code>git clone https://github.com/rodickmini/taptempo.git taptempo2</code></p>\n<h2 id=\"git-checkout\"><a class=\"markdownIt-Anchor\" href=\"#git-checkout\"></a> git checkout</h2>\n<h3 id=\"作用-2\"><a class=\"markdownIt-Anchor\" href=\"#作用-2\"></a> 作用</h3>\n<blockquote>\n<p>切换分支或将修改的文件恢复</p>\n</blockquote>\n<h3 id=\"用法-2\"><a class=\"markdownIt-Anchor\" href=\"#用法-2\"></a> 用法</h3>\n<p><code>clone</code>下代码后，代码默认会在<code>master</code>分支，我们需要把代码切换到一个自己的分支，这样的话，我们随便怎样修改，怎样提交，都不会影响到<code>master</code>或其它分支。</p>\n<p><code>git checkout -b feature-test</code></p>\n<p>这个时候，<code>feature-test</code>分支和<code>master</code>分支的代码是完全一样的，但是此后，你做的所有修改都不会影响<code>master</code>分支，只会在<code>feature-test</code>分支上往下进行。</p>\n<h2 id=\"git-status\"><a class=\"markdownIt-Anchor\" href=\"#git-status\"></a> git status</h2>\n<h3 id=\"作用-3\"><a class=\"markdownIt-Anchor\" href=\"#作用-3\"></a> 作用</h3>\n<blockquote>\n<p>显示当前工作目录的文件状态</p>\n</blockquote>\n<h3 id=\"用法-3\"><a class=\"markdownIt-Anchor\" href=\"#用法-3\"></a> 用法</h3>\n<p><code>git status</code></p>\n<p><img src=\"../assets/images/posts/git/git_status.png\" alt=\"git_status\" /></p>\n<ul>\n<li>Changes to be committed列出了已经add了还没有commit的文件</li>\n<li>Changes not staged for commit列出了修改了，但还没有add的文件</li>\n<li>Untracked files列出了新加入的，还没有被git管理起来的文件</li>\n</ul>\n<p><strong>经常敲一敲这个命令，可以让你对当前git的状态了如指掌！</strong></p>\n<h2 id=\"git-add\"><a class=\"markdownIt-Anchor\" href=\"#git-add\"></a> git add</h2>\n<h3 id=\"作用-4\"><a class=\"markdownIt-Anchor\" href=\"#作用-4\"></a> 作用</h3>\n<blockquote>\n<p>将一个普通文件交给git管理或者将修改过的文件添加到git的索引库中。当我们使用<code>git commit</code>时，git将依据索引库中的内容来进行文件的提交。</p>\n</blockquote>\n<h3 id=\"用法-4\"><a class=\"markdownIt-Anchor\" href=\"#用法-4\"></a> 用法</h3>\n<p><code>git add index.html</code></p>\n<p>如果我们一次修改比较多的文件，需要把所有修改的文件都添加到索引库，可以使用：</p>\n<p><code>git add --all</code></p>\n<p>如果我们误把一个文件添加进了索引库，可以使用以下命令将其“拉回”暂存区：</p>\n<p><code>git reset HEAD index.html</code></p>\n<p>如果我们想把一个文件恢复成修改前的状态，可以使用以下命令，就撤销了我们所有的修改：</p>\n<p><code>git checkout index.html</code></p>\n<p><strong>但是，执行这个命令要慎重哦！一旦执行，你的所有修改都找不回来啦！</strong></p>\n<p>所以，最好在执行之前，先看一下这次修改了那些东西，那么就需要使用git diff命令：</p>\n<p><code>git diff index.html</code></p>\n<p><img src=\"../assets/images/posts/git/git_diff.png\" alt=\"git_diff\" /></p>\n<p><code>git diff</code> 命令会调出一个类似于vi的文本编辑器（只读），里面红色的部分说明你删除了<code>&lt;h1&gt;catch the beat&lt;/h1&gt;</code>这一行，绿色的部分说明你添加了<code>display: block;</code>这一行。看完了，按<code>q</code>键就可以退出啦~</p>\n<p>经过上面这几步“折腾”，你就可以信心十足地决定把哪些文件add进索引库，哪些只是手贱现在要放弃修改的！</p>\n<h2 id=\"git-commit\"><a class=\"markdownIt-Anchor\" href=\"#git-commit\"></a> git commit</h2>\n<h3 id=\"作用-5\"><a class=\"markdownIt-Anchor\" href=\"#作用-5\"></a> 作用</h3>\n<blockquote>\n<p>将所有添加到索引库的文件提交到本地仓库</p>\n</blockquote>\n<p>终于要commit了！为什么commit这么重要？</p>\n<p>因为一旦commit了之后，就会在git中形成一个历史版本，以后不管走到天涯海角，你都可以像乘坐时光机一样找到当年在村口老槐树下埋下的那颗玻璃球，哦不，是找到当年在git里提交的那次变动。</p>\n<p>commit操作也是考验一个开发者职业素养的试金石，老司机搂一眼commit message就知道他有没有搞清楚js的闭包和原型链。。。</p>\n<h3 id=\"用法-5\"><a class=\"markdownIt-Anchor\" href=\"#用法-5\"></a> 用法</h3>\n<p>最简单的commit操作如下：</p>\n<p><code>git commit -m &quot;upd&quot;</code></p>\n<p>当然，这样commit肯定永远成不了老司机哒！</p>\n<p>你看到了，<code>commit</code>操作要写一个<code>commit message</code>，可以在行内用<code>-m</code>参数直接写，一些简单的修改可以这么做，但千万别像我一样，光溜溜写个没营养的upd，稍微好一点的写法呢是想这样的：</p>\n<blockquote>\n<p><code>git commit -m &quot;upd 修改了首页的表格样式，避免字数多了在一行内显示不下&quot;</code><br><br />\n或者<br><br />\n<code>git commit -m &quot;add package.json 引入node包管理，方便安装node依赖&quot;</code><br><br />\n或者<br><br />\n<code>git commit -m &quot;del npm-debug.log日志文件，避免污染git仓库&quot;</code></p>\n</blockquote>\n<p>所以<code>commit message</code>主要要说3件事：</p>\n<ol>\n<li>是upd（更新）、add（添加）还是del（删除）操作</li>\n<li>操作了什么文件（或者什么内容）</li>\n<li>为什么要做这个操作（或者能够解决什么bug，解决什么问题）</li>\n</ol>\n<p>另外如果做了比较重大的提交，一句两句说不完，那么就不能再一行之内解决了，这时候需要用到更高级、更规范的<code>commit message</code>写法：</p>\n<p><code>git commit</code></p>\n<p>啥？我读书少你不要骗我！最高级的命令怎么是最短的？！别急，往下看~此时git又会调出我们的老朋友<code>vi</code>编辑器：</p>\n<p>将输入法调到英文状态，按下<code>Shift+G</code>再按<code>o</code>键，<code>vi</code>将在文件最后一行待命，此时就可以输入详细的commit message啦~</p>\n<p><img src=\"../assets/images/posts/git/git_commit.png\" alt=\"git_diff\" /></p>\n<p>注意，commit message要注意及时换行，不要超过开头注释部分的宽度。</p>\n<p>commit message在某些系统里面可以被转化成email，所以格式类似于email，第一行是主题，空一行，后面的是正文。</p>\n<p>写完之后，按10次<code>ESC</code>键，输入<code>:wq</code>即可退出<code>vi</code>编辑器，commit操作完成！深藏功与名！</p>\n<p><strong>当然，以上所说关于commit的注意事项都是我瞎说的。。。操作过程中出现任何问题，本人概不负责！</strong></p>\n<h2 id=\"git-push\"><a class=\"markdownIt-Anchor\" href=\"#git-push\"></a> git push</h2>\n<h3 id=\"作用-6\"><a class=\"markdownIt-Anchor\" href=\"#作用-6\"></a> 作用</h3>\n<blockquote>\n<p>将本地仓库的修改推送到远程仓库</p>\n</blockquote>\n<h3 id=\"用法-6\"><a class=\"markdownIt-Anchor\" href=\"#用法-6\"></a> 用法</h3>\n<p><code>git push origin feature-test</code></p>\n<p>如果不push，协作的小伙伴们将永远不知道你关起门来做了什么伤天害理的事儿，所以，当我们做完功能后，要记得使用<code>git push</code>将自己的改动推送到远程代码仓库。</p>\n<p>如果远程仓库当前没有<code>feature-test</code>这个分支，将会新建分支。</p>\n<h2 id=\"git-fetch\"><a class=\"markdownIt-Anchor\" href=\"#git-fetch\"></a> git fetch</h2>\n<h3 id=\"作用-7\"><a class=\"markdownIt-Anchor\" href=\"#作用-7\"></a> 作用</h3>\n<blockquote>\n<p>将远程代码仓库的代码下载到本地</p>\n</blockquote>\n<h3 id=\"用法-7\"><a class=\"markdownIt-Anchor\" href=\"#用法-7\"></a> 用法</h3>\n<p>本地仓库维护这一堆“remote-tracking branches”，翻译过来叫“远程跟踪分支”，对应着本地仓库里<code>remote/master</code> <code>remote/develop</code>这些分支。</p>\n<p>fetch操作后，远程跟踪分支就和远程代码仓库里的相应分支代码保持一致了~</p>\n<p><code>git fetch</code></p>\n<p><code>fetch</code>操作默认只会fetch<code>origin</code>仓库的分支，如果要fetch其它仓库的分支，需要在后面加上仓库名：</p>\n<p><code>git fetch repo-caiyou</code></p>\n<p>通常，我们的feature分支在完成使命后会被管理员删除掉，而我们各自的本地却不知道，硬盘空间吃紧。所以，如果我们想在管理员删除了远端的某些分支的时候，将自己本地对应的“远程跟踪分支”删除掉，需要在fetch操作时加一个<code>-p</code>参数：</p>\n<p><code>git fetch -p</code></p>\n<h2 id=\"git-merge\"><a class=\"markdownIt-Anchor\" href=\"#git-merge\"></a> git merge</h2>\n<h3 id=\"作用-8\"><a class=\"markdownIt-Anchor\" href=\"#作用-8\"></a> 作用</h3>\n<blockquote>\n<p>将一个或多个分支合并到当前所在分支</p>\n</blockquote>\n<h3 id=\"用法-8\"><a class=\"markdownIt-Anchor\" href=\"#用法-8\"></a> 用法</h3>\n<p>比如我们当前在<code>develop</code>分支上，<code>git fetch</code>之后，我们把远程代码仓库中的<code>develop</code>分支下载到了本地仓库，但是并没有<code>merge</code>到我们当前工作的<code>develop</code>分支里，看<code>log</code>的话，我们会发现我们本地的<code>develop</code>分支和<code>remote/develop</code>分支还差了老远~因此需要进行如下操作：</p>\n<p><code>git merge origin/develop</code></p>\n<p>这样，<code>develop</code>分支就和<code>remote/develop</code>分支一样了。</p>\n<p><code>git merge</code>操作通常还用在别的一些场景中，比如，我们的同事在<code>feature-x</code>分支上做好了某个业务，此时，需要将<code>feature-x</code>分支合并到<code>develop</code>分支，便于在测试环境上线，就需要先切换到<code>develop</code>分支：</p>\n<p><code>git checkout develop</code></p>\n<p>再将<code>feature-x</code>分支merge到<code>develop</code>分支：</p>\n<p><code>git merge feature-x</code></p>\n<p>当然，如果是比较大的变更，或是涉及到比较重要的文件时，这类业务上的merge操作建议在github上使用<code>pull-request</code>，或是gitlab系统里的<code>merge-request</code>，贸然merge产生大量冲突会很蛋疼的哦~</p>\n<h2 id=\"git-pull\"><a class=\"markdownIt-Anchor\" href=\"#git-pull\"></a> git pull</h2>\n<h3 id=\"作用-9\"><a class=\"markdownIt-Anchor\" href=\"#作用-9\"></a> 作用</h3>\n<blockquote>\n<p>将远程代码仓库里的代码下载下来并自动合并到当前工作的分支</p>\n</blockquote>\n<h3 id=\"用法-9\"><a class=\"markdownIt-Anchor\" href=\"#用法-9\"></a> 用法</h3>\n<p><code>git pull</code></p>\n<p>不负责任地讲，<code>git pull</code>基本上等于<code>git fetch</code> + <code>git merge FETCH_HEAD</code>，但是，<code>git pull</code>操作无法看清中间的代码差异和合并的逻辑（其实是我不太清楚啊。。。），曾经踩过坑，代码合并出问题，所以我个人不会直接使用<code>git pull</code>这个操作，毕竟，耿直boy们更喜欢手动挡嘛~</p>\n<h2 id=\"git-log\"><a class=\"markdownIt-Anchor\" href=\"#git-log\"></a> git log</h2>\n<h3 id=\"作用-10\"><a class=\"markdownIt-Anchor\" href=\"#作用-10\"></a> 作用</h3>\n<blockquote>\n<p>查看代码提交日志</p>\n</blockquote>\n<h3 id=\"用法-10\"><a class=\"markdownIt-Anchor\" href=\"#用法-10\"></a> 用法</h3>\n<p><code>git log</code></p>\n<p>会显示最基本的log信息，但是不直观，不能看清分支之间的分叉、合并、前因后果，所以个人习惯加上<code>--all``--decorate``--graph</code>这3个参数：</p>\n<p><code>git log --all --decorate --graph</code></p>\n<p>出来的log是这样色儿的：</p>\n<p><img src=\"../assets/images/posts/git/git_log.jpg\" alt=\"git_log\" /></p>\n<p><code>git log</code>平时是和<code>git status</code>一样最常用的命令，毕竟强迫症，需要不断通过这两个命令找到安全感。。。</p>\n<p><strong>THE END</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"../assets/images/posts/git/git_draft.jpg\" alt=\"git_draft\" /></p>\n<p>上面这张图是我最开始学Git，按照自己的理解画出来的，可能会有问题，但总体问题不大。</p>\n<p>其实Git是个非常复杂的系统，很多细节的特性，平时用到的不多，我也不太清楚，这篇文章只说我日常开发中最常用的操作。</p>\n<h2 id=\"git-clone\"><a class=\"markdownIt-Anchor\" href=\"#git-clone\"></a> git clone</h2>\n<h3 id=\"作用\"><a class=\"markdownIt-Anchor\" href=\"#作用\"></a> 作用</h3>\n<blockquote>\n<p>将远程仓库中的项目下载到本地仓库</p>\n</blockquote>\n<h3 id=\"用法\"><a class=\"markdownIt-Anchor\" href=\"#用法\"></a> 用法</h3>\n<p>在浏览器中打开github或公司的gitlab，进入项目，复制项目的git地址（如果公司的gitlab不支持SSH，因此请注意选择HTTPS的地址）</p>\n<p><img src=\"../assets/images/posts/git/clone.jpg\" alt=\"\" /></p>\n<p>进入到工作目录（通常我们会把各个项目放在同一个文件夹，例如workingDir啥的，当然，你可以在任意目录做git操作），敲下命令</p>\n<p><code>git clone https://github.com/rodickmini/taptempo.git</code></p>\n<p>这个操作会把taptempo项目下载到workingDir下的taptempo目录，如果你不想使用taptempo这个目录名，可以指定一个目录名，比如taptempo2</p>\n<p><code>git clone https://github.com/rodickmini/taptempo.git taptempo2</code></p>\n<h2 id=\"git-checkout\"><a class=\"markdownIt-Anchor\" href=\"#git-checkout\"></a> git checkout</h2>\n<h3 id=\"作用-2\"><a class=\"markdownIt-Anchor\" href=\"#作用-2\"></a> 作用</h3>\n<blockquote>\n<p>切换分支或将修改的文件恢复</p>\n</blockquote>\n<h3 id=\"用法-2\"><a class=\"markdownIt-Anchor\" href=\"#用法-2\"></a> 用法</h3>\n<p><code>clone</code>下代码后，代码默认会在<code>master</code>分支，我们需要把代码切换到一个自己的分支，这样的话，我们随便怎样修改，怎样提交，都不会影响到<code>master</code>或其它分支。</p>\n<p><code>git checkout -b feature-test</code></p>\n<p>这个时候，<code>feature-test</code>分支和<code>master</code>分支的代码是完全一样的，但是此后，你做的所有修改都不会影响<code>master</code>分支，只会在<code>feature-test</code>分支上往下进行。</p>\n<h2 id=\"git-status\"><a class=\"markdownIt-Anchor\" href=\"#git-status\"></a> git status</h2>\n<h3 id=\"作用-3\"><a class=\"markdownIt-Anchor\" href=\"#作用-3\"></a> 作用</h3>\n<blockquote>\n<p>显示当前工作目录的文件状态</p>\n</blockquote>\n<h3 id=\"用法-3\"><a class=\"markdownIt-Anchor\" href=\"#用法-3\"></a> 用法</h3>\n<p><code>git status</code></p>\n<p><img src=\"../assets/images/posts/git/git_status.png\" alt=\"git_status\" /></p>\n<ul>\n<li>Changes to be committed列出了已经add了还没有commit的文件</li>\n<li>Changes not staged for commit列出了修改了，但还没有add的文件</li>\n<li>Untracked files列出了新加入的，还没有被git管理起来的文件</li>\n</ul>\n<p><strong>经常敲一敲这个命令，可以让你对当前git的状态了如指掌！</strong></p>\n<h2 id=\"git-add\"><a class=\"markdownIt-Anchor\" href=\"#git-add\"></a> git add</h2>\n<h3 id=\"作用-4\"><a class=\"markdownIt-Anchor\" href=\"#作用-4\"></a> 作用</h3>\n<blockquote>\n<p>将一个普通文件交给git管理或者将修改过的文件添加到git的索引库中。当我们使用<code>git commit</code>时，git将依据索引库中的内容来进行文件的提交。</p>\n</blockquote>\n<h3 id=\"用法-4\"><a class=\"markdownIt-Anchor\" href=\"#用法-4\"></a> 用法</h3>\n<p><code>git add index.html</code></p>\n<p>如果我们一次修改比较多的文件，需要把所有修改的文件都添加到索引库，可以使用：</p>\n<p><code>git add --all</code></p>\n<p>如果我们误把一个文件添加进了索引库，可以使用以下命令将其“拉回”暂存区：</p>\n<p><code>git reset HEAD index.html</code></p>\n<p>如果我们想把一个文件恢复成修改前的状态，可以使用以下命令，就撤销了我们所有的修改：</p>\n<p><code>git checkout index.html</code></p>\n<p><strong>但是，执行这个命令要慎重哦！一旦执行，你的所有修改都找不回来啦！</strong></p>\n<p>所以，最好在执行之前，先看一下这次修改了那些东西，那么就需要使用git diff命令：</p>\n<p><code>git diff index.html</code></p>\n<p><img src=\"../assets/images/posts/git/git_diff.png\" alt=\"git_diff\" /></p>\n<p><code>git diff</code> 命令会调出一个类似于vi的文本编辑器（只读），里面红色的部分说明你删除了<code>&lt;h1&gt;catch the beat&lt;/h1&gt;</code>这一行，绿色的部分说明你添加了<code>display: block;</code>这一行。看完了，按<code>q</code>键就可以退出啦~</p>\n<p>经过上面这几步“折腾”，你就可以信心十足地决定把哪些文件add进索引库，哪些只是手贱现在要放弃修改的！</p>\n<h2 id=\"git-commit\"><a class=\"markdownIt-Anchor\" href=\"#git-commit\"></a> git commit</h2>\n<h3 id=\"作用-5\"><a class=\"markdownIt-Anchor\" href=\"#作用-5\"></a> 作用</h3>\n<blockquote>\n<p>将所有添加到索引库的文件提交到本地仓库</p>\n</blockquote>\n<p>终于要commit了！为什么commit这么重要？</p>\n<p>因为一旦commit了之后，就会在git中形成一个历史版本，以后不管走到天涯海角，你都可以像乘坐时光机一样找到当年在村口老槐树下埋下的那颗玻璃球，哦不，是找到当年在git里提交的那次变动。</p>\n<p>commit操作也是考验一个开发者职业素养的试金石，老司机搂一眼commit message就知道他有没有搞清楚js的闭包和原型链。。。</p>\n<h3 id=\"用法-5\"><a class=\"markdownIt-Anchor\" href=\"#用法-5\"></a> 用法</h3>\n<p>最简单的commit操作如下：</p>\n<p><code>git commit -m &quot;upd&quot;</code></p>\n<p>当然，这样commit肯定永远成不了老司机哒！</p>\n<p>你看到了，<code>commit</code>操作要写一个<code>commit message</code>，可以在行内用<code>-m</code>参数直接写，一些简单的修改可以这么做，但千万别像我一样，光溜溜写个没营养的upd，稍微好一点的写法呢是想这样的：</p>\n<blockquote>\n<p><code>git commit -m &quot;upd 修改了首页的表格样式，避免字数多了在一行内显示不下&quot;</code><br><br />\n或者<br><br />\n<code>git commit -m &quot;add package.json 引入node包管理，方便安装node依赖&quot;</code><br><br />\n或者<br><br />\n<code>git commit -m &quot;del npm-debug.log日志文件，避免污染git仓库&quot;</code></p>\n</blockquote>\n<p>所以<code>commit message</code>主要要说3件事：</p>\n<ol>\n<li>是upd（更新）、add（添加）还是del（删除）操作</li>\n<li>操作了什么文件（或者什么内容）</li>\n<li>为什么要做这个操作（或者能够解决什么bug，解决什么问题）</li>\n</ol>\n<p>另外如果做了比较重大的提交，一句两句说不完，那么就不能再一行之内解决了，这时候需要用到更高级、更规范的<code>commit message</code>写法：</p>\n<p><code>git commit</code></p>\n<p>啥？我读书少你不要骗我！最高级的命令怎么是最短的？！别急，往下看~此时git又会调出我们的老朋友<code>vi</code>编辑器：</p>\n<p>将输入法调到英文状态，按下<code>Shift+G</code>再按<code>o</code>键，<code>vi</code>将在文件最后一行待命，此时就可以输入详细的commit message啦~</p>\n<p><img src=\"../assets/images/posts/git/git_commit.png\" alt=\"git_diff\" /></p>\n<p>注意，commit message要注意及时换行，不要超过开头注释部分的宽度。</p>\n<p>commit message在某些系统里面可以被转化成email，所以格式类似于email，第一行是主题，空一行，后面的是正文。</p>\n<p>写完之后，按10次<code>ESC</code>键，输入<code>:wq</code>即可退出<code>vi</code>编辑器，commit操作完成！深藏功与名！</p>\n<p><strong>当然，以上所说关于commit的注意事项都是我瞎说的。。。操作过程中出现任何问题，本人概不负责！</strong></p>\n<h2 id=\"git-push\"><a class=\"markdownIt-Anchor\" href=\"#git-push\"></a> git push</h2>\n<h3 id=\"作用-6\"><a class=\"markdownIt-Anchor\" href=\"#作用-6\"></a> 作用</h3>\n<blockquote>\n<p>将本地仓库的修改推送到远程仓库</p>\n</blockquote>\n<h3 id=\"用法-6\"><a class=\"markdownIt-Anchor\" href=\"#用法-6\"></a> 用法</h3>\n<p><code>git push origin feature-test</code></p>\n<p>如果不push，协作的小伙伴们将永远不知道你关起门来做了什么伤天害理的事儿，所以，当我们做完功能后，要记得使用<code>git push</code>将自己的改动推送到远程代码仓库。</p>\n<p>如果远程仓库当前没有<code>feature-test</code>这个分支，将会新建分支。</p>\n<h2 id=\"git-fetch\"><a class=\"markdownIt-Anchor\" href=\"#git-fetch\"></a> git fetch</h2>\n<h3 id=\"作用-7\"><a class=\"markdownIt-Anchor\" href=\"#作用-7\"></a> 作用</h3>\n<blockquote>\n<p>将远程代码仓库的代码下载到本地</p>\n</blockquote>\n<h3 id=\"用法-7\"><a class=\"markdownIt-Anchor\" href=\"#用法-7\"></a> 用法</h3>\n<p>本地仓库维护这一堆“remote-tracking branches”，翻译过来叫“远程跟踪分支”，对应着本地仓库里<code>remote/master</code> <code>remote/develop</code>这些分支。</p>\n<p>fetch操作后，远程跟踪分支就和远程代码仓库里的相应分支代码保持一致了~</p>\n<p><code>git fetch</code></p>\n<p><code>fetch</code>操作默认只会fetch<code>origin</code>仓库的分支，如果要fetch其它仓库的分支，需要在后面加上仓库名：</p>\n<p><code>git fetch repo-caiyou</code></p>\n<p>通常，我们的feature分支在完成使命后会被管理员删除掉，而我们各自的本地却不知道，硬盘空间吃紧。所以，如果我们想在管理员删除了远端的某些分支的时候，将自己本地对应的“远程跟踪分支”删除掉，需要在fetch操作时加一个<code>-p</code>参数：</p>\n<p><code>git fetch -p</code></p>\n<h2 id=\"git-merge\"><a class=\"markdownIt-Anchor\" href=\"#git-merge\"></a> git merge</h2>\n<h3 id=\"作用-8\"><a class=\"markdownIt-Anchor\" href=\"#作用-8\"></a> 作用</h3>\n<blockquote>\n<p>将一个或多个分支合并到当前所在分支</p>\n</blockquote>\n<h3 id=\"用法-8\"><a class=\"markdownIt-Anchor\" href=\"#用法-8\"></a> 用法</h3>\n<p>比如我们当前在<code>develop</code>分支上，<code>git fetch</code>之后，我们把远程代码仓库中的<code>develop</code>分支下载到了本地仓库，但是并没有<code>merge</code>到我们当前工作的<code>develop</code>分支里，看<code>log</code>的话，我们会发现我们本地的<code>develop</code>分支和<code>remote/develop</code>分支还差了老远~因此需要进行如下操作：</p>\n<p><code>git merge origin/develop</code></p>\n<p>这样，<code>develop</code>分支就和<code>remote/develop</code>分支一样了。</p>\n<p><code>git merge</code>操作通常还用在别的一些场景中，比如，我们的同事在<code>feature-x</code>分支上做好了某个业务，此时，需要将<code>feature-x</code>分支合并到<code>develop</code>分支，便于在测试环境上线，就需要先切换到<code>develop</code>分支：</p>\n<p><code>git checkout develop</code></p>\n<p>再将<code>feature-x</code>分支merge到<code>develop</code>分支：</p>\n<p><code>git merge feature-x</code></p>\n<p>当然，如果是比较大的变更，或是涉及到比较重要的文件时，这类业务上的merge操作建议在github上使用<code>pull-request</code>，或是gitlab系统里的<code>merge-request</code>，贸然merge产生大量冲突会很蛋疼的哦~</p>\n<h2 id=\"git-pull\"><a class=\"markdownIt-Anchor\" href=\"#git-pull\"></a> git pull</h2>\n<h3 id=\"作用-9\"><a class=\"markdownIt-Anchor\" href=\"#作用-9\"></a> 作用</h3>\n<blockquote>\n<p>将远程代码仓库里的代码下载下来并自动合并到当前工作的分支</p>\n</blockquote>\n<h3 id=\"用法-9\"><a class=\"markdownIt-Anchor\" href=\"#用法-9\"></a> 用法</h3>\n<p><code>git pull</code></p>\n<p>不负责任地讲，<code>git pull</code>基本上等于<code>git fetch</code> + <code>git merge FETCH_HEAD</code>，但是，<code>git pull</code>操作无法看清中间的代码差异和合并的逻辑（其实是我不太清楚啊。。。），曾经踩过坑，代码合并出问题，所以我个人不会直接使用<code>git pull</code>这个操作，毕竟，耿直boy们更喜欢手动挡嘛~</p>\n<h2 id=\"git-log\"><a class=\"markdownIt-Anchor\" href=\"#git-log\"></a> git log</h2>\n<h3 id=\"作用-10\"><a class=\"markdownIt-Anchor\" href=\"#作用-10\"></a> 作用</h3>\n<blockquote>\n<p>查看代码提交日志</p>\n</blockquote>\n<h3 id=\"用法-10\"><a class=\"markdownIt-Anchor\" href=\"#用法-10\"></a> 用法</h3>\n<p><code>git log</code></p>\n<p>会显示最基本的log信息，但是不直观，不能看清分支之间的分叉、合并、前因后果，所以个人习惯加上<code>--all``--decorate``--graph</code>这3个参数：</p>\n<p><code>git log --all --decorate --graph</code></p>\n<p>出来的log是这样色儿的：</p>\n<p><img src=\"../assets/images/posts/git/git_log.jpg\" alt=\"git_log\" /></p>\n<p><code>git log</code>平时是和<code>git status</code>一样最常用的命令，毕竟强迫症，需要不断通过这两个命令找到安全感。。。</p>\n<p><strong>THE END</strong></p>\n"},{"title":"语义化版本号（semver）解析","date":"2016-10-10T06:00:00.000Z","_content":"\n## 摘要\n\n版本格式：主版本号.次版本号.修订号，版本号递增规则如下：\n\n- 主版本号：当你做了不兼容的 API 修改\n- 次版本号：当你做了向下兼容的功能性新增\n- 修订号：当你做了向下兼容的问题修正\n\n先行版本号及版本编译信息可以加到“主版本号.次版本号.修订号”的后面，作为延伸\n\n## 简介\n\n在软件管理的领域里存在着被称作“依赖地狱”的死亡之谷，系统规模越大，加入的套件越多，你就越有可能在未来的某一天发现自己已深陷绝望之中。\n\n在依赖高的系统中发布新版本套件可能很快会成为恶梦。如果依赖关系过高，可能面临版本控制被锁死的风险（必须对每一个相依套件改版才能完成某次升级）。而如果依赖关系过于松散，又将无法避免版本的混乱（假设兼容于未来的多个版本已超出了合理数量）。当你专案的进展因为版本相依被锁死或版本混乱变得不够简便和可靠，就意味着你正处于依赖地狱之中。\n\n作为这个问题的解决方案之一，我提议用一组简单的规则及条件来约束版本号的配置和增长。这些规则是根据（但不局限于）已经被各种封闭、开放源码软件所广泛使用的惯例所设计。为了让这套理论运作，你必须先有定义好的公共 API 。这可以透过文件定义或代码强制要求来实现。无论如何，这套 API 的清楚明了是十分重要的。一旦你定义了公共 API，你就可以透过修改相应的版本号来向大家说明你的修改。考虑使用这样的版本号格式：XYZ （主版本号.次版本号.修订号）修复问题但不影响API 时，递增修订号；API 保持向下兼容的新增及修改时，递增次版本号；进行不向下兼容的修改时，递增主版本号。\n\n我称这套系统为“语义化的版本控制”，在这套约定下，版本号及其更新方式包含了相邻版本间的底层代码和修改内容的信息。\n\n## 语义化版本控制规范（SemVer）\n\n以下关键词 MUST、MUST NOT、REQUIRED、SHALL、SHALL NOT、SHOULD、SHOULD NOT、 RECOMMENDED、MAY、OPTIONAL 依照 RFC 2119 的叙述解读。（译注：为了保持语句顺畅， 以下文件遇到的关键词将依照整句语义进行翻译，在此先不进行个别翻译。）\n\n1. 使用语义化版本控制的软件“必须 MUST ”定义公共 API。该 API 可以在代码中被定义或出现于严谨的文件内。无论何种形式都应该力求精确且完整。\n\n2. 标准的版本号“必须 MUST ”采用 XYZ 的格式，其中 X、Y 和 Z 为非负的整数，且“禁止 MUST NOT”在数字前方补零。X 是主版本号、Y 是次版本号、而 Z 为修订号。每个元素“必须 MUST ”以数值来递增。例如：1.9.1 -> 1.10.0 -> 1.11.0。\n\n3. 标记版本号的软件发行后，“禁止 MUST NOT ”改变该版本软件的内容。任何修改都“必须 MUST ”以新版本发行。\n\n4. 主版本号为零（0.y.z）的软件处于开发初始阶段，一切都可能随时被改变。这样的公共 API 不应该被视为稳定版。\n\n5. 1.0.0 的版本号用于界定公共 API 的形成。这一版本之后所有的版本号更新都基于公共 API 及其修改内容。\n\n6. 修订号 Z（x.y.Z \\| x > 0）“必须 MUST ”在只做了向下兼容的修正时才递增。这里的修正指的是针对不正确结果而进行的内部修改。\n\n7. 次版本号 Y（x.Y.z \\| x > 0）“必须 MUST ”在有向下兼容的新功能出现时递增。在任何公共 API 的功能被标记为弃用时也“必须 MUST ”递增。也“可以 MAY ”在内部程序有大量新功能或改进被加入时递增，其中“可以 MAY ”包括修订级别的改变。每当次版本号递增时，修订号“必须 MUST ”归零。\n\n8. 主版本号 X（X.y.z \\| X > 0）“必须 MUST ”在有任何不兼容的修改被加入公共 API 时递增。其中“可以 MAY ”包括次版本号及修订级别的改变。每当主版本号递增时，次版本号和修订号“必须 MUST ”归零。\n\n9. 先行版本号“可以 MAY ”被标注在修订版之后，先加上一个连接号再加上一连串以句点分隔的标识符号来修饰。标识符号“必须 MUST ”由 ASCII 码的英数字和连接号 [0-9A-Za-z-] 组成，且“禁止 MUST NOT ”留白。数字型的标识符号“禁止 MUST NOT ”在前方补零。先行版的优先级低于相关联的标准版本。被标上先行版本号则表示这个版本并非稳定而且可能无法达到兼容的需求。范例：1.0.0-alpha、1.0.0-alpha.1、1.0.0-0.3.7、1.0.0-x.7.z.92。\n\n10. 版本编译信息“可以 MAY ”被标注在修订版或先行版本号之后，先加上一个加号再加上一连串以句点分隔的标识符号来修饰。标识符号“必须 MUST ”由 ASCII 的英数字和连接号 [0-9A-Za-z-] 组成，且“禁止 MUST NOT ”留白。当判断版本的优先层级时，版本编译信息“可 SHOULD ”被忽略。因此当两个版本只有在版本编译信息有差别时，属于相同的优先层级。范例：1.0.0-alpha+001、1.0.0+20130313144700、1.0.0-beta+exp.sha.5114f85。\n\n11. 版本的优先层级指的是不同版本在排序时如何比较。判断优先层级时，“必须 MUST ”把版本依序拆分为主版本号、次版本号、修订号及先行版本号后进行比较（版本编译信息不在这份比较的列表中）。由左到右依序比较每个标识符号，第一个差异值用来决定优先层级：主版本号、次版本号及修订号以数值比较，例如：1.0.0 < 2.0.0 < 2.1.0 < 2.1.1。当主版本号、次版本号及修订号都相同时，改以优先层级比较低的先行版本号决定。例如：1.0.0-alpha < 1.0.0。有相同主版本号、次版本号及修订号的两个先行版本号，其优先层级“必须 MUST ”透过由左到右的每个被句点分隔的标识符号来比较，直到找到一个差异值后决定：只有数字的标识符号以数值高低比较，有字母或连接号时则逐字以 ASCII 的排序来比较。数字的标识符号比非数字的标识符号优先层级低。若开头的标识符号都相同时，栏位比较多的先行版本号优先层级比较高。范例：1.0.0-alpha < 1.0.0-alpha.1 < 1.0.0-alpha.beta < 1.0.0-beta < 1.0.0-beta.2 < 1.0.0-beta.11 < 1.0.0- rc.1 < 1.0.0。\n\n## 为什么要使用语义化的版本控制？\n\n这并不是一个新的或者革命性的想法。实际上，你可能已经在做一些近似的事情了。问题在于只是“近似”还不够。如果没有某个正式的规范可循，版本号对于依赖的管理并无实质意义。将上述的想法命名并给予清楚的定义，让你对软件使用者传达意向变得容易。一旦这些意向变得清楚，弹性（但又不会太弹性）的依赖规范就能达成。\n\n举个简单的例子就可以展示语义化的版本控制如何让依赖地狱成为过去。假设有个名为“救火车”的函式库，它需要另一个名为“梯子”并已经有使用语义化版本控制的套件。当救火车创建时，梯子的版本号为 3.1.0。因为救火车使用了一些版本 3.1.0 所新增的功能， 你可以放心地指定相依于梯子的版本号大等于 3.1.0 但小于 4.0.0。这样，当梯子版本 3.1.1 和 3.2.0 发布时，你可以将直接它们纳入你的套件管理系统，因为它们能与原有相依的软件兼容。\n\n作为一位负责任的开发者，你理当确保每次套件升级的运作与版本号的表述一致。现实世界是复杂的，我们除了提高警觉外能做的不多。你所能做的就是让语义化的版本控制为你提供一个健全的方式来发行以及升级套件，而无需推出新的相依套件，节省你的时间及烦恼。\n\n如果你对此认同，希望立即开始使用语义化版本控制，你只需声明你的函式库正在使用它并遵循这些规则就可以了。请在你的 README 文件中保留此页连结，让别人也知道这些规则并从中受益。\n\n## FAQ\n\n#### 1. 在 0.y.z 初始开发阶段，我该如何进行版本控制？\n\n最简单的做法是以 0.1.0 作为你的初始化开发版本，并在后续的每次发行时递增次版本号。\n\n#### 2. 如何判断发布 1.0.0 版本的时机？\n\n当你的软件被用于正式环境，它应该已经达到了 1.0.0 版。如果你已经有个稳定的 API 被使用者依赖，也会是 1.0.0 版。如果你很担心向下兼容的问题，也应该算是 1.0.0 版了。\n\n#### 3. 这不会阻碍快速开发和迭代吗？\n\n主版本号为零的时候就是为了做快速开发。如果你每天都在改变 API，那么你应该仍在主版本号为零的阶段（0.y.z），或是正在下个主版本的独立开发分支中。\n\n#### 4. 对于公共 API，若即使是最小但不向下兼容的改变都需要产生新的主版本号，岂不是很快就达到 42.0.0 版？\n\n这是开发的责任感和前瞻性的问题。不兼容的改变不应该轻易被加入到有许多依赖代码的软件中。升级所付出的代价可能是巨大的。要递增主版本号来发行不兼容的改版，意味着你必须为这些改变所带来的影响深思熟虑，并且评估所涉及的成本及效益比。\n\n#### 5. 为整个公共 API 写文件太费事了！\n\n为供他人使用的软件编写适当的文件，是你作为一名专业开发者应尽的职责。保持专案高效一个非常重要的部份是掌控软件的复杂度，如果没有人知道如何使用你的软件或不知道哪些函数的调用是可靠的，要掌控复杂度会是困难的。长远来看，使用语义化版本控制以及对于公共 API 有良好规范的坚持，可以让每个人及每件事都运行顺畅。\n\n#### 6. 万一不小心把一个不兼容的改版当成了次版本号发行了该怎么办？\n\n一旦发现自己破坏了语义化版本控制的规范，就要修正这个问题，并发行一个新的次版本号来更正这个问题并且恢复向下兼容。即使是这种情况，也不能去修改已发行的版本。可以的话，将有问题的版本号记录到文件中，告诉使用者问题所在，让他们能够意识到这是有问题的版本。\n\n#### 7. 如果我更新了自己的依赖但没有改变公共 API 该怎么办？\n\n由于没有影响到公共 API，这可以被认定是兼容的。若某个软件和你的套件有共同依赖，则它会有自己的依赖规范，作者也会告知可能的冲突。要判断改版是属于修订等级或是次版等级，是依据你更新的依赖关系是为了修复问题或是加入新功能。对于后者，我经常会预期伴随着更多的代码，这显然会是一个次版本号级别的递增。\n\n#### 8. 如果我变更了公共 API 但无意中未遵循版本号的改动怎么办呢？（意即在修订等级的发布中，误将重大且不兼容的改变加到代码之中）\n\n自行做最佳的判断。如果你有庞大的使用者群在依照公共 API 的意图而变更行为后会大受影响，那么最好做一次主版本的发布，即使严格来说这个修复仅是修订等级的发布。记住， 语义化的版本控制就是透过版本号的改变来传达意义。若这些改变对你的使用者是重要的，那就透过版本号来向他们说明。\n\n#### 9. 我该如何处理即将弃用的功能？\n\n弃用现存的功能是软件开发中的家常便饭，也通常是向前发展所必须的。当你弃用部份公共 API 时，你应该做两件事：（1）更新你的文件让使用者知道这个改变，（2）在适当的时机将弃用的功能透过新的次版本号发布。在新的主版本完全移除弃用功能前，至少要有一个次版本包含这个弃用信息，这样使用者才能平顺地转移到新版 API。\n\n#### 10. 语义化版本对于版本的字串长度是否有限制呢？\n\n没有，请自行做适当的判断。举例来说，长到 255 个字元的版本已过度夸张。再者，特定的系统对于字串长度可能会有他们自己的限制。\n\n## 关于\n\n语义化版本控制的规范是由 Gravatars 创办者兼 GitHub 共同创办者 [Tom Preston-Werner](http://tom.preston-werner.com/) 所建立。\n\n如果您有任何建议，请到 [GitHub 上提出您的问题](https://github.com/mojombo/semver/issues)。\n","source":"_posts/semver.md","raw":"---\ntitle: 语义化版本号（semver）解析\ndate: 2016-10-10 14:00\ntags:\n- tech\n---\n\n## 摘要\n\n版本格式：主版本号.次版本号.修订号，版本号递增规则如下：\n\n- 主版本号：当你做了不兼容的 API 修改\n- 次版本号：当你做了向下兼容的功能性新增\n- 修订号：当你做了向下兼容的问题修正\n\n先行版本号及版本编译信息可以加到“主版本号.次版本号.修订号”的后面，作为延伸\n\n## 简介\n\n在软件管理的领域里存在着被称作“依赖地狱”的死亡之谷，系统规模越大，加入的套件越多，你就越有可能在未来的某一天发现自己已深陷绝望之中。\n\n在依赖高的系统中发布新版本套件可能很快会成为恶梦。如果依赖关系过高，可能面临版本控制被锁死的风险（必须对每一个相依套件改版才能完成某次升级）。而如果依赖关系过于松散，又将无法避免版本的混乱（假设兼容于未来的多个版本已超出了合理数量）。当你专案的进展因为版本相依被锁死或版本混乱变得不够简便和可靠，就意味着你正处于依赖地狱之中。\n\n作为这个问题的解决方案之一，我提议用一组简单的规则及条件来约束版本号的配置和增长。这些规则是根据（但不局限于）已经被各种封闭、开放源码软件所广泛使用的惯例所设计。为了让这套理论运作，你必须先有定义好的公共 API 。这可以透过文件定义或代码强制要求来实现。无论如何，这套 API 的清楚明了是十分重要的。一旦你定义了公共 API，你就可以透过修改相应的版本号来向大家说明你的修改。考虑使用这样的版本号格式：XYZ （主版本号.次版本号.修订号）修复问题但不影响API 时，递增修订号；API 保持向下兼容的新增及修改时，递增次版本号；进行不向下兼容的修改时，递增主版本号。\n\n我称这套系统为“语义化的版本控制”，在这套约定下，版本号及其更新方式包含了相邻版本间的底层代码和修改内容的信息。\n\n## 语义化版本控制规范（SemVer）\n\n以下关键词 MUST、MUST NOT、REQUIRED、SHALL、SHALL NOT、SHOULD、SHOULD NOT、 RECOMMENDED、MAY、OPTIONAL 依照 RFC 2119 的叙述解读。（译注：为了保持语句顺畅， 以下文件遇到的关键词将依照整句语义进行翻译，在此先不进行个别翻译。）\n\n1. 使用语义化版本控制的软件“必须 MUST ”定义公共 API。该 API 可以在代码中被定义或出现于严谨的文件内。无论何种形式都应该力求精确且完整。\n\n2. 标准的版本号“必须 MUST ”采用 XYZ 的格式，其中 X、Y 和 Z 为非负的整数，且“禁止 MUST NOT”在数字前方补零。X 是主版本号、Y 是次版本号、而 Z 为修订号。每个元素“必须 MUST ”以数值来递增。例如：1.9.1 -> 1.10.0 -> 1.11.0。\n\n3. 标记版本号的软件发行后，“禁止 MUST NOT ”改变该版本软件的内容。任何修改都“必须 MUST ”以新版本发行。\n\n4. 主版本号为零（0.y.z）的软件处于开发初始阶段，一切都可能随时被改变。这样的公共 API 不应该被视为稳定版。\n\n5. 1.0.0 的版本号用于界定公共 API 的形成。这一版本之后所有的版本号更新都基于公共 API 及其修改内容。\n\n6. 修订号 Z（x.y.Z \\| x > 0）“必须 MUST ”在只做了向下兼容的修正时才递增。这里的修正指的是针对不正确结果而进行的内部修改。\n\n7. 次版本号 Y（x.Y.z \\| x > 0）“必须 MUST ”在有向下兼容的新功能出现时递增。在任何公共 API 的功能被标记为弃用时也“必须 MUST ”递增。也“可以 MAY ”在内部程序有大量新功能或改进被加入时递增，其中“可以 MAY ”包括修订级别的改变。每当次版本号递增时，修订号“必须 MUST ”归零。\n\n8. 主版本号 X（X.y.z \\| X > 0）“必须 MUST ”在有任何不兼容的修改被加入公共 API 时递增。其中“可以 MAY ”包括次版本号及修订级别的改变。每当主版本号递增时，次版本号和修订号“必须 MUST ”归零。\n\n9. 先行版本号“可以 MAY ”被标注在修订版之后，先加上一个连接号再加上一连串以句点分隔的标识符号来修饰。标识符号“必须 MUST ”由 ASCII 码的英数字和连接号 [0-9A-Za-z-] 组成，且“禁止 MUST NOT ”留白。数字型的标识符号“禁止 MUST NOT ”在前方补零。先行版的优先级低于相关联的标准版本。被标上先行版本号则表示这个版本并非稳定而且可能无法达到兼容的需求。范例：1.0.0-alpha、1.0.0-alpha.1、1.0.0-0.3.7、1.0.0-x.7.z.92。\n\n10. 版本编译信息“可以 MAY ”被标注在修订版或先行版本号之后，先加上一个加号再加上一连串以句点分隔的标识符号来修饰。标识符号“必须 MUST ”由 ASCII 的英数字和连接号 [0-9A-Za-z-] 组成，且“禁止 MUST NOT ”留白。当判断版本的优先层级时，版本编译信息“可 SHOULD ”被忽略。因此当两个版本只有在版本编译信息有差别时，属于相同的优先层级。范例：1.0.0-alpha+001、1.0.0+20130313144700、1.0.0-beta+exp.sha.5114f85。\n\n11. 版本的优先层级指的是不同版本在排序时如何比较。判断优先层级时，“必须 MUST ”把版本依序拆分为主版本号、次版本号、修订号及先行版本号后进行比较（版本编译信息不在这份比较的列表中）。由左到右依序比较每个标识符号，第一个差异值用来决定优先层级：主版本号、次版本号及修订号以数值比较，例如：1.0.0 < 2.0.0 < 2.1.0 < 2.1.1。当主版本号、次版本号及修订号都相同时，改以优先层级比较低的先行版本号决定。例如：1.0.0-alpha < 1.0.0。有相同主版本号、次版本号及修订号的两个先行版本号，其优先层级“必须 MUST ”透过由左到右的每个被句点分隔的标识符号来比较，直到找到一个差异值后决定：只有数字的标识符号以数值高低比较，有字母或连接号时则逐字以 ASCII 的排序来比较。数字的标识符号比非数字的标识符号优先层级低。若开头的标识符号都相同时，栏位比较多的先行版本号优先层级比较高。范例：1.0.0-alpha < 1.0.0-alpha.1 < 1.0.0-alpha.beta < 1.0.0-beta < 1.0.0-beta.2 < 1.0.0-beta.11 < 1.0.0- rc.1 < 1.0.0。\n\n## 为什么要使用语义化的版本控制？\n\n这并不是一个新的或者革命性的想法。实际上，你可能已经在做一些近似的事情了。问题在于只是“近似”还不够。如果没有某个正式的规范可循，版本号对于依赖的管理并无实质意义。将上述的想法命名并给予清楚的定义，让你对软件使用者传达意向变得容易。一旦这些意向变得清楚，弹性（但又不会太弹性）的依赖规范就能达成。\n\n举个简单的例子就可以展示语义化的版本控制如何让依赖地狱成为过去。假设有个名为“救火车”的函式库，它需要另一个名为“梯子”并已经有使用语义化版本控制的套件。当救火车创建时，梯子的版本号为 3.1.0。因为救火车使用了一些版本 3.1.0 所新增的功能， 你可以放心地指定相依于梯子的版本号大等于 3.1.0 但小于 4.0.0。这样，当梯子版本 3.1.1 和 3.2.0 发布时，你可以将直接它们纳入你的套件管理系统，因为它们能与原有相依的软件兼容。\n\n作为一位负责任的开发者，你理当确保每次套件升级的运作与版本号的表述一致。现实世界是复杂的，我们除了提高警觉外能做的不多。你所能做的就是让语义化的版本控制为你提供一个健全的方式来发行以及升级套件，而无需推出新的相依套件，节省你的时间及烦恼。\n\n如果你对此认同，希望立即开始使用语义化版本控制，你只需声明你的函式库正在使用它并遵循这些规则就可以了。请在你的 README 文件中保留此页连结，让别人也知道这些规则并从中受益。\n\n## FAQ\n\n#### 1. 在 0.y.z 初始开发阶段，我该如何进行版本控制？\n\n最简单的做法是以 0.1.0 作为你的初始化开发版本，并在后续的每次发行时递增次版本号。\n\n#### 2. 如何判断发布 1.0.0 版本的时机？\n\n当你的软件被用于正式环境，它应该已经达到了 1.0.0 版。如果你已经有个稳定的 API 被使用者依赖，也会是 1.0.0 版。如果你很担心向下兼容的问题，也应该算是 1.0.0 版了。\n\n#### 3. 这不会阻碍快速开发和迭代吗？\n\n主版本号为零的时候就是为了做快速开发。如果你每天都在改变 API，那么你应该仍在主版本号为零的阶段（0.y.z），或是正在下个主版本的独立开发分支中。\n\n#### 4. 对于公共 API，若即使是最小但不向下兼容的改变都需要产生新的主版本号，岂不是很快就达到 42.0.0 版？\n\n这是开发的责任感和前瞻性的问题。不兼容的改变不应该轻易被加入到有许多依赖代码的软件中。升级所付出的代价可能是巨大的。要递增主版本号来发行不兼容的改版，意味着你必须为这些改变所带来的影响深思熟虑，并且评估所涉及的成本及效益比。\n\n#### 5. 为整个公共 API 写文件太费事了！\n\n为供他人使用的软件编写适当的文件，是你作为一名专业开发者应尽的职责。保持专案高效一个非常重要的部份是掌控软件的复杂度，如果没有人知道如何使用你的软件或不知道哪些函数的调用是可靠的，要掌控复杂度会是困难的。长远来看，使用语义化版本控制以及对于公共 API 有良好规范的坚持，可以让每个人及每件事都运行顺畅。\n\n#### 6. 万一不小心把一个不兼容的改版当成了次版本号发行了该怎么办？\n\n一旦发现自己破坏了语义化版本控制的规范，就要修正这个问题，并发行一个新的次版本号来更正这个问题并且恢复向下兼容。即使是这种情况，也不能去修改已发行的版本。可以的话，将有问题的版本号记录到文件中，告诉使用者问题所在，让他们能够意识到这是有问题的版本。\n\n#### 7. 如果我更新了自己的依赖但没有改变公共 API 该怎么办？\n\n由于没有影响到公共 API，这可以被认定是兼容的。若某个软件和你的套件有共同依赖，则它会有自己的依赖规范，作者也会告知可能的冲突。要判断改版是属于修订等级或是次版等级，是依据你更新的依赖关系是为了修复问题或是加入新功能。对于后者，我经常会预期伴随着更多的代码，这显然会是一个次版本号级别的递增。\n\n#### 8. 如果我变更了公共 API 但无意中未遵循版本号的改动怎么办呢？（意即在修订等级的发布中，误将重大且不兼容的改变加到代码之中）\n\n自行做最佳的判断。如果你有庞大的使用者群在依照公共 API 的意图而变更行为后会大受影响，那么最好做一次主版本的发布，即使严格来说这个修复仅是修订等级的发布。记住， 语义化的版本控制就是透过版本号的改变来传达意义。若这些改变对你的使用者是重要的，那就透过版本号来向他们说明。\n\n#### 9. 我该如何处理即将弃用的功能？\n\n弃用现存的功能是软件开发中的家常便饭，也通常是向前发展所必须的。当你弃用部份公共 API 时，你应该做两件事：（1）更新你的文件让使用者知道这个改变，（2）在适当的时机将弃用的功能透过新的次版本号发布。在新的主版本完全移除弃用功能前，至少要有一个次版本包含这个弃用信息，这样使用者才能平顺地转移到新版 API。\n\n#### 10. 语义化版本对于版本的字串长度是否有限制呢？\n\n没有，请自行做适当的判断。举例来说，长到 255 个字元的版本已过度夸张。再者，特定的系统对于字串长度可能会有他们自己的限制。\n\n## 关于\n\n语义化版本控制的规范是由 Gravatars 创办者兼 GitHub 共同创办者 [Tom Preston-Werner](http://tom.preston-werner.com/) 所建立。\n\n如果您有任何建议，请到 [GitHub 上提出您的问题](https://github.com/mojombo/semver/issues)。\n","slug":"semver","published":1,"updated":"2024-10-22T07:04:25.922Z","_id":"cm2k3ognz0024i80410tr78ki","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"摘要\"><a class=\"markdownIt-Anchor\" href=\"#摘要\"></a> 摘要</h2>\n<p>版本格式：主版本号.次版本号.修订号，版本号递增规则如下：</p>\n<ul>\n<li>主版本号：当你做了不兼容的 API 修改</li>\n<li>次版本号：当你做了向下兼容的功能性新增</li>\n<li>修订号：当你做了向下兼容的问题修正</li>\n</ul>\n<p>先行版本号及版本编译信息可以加到“主版本号.次版本号.修订号”的后面，作为延伸</p>\n<h2 id=\"简介\"><a class=\"markdownIt-Anchor\" href=\"#简介\"></a> 简介</h2>\n<p>在软件管理的领域里存在着被称作“依赖地狱”的死亡之谷，系统规模越大，加入的套件越多，你就越有可能在未来的某一天发现自己已深陷绝望之中。</p>\n<p>在依赖高的系统中发布新版本套件可能很快会成为恶梦。如果依赖关系过高，可能面临版本控制被锁死的风险（必须对每一个相依套件改版才能完成某次升级）。而如果依赖关系过于松散，又将无法避免版本的混乱（假设兼容于未来的多个版本已超出了合理数量）。当你专案的进展因为版本相依被锁死或版本混乱变得不够简便和可靠，就意味着你正处于依赖地狱之中。</p>\n<p>作为这个问题的解决方案之一，我提议用一组简单的规则及条件来约束版本号的配置和增长。这些规则是根据（但不局限于）已经被各种封闭、开放源码软件所广泛使用的惯例所设计。为了让这套理论运作，你必须先有定义好的公共 API 。这可以透过文件定义或代码强制要求来实现。无论如何，这套 API 的清楚明了是十分重要的。一旦你定义了公共 API，你就可以透过修改相应的版本号来向大家说明你的修改。考虑使用这样的版本号格式：XYZ （主版本号.次版本号.修订号）修复问题但不影响API 时，递增修订号；API 保持向下兼容的新增及修改时，递增次版本号；进行不向下兼容的修改时，递增主版本号。</p>\n<p>我称这套系统为“语义化的版本控制”，在这套约定下，版本号及其更新方式包含了相邻版本间的底层代码和修改内容的信息。</p>\n<h2 id=\"语义化版本控制规范semver\"><a class=\"markdownIt-Anchor\" href=\"#语义化版本控制规范semver\"></a> 语义化版本控制规范（SemVer）</h2>\n<p>以下关键词 MUST、MUST NOT、REQUIRED、SHALL、SHALL NOT、SHOULD、SHOULD NOT、 RECOMMENDED、MAY、OPTIONAL 依照 RFC 2119 的叙述解读。（译注：为了保持语句顺畅， 以下文件遇到的关键词将依照整句语义进行翻译，在此先不进行个别翻译。）</p>\n<ol>\n<li>\n<p>使用语义化版本控制的软件“必须 MUST ”定义公共 API。该 API 可以在代码中被定义或出现于严谨的文件内。无论何种形式都应该力求精确且完整。</p>\n</li>\n<li>\n<p>标准的版本号“必须 MUST ”采用 XYZ 的格式，其中 X、Y 和 Z 为非负的整数，且“禁止 MUST NOT”在数字前方补零。X 是主版本号、Y 是次版本号、而 Z 为修订号。每个元素“必须 MUST ”以数值来递增。例如：1.9.1 -&gt; 1.10.0 -&gt; 1.11.0。</p>\n</li>\n<li>\n<p>标记版本号的软件发行后，“禁止 MUST NOT ”改变该版本软件的内容。任何修改都“必须 MUST ”以新版本发行。</p>\n</li>\n<li>\n<p>主版本号为零（0.y.z）的软件处于开发初始阶段，一切都可能随时被改变。这样的公共 API 不应该被视为稳定版。</p>\n</li>\n<li>\n<p>1.0.0 的版本号用于界定公共 API 的形成。这一版本之后所有的版本号更新都基于公共 API 及其修改内容。</p>\n</li>\n<li>\n<p>修订号 Z（x.y.Z | x &gt; 0）“必须 MUST ”在只做了向下兼容的修正时才递增。这里的修正指的是针对不正确结果而进行的内部修改。</p>\n</li>\n<li>\n<p>次版本号 Y（x.Y.z | x &gt; 0）“必须 MUST ”在有向下兼容的新功能出现时递增。在任何公共 API 的功能被标记为弃用时也“必须 MUST ”递增。也“可以 MAY ”在内部程序有大量新功能或改进被加入时递增，其中“可以 MAY ”包括修订级别的改变。每当次版本号递增时，修订号“必须 MUST ”归零。</p>\n</li>\n<li>\n<p>主版本号 X（X.y.z | X &gt; 0）“必须 MUST ”在有任何不兼容的修改被加入公共 API 时递增。其中“可以 MAY ”包括次版本号及修订级别的改变。每当主版本号递增时，次版本号和修订号“必须 MUST ”归零。</p>\n</li>\n<li>\n<p>先行版本号“可以 MAY ”被标注在修订版之后，先加上一个连接号再加上一连串以句点分隔的标识符号来修饰。标识符号“必须 MUST ”由 ASCII 码的英数字和连接号 [0-9A-Za-z-] 组成，且“禁止 MUST NOT ”留白。数字型的标识符号“禁止 MUST NOT ”在前方补零。先行版的优先级低于相关联的标准版本。被标上先行版本号则表示这个版本并非稳定而且可能无法达到兼容的需求。范例：1.0.0-alpha、1.0.0-alpha.1、1.0.0-0.3.7、1.0.0-x.7.z.92。</p>\n</li>\n<li>\n<p>版本编译信息“可以 MAY ”被标注在修订版或先行版本号之后，先加上一个加号再加上一连串以句点分隔的标识符号来修饰。标识符号“必须 MUST ”由 ASCII 的英数字和连接号 [0-9A-Za-z-] 组成，且“禁止 MUST NOT ”留白。当判断版本的优先层级时，版本编译信息“可 SHOULD ”被忽略。因此当两个版本只有在版本编译信息有差别时，属于相同的优先层级。范例：1.0.0-alpha+001、1.0.0+20130313144700、1.0.0-beta+exp.sha.5114f85。</p>\n</li>\n<li>\n<p>版本的优先层级指的是不同版本在排序时如何比较。判断优先层级时，“必须 MUST ”把版本依序拆分为主版本号、次版本号、修订号及先行版本号后进行比较（版本编译信息不在这份比较的列表中）。由左到右依序比较每个标识符号，第一个差异值用来决定优先层级：主版本号、次版本号及修订号以数值比较，例如：1.0.0 &lt; 2.0.0 &lt; 2.1.0 &lt; 2.1.1。当主版本号、次版本号及修订号都相同时，改以优先层级比较低的先行版本号决定。例如：1.0.0-alpha &lt; 1.0.0。有相同主版本号、次版本号及修订号的两个先行版本号，其优先层级“必须 MUST ”透过由左到右的每个被句点分隔的标识符号来比较，直到找到一个差异值后决定：只有数字的标识符号以数值高低比较，有字母或连接号时则逐字以 ASCII 的排序来比较。数字的标识符号比非数字的标识符号优先层级低。若开头的标识符号都相同时，栏位比较多的先行版本号优先层级比较高。范例：1.0.0-alpha &lt; 1.0.0-alpha.1 &lt; 1.0.0-alpha.beta &lt; 1.0.0-beta &lt; 1.0.0-beta.2 &lt; 1.0.0-beta.11 &lt; 1.0.0- rc.1 &lt; 1.0.0。</p>\n</li>\n</ol>\n<h2 id=\"为什么要使用语义化的版本控制\"><a class=\"markdownIt-Anchor\" href=\"#为什么要使用语义化的版本控制\"></a> 为什么要使用语义化的版本控制？</h2>\n<p>这并不是一个新的或者革命性的想法。实际上，你可能已经在做一些近似的事情了。问题在于只是“近似”还不够。如果没有某个正式的规范可循，版本号对于依赖的管理并无实质意义。将上述的想法命名并给予清楚的定义，让你对软件使用者传达意向变得容易。一旦这些意向变得清楚，弹性（但又不会太弹性）的依赖规范就能达成。</p>\n<p>举个简单的例子就可以展示语义化的版本控制如何让依赖地狱成为过去。假设有个名为“救火车”的函式库，它需要另一个名为“梯子”并已经有使用语义化版本控制的套件。当救火车创建时，梯子的版本号为 3.1.0。因为救火车使用了一些版本 3.1.0 所新增的功能， 你可以放心地指定相依于梯子的版本号大等于 3.1.0 但小于 4.0.0。这样，当梯子版本 3.1.1 和 3.2.0 发布时，你可以将直接它们纳入你的套件管理系统，因为它们能与原有相依的软件兼容。</p>\n<p>作为一位负责任的开发者，你理当确保每次套件升级的运作与版本号的表述一致。现实世界是复杂的，我们除了提高警觉外能做的不多。你所能做的就是让语义化的版本控制为你提供一个健全的方式来发行以及升级套件，而无需推出新的相依套件，节省你的时间及烦恼。</p>\n<p>如果你对此认同，希望立即开始使用语义化版本控制，你只需声明你的函式库正在使用它并遵循这些规则就可以了。请在你的 README 文件中保留此页连结，让别人也知道这些规则并从中受益。</p>\n<h2 id=\"faq\"><a class=\"markdownIt-Anchor\" href=\"#faq\"></a> FAQ</h2>\n<h4 id=\"1-在-0yz-初始开发阶段我该如何进行版本控制\"><a class=\"markdownIt-Anchor\" href=\"#1-在-0yz-初始开发阶段我该如何进行版本控制\"></a> 1. 在 0.y.z 初始开发阶段，我该如何进行版本控制？</h4>\n<p>最简单的做法是以 0.1.0 作为你的初始化开发版本，并在后续的每次发行时递增次版本号。</p>\n<h4 id=\"2-如何判断发布-100-版本的时机\"><a class=\"markdownIt-Anchor\" href=\"#2-如何判断发布-100-版本的时机\"></a> 2. 如何判断发布 1.0.0 版本的时机？</h4>\n<p>当你的软件被用于正式环境，它应该已经达到了 1.0.0 版。如果你已经有个稳定的 API 被使用者依赖，也会是 1.0.0 版。如果你很担心向下兼容的问题，也应该算是 1.0.0 版了。</p>\n<h4 id=\"3-这不会阻碍快速开发和迭代吗\"><a class=\"markdownIt-Anchor\" href=\"#3-这不会阻碍快速开发和迭代吗\"></a> 3. 这不会阻碍快速开发和迭代吗？</h4>\n<p>主版本号为零的时候就是为了做快速开发。如果你每天都在改变 API，那么你应该仍在主版本号为零的阶段（0.y.z），或是正在下个主版本的独立开发分支中。</p>\n<h4 id=\"4-对于公共-api若即使是最小但不向下兼容的改变都需要产生新的主版本号岂不是很快就达到-4200-版\"><a class=\"markdownIt-Anchor\" href=\"#4-对于公共-api若即使是最小但不向下兼容的改变都需要产生新的主版本号岂不是很快就达到-4200-版\"></a> 4. 对于公共 API，若即使是最小但不向下兼容的改变都需要产生新的主版本号，岂不是很快就达到 42.0.0 版？</h4>\n<p>这是开发的责任感和前瞻性的问题。不兼容的改变不应该轻易被加入到有许多依赖代码的软件中。升级所付出的代价可能是巨大的。要递增主版本号来发行不兼容的改版，意味着你必须为这些改变所带来的影响深思熟虑，并且评估所涉及的成本及效益比。</p>\n<h4 id=\"5-为整个公共-api-写文件太费事了\"><a class=\"markdownIt-Anchor\" href=\"#5-为整个公共-api-写文件太费事了\"></a> 5. 为整个公共 API 写文件太费事了！</h4>\n<p>为供他人使用的软件编写适当的文件，是你作为一名专业开发者应尽的职责。保持专案高效一个非常重要的部份是掌控软件的复杂度，如果没有人知道如何使用你的软件或不知道哪些函数的调用是可靠的，要掌控复杂度会是困难的。长远来看，使用语义化版本控制以及对于公共 API 有良好规范的坚持，可以让每个人及每件事都运行顺畅。</p>\n<h4 id=\"6-万一不小心把一个不兼容的改版当成了次版本号发行了该怎么办\"><a class=\"markdownIt-Anchor\" href=\"#6-万一不小心把一个不兼容的改版当成了次版本号发行了该怎么办\"></a> 6. 万一不小心把一个不兼容的改版当成了次版本号发行了该怎么办？</h4>\n<p>一旦发现自己破坏了语义化版本控制的规范，就要修正这个问题，并发行一个新的次版本号来更正这个问题并且恢复向下兼容。即使是这种情况，也不能去修改已发行的版本。可以的话，将有问题的版本号记录到文件中，告诉使用者问题所在，让他们能够意识到这是有问题的版本。</p>\n<h4 id=\"7-如果我更新了自己的依赖但没有改变公共-api-该怎么办\"><a class=\"markdownIt-Anchor\" href=\"#7-如果我更新了自己的依赖但没有改变公共-api-该怎么办\"></a> 7. 如果我更新了自己的依赖但没有改变公共 API 该怎么办？</h4>\n<p>由于没有影响到公共 API，这可以被认定是兼容的。若某个软件和你的套件有共同依赖，则它会有自己的依赖规范，作者也会告知可能的冲突。要判断改版是属于修订等级或是次版等级，是依据你更新的依赖关系是为了修复问题或是加入新功能。对于后者，我经常会预期伴随着更多的代码，这显然会是一个次版本号级别的递增。</p>\n<h4 id=\"8-如果我变更了公共-api-但无意中未遵循版本号的改动怎么办呢意即在修订等级的发布中误将重大且不兼容的改变加到代码之中\"><a class=\"markdownIt-Anchor\" href=\"#8-如果我变更了公共-api-但无意中未遵循版本号的改动怎么办呢意即在修订等级的发布中误将重大且不兼容的改变加到代码之中\"></a> 8. 如果我变更了公共 API 但无意中未遵循版本号的改动怎么办呢？（意即在修订等级的发布中，误将重大且不兼容的改变加到代码之中）</h4>\n<p>自行做最佳的判断。如果你有庞大的使用者群在依照公共 API 的意图而变更行为后会大受影响，那么最好做一次主版本的发布，即使严格来说这个修复仅是修订等级的发布。记住， 语义化的版本控制就是透过版本号的改变来传达意义。若这些改变对你的使用者是重要的，那就透过版本号来向他们说明。</p>\n<h4 id=\"9-我该如何处理即将弃用的功能\"><a class=\"markdownIt-Anchor\" href=\"#9-我该如何处理即将弃用的功能\"></a> 9. 我该如何处理即将弃用的功能？</h4>\n<p>弃用现存的功能是软件开发中的家常便饭，也通常是向前发展所必须的。当你弃用部份公共 API 时，你应该做两件事：（1）更新你的文件让使用者知道这个改变，（2）在适当的时机将弃用的功能透过新的次版本号发布。在新的主版本完全移除弃用功能前，至少要有一个次版本包含这个弃用信息，这样使用者才能平顺地转移到新版 API。</p>\n<h4 id=\"10-语义化版本对于版本的字串长度是否有限制呢\"><a class=\"markdownIt-Anchor\" href=\"#10-语义化版本对于版本的字串长度是否有限制呢\"></a> 10. 语义化版本对于版本的字串长度是否有限制呢？</h4>\n<p>没有，请自行做适当的判断。举例来说，长到 255 个字元的版本已过度夸张。再者，特定的系统对于字串长度可能会有他们自己的限制。</p>\n<h2 id=\"关于\"><a class=\"markdownIt-Anchor\" href=\"#关于\"></a> 关于</h2>\n<p>语义化版本控制的规范是由 Gravatars 创办者兼 GitHub 共同创办者 <a href=\"http://tom.preston-werner.com/\">Tom Preston-Werner</a> 所建立。</p>\n<p>如果您有任何建议，请到 <a href=\"https://github.com/mojombo/semver/issues\">GitHub 上提出您的问题</a>。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"摘要\"><a class=\"markdownIt-Anchor\" href=\"#摘要\"></a> 摘要</h2>\n<p>版本格式：主版本号.次版本号.修订号，版本号递增规则如下：</p>\n<ul>\n<li>主版本号：当你做了不兼容的 API 修改</li>\n<li>次版本号：当你做了向下兼容的功能性新增</li>\n<li>修订号：当你做了向下兼容的问题修正</li>\n</ul>\n<p>先行版本号及版本编译信息可以加到“主版本号.次版本号.修订号”的后面，作为延伸</p>\n<h2 id=\"简介\"><a class=\"markdownIt-Anchor\" href=\"#简介\"></a> 简介</h2>\n<p>在软件管理的领域里存在着被称作“依赖地狱”的死亡之谷，系统规模越大，加入的套件越多，你就越有可能在未来的某一天发现自己已深陷绝望之中。</p>\n<p>在依赖高的系统中发布新版本套件可能很快会成为恶梦。如果依赖关系过高，可能面临版本控制被锁死的风险（必须对每一个相依套件改版才能完成某次升级）。而如果依赖关系过于松散，又将无法避免版本的混乱（假设兼容于未来的多个版本已超出了合理数量）。当你专案的进展因为版本相依被锁死或版本混乱变得不够简便和可靠，就意味着你正处于依赖地狱之中。</p>\n<p>作为这个问题的解决方案之一，我提议用一组简单的规则及条件来约束版本号的配置和增长。这些规则是根据（但不局限于）已经被各种封闭、开放源码软件所广泛使用的惯例所设计。为了让这套理论运作，你必须先有定义好的公共 API 。这可以透过文件定义或代码强制要求来实现。无论如何，这套 API 的清楚明了是十分重要的。一旦你定义了公共 API，你就可以透过修改相应的版本号来向大家说明你的修改。考虑使用这样的版本号格式：XYZ （主版本号.次版本号.修订号）修复问题但不影响API 时，递增修订号；API 保持向下兼容的新增及修改时，递增次版本号；进行不向下兼容的修改时，递增主版本号。</p>\n<p>我称这套系统为“语义化的版本控制”，在这套约定下，版本号及其更新方式包含了相邻版本间的底层代码和修改内容的信息。</p>\n<h2 id=\"语义化版本控制规范semver\"><a class=\"markdownIt-Anchor\" href=\"#语义化版本控制规范semver\"></a> 语义化版本控制规范（SemVer）</h2>\n<p>以下关键词 MUST、MUST NOT、REQUIRED、SHALL、SHALL NOT、SHOULD、SHOULD NOT、 RECOMMENDED、MAY、OPTIONAL 依照 RFC 2119 的叙述解读。（译注：为了保持语句顺畅， 以下文件遇到的关键词将依照整句语义进行翻译，在此先不进行个别翻译。）</p>\n<ol>\n<li>\n<p>使用语义化版本控制的软件“必须 MUST ”定义公共 API。该 API 可以在代码中被定义或出现于严谨的文件内。无论何种形式都应该力求精确且完整。</p>\n</li>\n<li>\n<p>标准的版本号“必须 MUST ”采用 XYZ 的格式，其中 X、Y 和 Z 为非负的整数，且“禁止 MUST NOT”在数字前方补零。X 是主版本号、Y 是次版本号、而 Z 为修订号。每个元素“必须 MUST ”以数值来递增。例如：1.9.1 -&gt; 1.10.0 -&gt; 1.11.0。</p>\n</li>\n<li>\n<p>标记版本号的软件发行后，“禁止 MUST NOT ”改变该版本软件的内容。任何修改都“必须 MUST ”以新版本发行。</p>\n</li>\n<li>\n<p>主版本号为零（0.y.z）的软件处于开发初始阶段，一切都可能随时被改变。这样的公共 API 不应该被视为稳定版。</p>\n</li>\n<li>\n<p>1.0.0 的版本号用于界定公共 API 的形成。这一版本之后所有的版本号更新都基于公共 API 及其修改内容。</p>\n</li>\n<li>\n<p>修订号 Z（x.y.Z | x &gt; 0）“必须 MUST ”在只做了向下兼容的修正时才递增。这里的修正指的是针对不正确结果而进行的内部修改。</p>\n</li>\n<li>\n<p>次版本号 Y（x.Y.z | x &gt; 0）“必须 MUST ”在有向下兼容的新功能出现时递增。在任何公共 API 的功能被标记为弃用时也“必须 MUST ”递增。也“可以 MAY ”在内部程序有大量新功能或改进被加入时递增，其中“可以 MAY ”包括修订级别的改变。每当次版本号递增时，修订号“必须 MUST ”归零。</p>\n</li>\n<li>\n<p>主版本号 X（X.y.z | X &gt; 0）“必须 MUST ”在有任何不兼容的修改被加入公共 API 时递增。其中“可以 MAY ”包括次版本号及修订级别的改变。每当主版本号递增时，次版本号和修订号“必须 MUST ”归零。</p>\n</li>\n<li>\n<p>先行版本号“可以 MAY ”被标注在修订版之后，先加上一个连接号再加上一连串以句点分隔的标识符号来修饰。标识符号“必须 MUST ”由 ASCII 码的英数字和连接号 [0-9A-Za-z-] 组成，且“禁止 MUST NOT ”留白。数字型的标识符号“禁止 MUST NOT ”在前方补零。先行版的优先级低于相关联的标准版本。被标上先行版本号则表示这个版本并非稳定而且可能无法达到兼容的需求。范例：1.0.0-alpha、1.0.0-alpha.1、1.0.0-0.3.7、1.0.0-x.7.z.92。</p>\n</li>\n<li>\n<p>版本编译信息“可以 MAY ”被标注在修订版或先行版本号之后，先加上一个加号再加上一连串以句点分隔的标识符号来修饰。标识符号“必须 MUST ”由 ASCII 的英数字和连接号 [0-9A-Za-z-] 组成，且“禁止 MUST NOT ”留白。当判断版本的优先层级时，版本编译信息“可 SHOULD ”被忽略。因此当两个版本只有在版本编译信息有差别时，属于相同的优先层级。范例：1.0.0-alpha+001、1.0.0+20130313144700、1.0.0-beta+exp.sha.5114f85。</p>\n</li>\n<li>\n<p>版本的优先层级指的是不同版本在排序时如何比较。判断优先层级时，“必须 MUST ”把版本依序拆分为主版本号、次版本号、修订号及先行版本号后进行比较（版本编译信息不在这份比较的列表中）。由左到右依序比较每个标识符号，第一个差异值用来决定优先层级：主版本号、次版本号及修订号以数值比较，例如：1.0.0 &lt; 2.0.0 &lt; 2.1.0 &lt; 2.1.1。当主版本号、次版本号及修订号都相同时，改以优先层级比较低的先行版本号决定。例如：1.0.0-alpha &lt; 1.0.0。有相同主版本号、次版本号及修订号的两个先行版本号，其优先层级“必须 MUST ”透过由左到右的每个被句点分隔的标识符号来比较，直到找到一个差异值后决定：只有数字的标识符号以数值高低比较，有字母或连接号时则逐字以 ASCII 的排序来比较。数字的标识符号比非数字的标识符号优先层级低。若开头的标识符号都相同时，栏位比较多的先行版本号优先层级比较高。范例：1.0.0-alpha &lt; 1.0.0-alpha.1 &lt; 1.0.0-alpha.beta &lt; 1.0.0-beta &lt; 1.0.0-beta.2 &lt; 1.0.0-beta.11 &lt; 1.0.0- rc.1 &lt; 1.0.0。</p>\n</li>\n</ol>\n<h2 id=\"为什么要使用语义化的版本控制\"><a class=\"markdownIt-Anchor\" href=\"#为什么要使用语义化的版本控制\"></a> 为什么要使用语义化的版本控制？</h2>\n<p>这并不是一个新的或者革命性的想法。实际上，你可能已经在做一些近似的事情了。问题在于只是“近似”还不够。如果没有某个正式的规范可循，版本号对于依赖的管理并无实质意义。将上述的想法命名并给予清楚的定义，让你对软件使用者传达意向变得容易。一旦这些意向变得清楚，弹性（但又不会太弹性）的依赖规范就能达成。</p>\n<p>举个简单的例子就可以展示语义化的版本控制如何让依赖地狱成为过去。假设有个名为“救火车”的函式库，它需要另一个名为“梯子”并已经有使用语义化版本控制的套件。当救火车创建时，梯子的版本号为 3.1.0。因为救火车使用了一些版本 3.1.0 所新增的功能， 你可以放心地指定相依于梯子的版本号大等于 3.1.0 但小于 4.0.0。这样，当梯子版本 3.1.1 和 3.2.0 发布时，你可以将直接它们纳入你的套件管理系统，因为它们能与原有相依的软件兼容。</p>\n<p>作为一位负责任的开发者，你理当确保每次套件升级的运作与版本号的表述一致。现实世界是复杂的，我们除了提高警觉外能做的不多。你所能做的就是让语义化的版本控制为你提供一个健全的方式来发行以及升级套件，而无需推出新的相依套件，节省你的时间及烦恼。</p>\n<p>如果你对此认同，希望立即开始使用语义化版本控制，你只需声明你的函式库正在使用它并遵循这些规则就可以了。请在你的 README 文件中保留此页连结，让别人也知道这些规则并从中受益。</p>\n<h2 id=\"faq\"><a class=\"markdownIt-Anchor\" href=\"#faq\"></a> FAQ</h2>\n<h4 id=\"1-在-0yz-初始开发阶段我该如何进行版本控制\"><a class=\"markdownIt-Anchor\" href=\"#1-在-0yz-初始开发阶段我该如何进行版本控制\"></a> 1. 在 0.y.z 初始开发阶段，我该如何进行版本控制？</h4>\n<p>最简单的做法是以 0.1.0 作为你的初始化开发版本，并在后续的每次发行时递增次版本号。</p>\n<h4 id=\"2-如何判断发布-100-版本的时机\"><a class=\"markdownIt-Anchor\" href=\"#2-如何判断发布-100-版本的时机\"></a> 2. 如何判断发布 1.0.0 版本的时机？</h4>\n<p>当你的软件被用于正式环境，它应该已经达到了 1.0.0 版。如果你已经有个稳定的 API 被使用者依赖，也会是 1.0.0 版。如果你很担心向下兼容的问题，也应该算是 1.0.0 版了。</p>\n<h4 id=\"3-这不会阻碍快速开发和迭代吗\"><a class=\"markdownIt-Anchor\" href=\"#3-这不会阻碍快速开发和迭代吗\"></a> 3. 这不会阻碍快速开发和迭代吗？</h4>\n<p>主版本号为零的时候就是为了做快速开发。如果你每天都在改变 API，那么你应该仍在主版本号为零的阶段（0.y.z），或是正在下个主版本的独立开发分支中。</p>\n<h4 id=\"4-对于公共-api若即使是最小但不向下兼容的改变都需要产生新的主版本号岂不是很快就达到-4200-版\"><a class=\"markdownIt-Anchor\" href=\"#4-对于公共-api若即使是最小但不向下兼容的改变都需要产生新的主版本号岂不是很快就达到-4200-版\"></a> 4. 对于公共 API，若即使是最小但不向下兼容的改变都需要产生新的主版本号，岂不是很快就达到 42.0.0 版？</h4>\n<p>这是开发的责任感和前瞻性的问题。不兼容的改变不应该轻易被加入到有许多依赖代码的软件中。升级所付出的代价可能是巨大的。要递增主版本号来发行不兼容的改版，意味着你必须为这些改变所带来的影响深思熟虑，并且评估所涉及的成本及效益比。</p>\n<h4 id=\"5-为整个公共-api-写文件太费事了\"><a class=\"markdownIt-Anchor\" href=\"#5-为整个公共-api-写文件太费事了\"></a> 5. 为整个公共 API 写文件太费事了！</h4>\n<p>为供他人使用的软件编写适当的文件，是你作为一名专业开发者应尽的职责。保持专案高效一个非常重要的部份是掌控软件的复杂度，如果没有人知道如何使用你的软件或不知道哪些函数的调用是可靠的，要掌控复杂度会是困难的。长远来看，使用语义化版本控制以及对于公共 API 有良好规范的坚持，可以让每个人及每件事都运行顺畅。</p>\n<h4 id=\"6-万一不小心把一个不兼容的改版当成了次版本号发行了该怎么办\"><a class=\"markdownIt-Anchor\" href=\"#6-万一不小心把一个不兼容的改版当成了次版本号发行了该怎么办\"></a> 6. 万一不小心把一个不兼容的改版当成了次版本号发行了该怎么办？</h4>\n<p>一旦发现自己破坏了语义化版本控制的规范，就要修正这个问题，并发行一个新的次版本号来更正这个问题并且恢复向下兼容。即使是这种情况，也不能去修改已发行的版本。可以的话，将有问题的版本号记录到文件中，告诉使用者问题所在，让他们能够意识到这是有问题的版本。</p>\n<h4 id=\"7-如果我更新了自己的依赖但没有改变公共-api-该怎么办\"><a class=\"markdownIt-Anchor\" href=\"#7-如果我更新了自己的依赖但没有改变公共-api-该怎么办\"></a> 7. 如果我更新了自己的依赖但没有改变公共 API 该怎么办？</h4>\n<p>由于没有影响到公共 API，这可以被认定是兼容的。若某个软件和你的套件有共同依赖，则它会有自己的依赖规范，作者也会告知可能的冲突。要判断改版是属于修订等级或是次版等级，是依据你更新的依赖关系是为了修复问题或是加入新功能。对于后者，我经常会预期伴随着更多的代码，这显然会是一个次版本号级别的递增。</p>\n<h4 id=\"8-如果我变更了公共-api-但无意中未遵循版本号的改动怎么办呢意即在修订等级的发布中误将重大且不兼容的改变加到代码之中\"><a class=\"markdownIt-Anchor\" href=\"#8-如果我变更了公共-api-但无意中未遵循版本号的改动怎么办呢意即在修订等级的发布中误将重大且不兼容的改变加到代码之中\"></a> 8. 如果我变更了公共 API 但无意中未遵循版本号的改动怎么办呢？（意即在修订等级的发布中，误将重大且不兼容的改变加到代码之中）</h4>\n<p>自行做最佳的判断。如果你有庞大的使用者群在依照公共 API 的意图而变更行为后会大受影响，那么最好做一次主版本的发布，即使严格来说这个修复仅是修订等级的发布。记住， 语义化的版本控制就是透过版本号的改变来传达意义。若这些改变对你的使用者是重要的，那就透过版本号来向他们说明。</p>\n<h4 id=\"9-我该如何处理即将弃用的功能\"><a class=\"markdownIt-Anchor\" href=\"#9-我该如何处理即将弃用的功能\"></a> 9. 我该如何处理即将弃用的功能？</h4>\n<p>弃用现存的功能是软件开发中的家常便饭，也通常是向前发展所必须的。当你弃用部份公共 API 时，你应该做两件事：（1）更新你的文件让使用者知道这个改变，（2）在适当的时机将弃用的功能透过新的次版本号发布。在新的主版本完全移除弃用功能前，至少要有一个次版本包含这个弃用信息，这样使用者才能平顺地转移到新版 API。</p>\n<h4 id=\"10-语义化版本对于版本的字串长度是否有限制呢\"><a class=\"markdownIt-Anchor\" href=\"#10-语义化版本对于版本的字串长度是否有限制呢\"></a> 10. 语义化版本对于版本的字串长度是否有限制呢？</h4>\n<p>没有，请自行做适当的判断。举例来说，长到 255 个字元的版本已过度夸张。再者，特定的系统对于字串长度可能会有他们自己的限制。</p>\n<h2 id=\"关于\"><a class=\"markdownIt-Anchor\" href=\"#关于\"></a> 关于</h2>\n<p>语义化版本控制的规范是由 Gravatars 创办者兼 GitHub 共同创办者 <a href=\"http://tom.preston-werner.com/\">Tom Preston-Werner</a> 所建立。</p>\n<p>如果您有任何建议，请到 <a href=\"https://github.com/mojombo/semver/issues\">GitHub 上提出您的问题</a>。</p>\n"},{"title":"离开","date":"2016-05-16T06:00:00.000Z","_content":"\n我从九月走来 / 而在五月离开 / 来的时候热血满怀 / 到现在不好不坏\n\n\n那时候青春正在 / 仿佛花儿都为我开 / 疲惫又满怀期待 / 春风得意自由自在\n\n<br>\n\n我们从十月散开 / 散落在路边水台 / 狂欢后静静离开 / 躁动后不安袭来\n\n\n那一天终于到来 / 看着它如期到来 / 它来得这么直白 / 我们也只好看开\n\n<br>\n\n我们的征途是星辰和大海 / 我们的路需要我们走出来 / 把理想踏在脚下 / 不是把它践踏 / 而是要它生根发芽\n\n<br>\n\n我们的生活要美好而精彩 / 可现实生活却充满无奈 / 把命运握在手中 / 不是任其主宰 / 而要听从我们内心的独白\n\n<br>\n\n我从九月走来 / 而在五月离开\n\n\n","source":"_posts/nice-to-meet-you.md","raw":"---\ntitle: 离开\ndate: 2016-05-16 14:00\ntags:\n- life\n---\n\n我从九月走来 / 而在五月离开 / 来的时候热血满怀 / 到现在不好不坏\n\n\n那时候青春正在 / 仿佛花儿都为我开 / 疲惫又满怀期待 / 春风得意自由自在\n\n<br>\n\n我们从十月散开 / 散落在路边水台 / 狂欢后静静离开 / 躁动后不安袭来\n\n\n那一天终于到来 / 看着它如期到来 / 它来得这么直白 / 我们也只好看开\n\n<br>\n\n我们的征途是星辰和大海 / 我们的路需要我们走出来 / 把理想踏在脚下 / 不是把它践踏 / 而是要它生根发芽\n\n<br>\n\n我们的生活要美好而精彩 / 可现实生活却充满无奈 / 把命运握在手中 / 不是任其主宰 / 而要听从我们内心的独白\n\n<br>\n\n我从九月走来 / 而在五月离开\n\n\n","slug":"nice-to-meet-you","published":1,"updated":"2024-10-22T07:13:37.317Z","_id":"cm2k3rcme0028i804gfug6xho","comments":1,"layout":"post","photos":[],"link":"","content":"<p>我从九月走来 / 而在五月离开 / 来的时候热血满怀 / 到现在不好不坏</p>\n<p>那时候青春正在 / 仿佛花儿都为我开 / 疲惫又满怀期待 / 春风得意自由自在</p>\n<br>\n<p>我们从十月散开 / 散落在路边水台 / 狂欢后静静离开 / 躁动后不安袭来</p>\n<p>那一天终于到来 / 看着它如期到来 / 它来得这么直白 / 我们也只好看开</p>\n<br>\n<p>我们的征途是星辰和大海 / 我们的路需要我们走出来 / 把理想踏在脚下 / 不是把它践踏 / 而是要它生根发芽</p>\n<br>\n<p>我们的生活要美好而精彩 / 可现实生活却充满无奈 / 把命运握在手中 / 不是任其主宰 / 而要听从我们内心的独白</p>\n<br>\n<p>我从九月走来 / 而在五月离开</p>\n","site":{"data":{}},"excerpt":"","more":"<p>我从九月走来 / 而在五月离开 / 来的时候热血满怀 / 到现在不好不坏</p>\n<p>那时候青春正在 / 仿佛花儿都为我开 / 疲惫又满怀期待 / 春风得意自由自在</p>\n<br>\n<p>我们从十月散开 / 散落在路边水台 / 狂欢后静静离开 / 躁动后不安袭来</p>\n<p>那一天终于到来 / 看着它如期到来 / 它来得这么直白 / 我们也只好看开</p>\n<br>\n<p>我们的征途是星辰和大海 / 我们的路需要我们走出来 / 把理想踏在脚下 / 不是把它践踏 / 而是要它生根发芽</p>\n<br>\n<p>我们的生活要美好而精彩 / 可现实生活却充满无奈 / 把命运握在手中 / 不是任其主宰 / 而要听从我们内心的独白</p>\n<br>\n<p>我从九月走来 / 而在五月离开</p>\n"},{"title":"谎言","date":"2016-05-12T06:00:00.000Z","_content":"\n\n我们还是说了再见 / 最厉害的还是时间 / 敲碎了我们的面具 / 露出了真实的表面\n\n<br>\n\n我还记得那些过去 / 不要再假装遮遮掩掩 / 每一个荒谬的昨天 / 想起来心都会滴血\n\n<br>\n\n人更容易被自己欺骗 / 明明早可以摆脱局限 / 却强迫自己做出改变 / 把这当成别人的意见\n\n<br>\n\n我们的开始就是谎言 / 你和我都是这部闹剧的演员 / 到处都是漏洞和槽点 / 却奢望彼此能不计前嫌\n\n<br>\n\n赐我个智者给我指点 / 抑或是朋友的规劝 / 到头来才发现 / 这些人一直在我身边\n\n<br>\n\n真想一下子去往晚年 / 面对年轻的自己 / 像操纵木偶一样 / 提好手中的线","source":"_posts/lie.md","raw":"---\ntitle: 谎言\ndate: 2016-05-12 14:00\ntags:\n- life\n---\n\n\n我们还是说了再见 / 最厉害的还是时间 / 敲碎了我们的面具 / 露出了真实的表面\n\n<br>\n\n我还记得那些过去 / 不要再假装遮遮掩掩 / 每一个荒谬的昨天 / 想起来心都会滴血\n\n<br>\n\n人更容易被自己欺骗 / 明明早可以摆脱局限 / 却强迫自己做出改变 / 把这当成别人的意见\n\n<br>\n\n我们的开始就是谎言 / 你和我都是这部闹剧的演员 / 到处都是漏洞和槽点 / 却奢望彼此能不计前嫌\n\n<br>\n\n赐我个智者给我指点 / 抑或是朋友的规劝 / 到头来才发现 / 这些人一直在我身边\n\n<br>\n\n真想一下子去往晚年 / 面对年轻的自己 / 像操纵木偶一样 / 提好手中的线","slug":"lie","published":1,"updated":"2024-10-22T07:13:13.420Z","_id":"cm2k3sf5w002bi804dnrybuzs","comments":1,"layout":"post","photos":[],"link":"","content":"<p>我们还是说了再见 / 最厉害的还是时间 / 敲碎了我们的面具 / 露出了真实的表面</p>\n<br>\n<p>我还记得那些过去 / 不要再假装遮遮掩掩 / 每一个荒谬的昨天 / 想起来心都会滴血</p>\n<br>\n<p>人更容易被自己欺骗 / 明明早可以摆脱局限 / 却强迫自己做出改变 / 把这当成别人的意见</p>\n<br>\n<p>我们的开始就是谎言 / 你和我都是这部闹剧的演员 / 到处都是漏洞和槽点 / 却奢望彼此能不计前嫌</p>\n<br>\n<p>赐我个智者给我指点 / 抑或是朋友的规劝 / 到头来才发现 / 这些人一直在我身边</p>\n<br>\n<p>真想一下子去往晚年 / 面对年轻的自己 / 像操纵木偶一样 / 提好手中的线</p>\n","site":{"data":{}},"excerpt":"","more":"<p>我们还是说了再见 / 最厉害的还是时间 / 敲碎了我们的面具 / 露出了真实的表面</p>\n<br>\n<p>我还记得那些过去 / 不要再假装遮遮掩掩 / 每一个荒谬的昨天 / 想起来心都会滴血</p>\n<br>\n<p>人更容易被自己欺骗 / 明明早可以摆脱局限 / 却强迫自己做出改变 / 把这当成别人的意见</p>\n<br>\n<p>我们的开始就是谎言 / 你和我都是这部闹剧的演员 / 到处都是漏洞和槽点 / 却奢望彼此能不计前嫌</p>\n<br>\n<p>赐我个智者给我指点 / 抑或是朋友的规劝 / 到头来才发现 / 这些人一直在我身边</p>\n<br>\n<p>真想一下子去往晚年 / 面对年轻的自己 / 像操纵木偶一样 / 提好手中的线</p>\n"},{"title":"包容","date":"2016-04-15T06:00:00.000Z","_content":"\n你可以开车到处游玩\n\n可你无法让一个盲人饱揽河山\n\n你可以飞着越过峡谷\n\n可你无法让封闭的心走出房间\n\n你可以创造新鲜的玩意儿\n\n可你无法让父母也跟上脚步\n\n你可以面对困难无往不胜\n\n可你无法阻止孩子对它的恐惧\n\n<br/>\n\n也许你可以改变整个世界\n\n可你无法改变一个人\n\n也许你可以改变整个世界\n\n也许你可以包容他\n\n<br/>\n\n你可以让自己变得强壮\n\n可并非每个人都可以这样\n\n你可以不在乎流言蜚语\n\n可你无法让别人也心宽体胖\n\n你可以吹嘘自己的品味不凡\n\n可世界的精彩在于不同\n\n你可以花花世界玩世不恭\n\n可你不能笑话那个往老家寄钱的男人\n\n<br/>\n\n也许你可以改变整个世界\n\n可你无法改变一个人\n\n也许你可以改变整个世界\n\n也许你可以包容他","source":"_posts/pardon.md","raw":"---\ntitle: 包容\ndate: 2016-04-15 14:00\ntags:\n- life\n---\n\n你可以开车到处游玩\n\n可你无法让一个盲人饱揽河山\n\n你可以飞着越过峡谷\n\n可你无法让封闭的心走出房间\n\n你可以创造新鲜的玩意儿\n\n可你无法让父母也跟上脚步\n\n你可以面对困难无往不胜\n\n可你无法阻止孩子对它的恐惧\n\n<br/>\n\n也许你可以改变整个世界\n\n可你无法改变一个人\n\n也许你可以改变整个世界\n\n也许你可以包容他\n\n<br/>\n\n你可以让自己变得强壮\n\n可并非每个人都可以这样\n\n你可以不在乎流言蜚语\n\n可你无法让别人也心宽体胖\n\n你可以吹嘘自己的品味不凡\n\n可世界的精彩在于不同\n\n你可以花花世界玩世不恭\n\n可你不能笑话那个往老家寄钱的男人\n\n<br/>\n\n也许你可以改变整个世界\n\n可你无法改变一个人\n\n也许你可以改变整个世界\n\n也许你可以包容他","slug":"pardon","published":1,"updated":"2024-10-22T07:13:01.467Z","_id":"cm2k3uaxx002ei8045b5hdzkw","comments":1,"layout":"post","photos":[],"link":"","content":"<p>你可以开车到处游玩</p>\n<p>可你无法让一个盲人饱揽河山</p>\n<p>你可以飞着越过峡谷</p>\n<p>可你无法让封闭的心走出房间</p>\n<p>你可以创造新鲜的玩意儿</p>\n<p>可你无法让父母也跟上脚步</p>\n<p>你可以面对困难无往不胜</p>\n<p>可你无法阻止孩子对它的恐惧</p>\n<br/>\n<p>也许你可以改变整个世界</p>\n<p>可你无法改变一个人</p>\n<p>也许你可以改变整个世界</p>\n<p>也许你可以包容他</p>\n<br/>\n<p>你可以让自己变得强壮</p>\n<p>可并非每个人都可以这样</p>\n<p>你可以不在乎流言蜚语</p>\n<p>可你无法让别人也心宽体胖</p>\n<p>你可以吹嘘自己的品味不凡</p>\n<p>可世界的精彩在于不同</p>\n<p>你可以花花世界玩世不恭</p>\n<p>可你不能笑话那个往老家寄钱的男人</p>\n<br/>\n<p>也许你可以改变整个世界</p>\n<p>可你无法改变一个人</p>\n<p>也许你可以改变整个世界</p>\n<p>也许你可以包容他</p>\n","site":{"data":{}},"excerpt":"","more":"<p>你可以开车到处游玩</p>\n<p>可你无法让一个盲人饱揽河山</p>\n<p>你可以飞着越过峡谷</p>\n<p>可你无法让封闭的心走出房间</p>\n<p>你可以创造新鲜的玩意儿</p>\n<p>可你无法让父母也跟上脚步</p>\n<p>你可以面对困难无往不胜</p>\n<p>可你无法阻止孩子对它的恐惧</p>\n<br/>\n<p>也许你可以改变整个世界</p>\n<p>可你无法改变一个人</p>\n<p>也许你可以改变整个世界</p>\n<p>也许你可以包容他</p>\n<br/>\n<p>你可以让自己变得强壮</p>\n<p>可并非每个人都可以这样</p>\n<p>你可以不在乎流言蜚语</p>\n<p>可你无法让别人也心宽体胖</p>\n<p>你可以吹嘘自己的品味不凡</p>\n<p>可世界的精彩在于不同</p>\n<p>你可以花花世界玩世不恭</p>\n<p>可你不能笑话那个往老家寄钱的男人</p>\n<br/>\n<p>也许你可以改变整个世界</p>\n<p>可你无法改变一个人</p>\n<p>也许你可以改变整个世界</p>\n<p>也许你可以包容他</p>\n"},{"title":"Wish you were here","date":"2016-04-14T06:00:00.000Z","_content":"\nSo\n\nSo you think you can tell\n\nHeaven from Hell\n\nBlue skies from pain\n\nCan you tell a green field\n\nFrom a cold steel rail?\n\nA smile from a veil?\n\nDo you think you can tell?\n\nAnd did they get you to trade\n\nYour heroes for ghosts?\n\nHot ashes for trees?\n\nHot air for a cool breeze?\n\nCold comfort for change?\n\nAnd did you exchange\n\nA walk on part in the war\n\nFor a lead role in a cage?\n\nHow I wish\n\nHow I wish you were here\n\nWe're just two lost souls swimming in a fish bowl\n\nYear after year\n\nRunning over the same old ground\n\nWhat have we found?\n\nThe same old fears\n\nWish you were here\n","source":"_posts/wish-you-were-here.md","raw":"---\ntitle: Wish you were here\ndate: 2016-04-14 14:00\ntags:\n- life\n---\n\nSo\n\nSo you think you can tell\n\nHeaven from Hell\n\nBlue skies from pain\n\nCan you tell a green field\n\nFrom a cold steel rail?\n\nA smile from a veil?\n\nDo you think you can tell?\n\nAnd did they get you to trade\n\nYour heroes for ghosts?\n\nHot ashes for trees?\n\nHot air for a cool breeze?\n\nCold comfort for change?\n\nAnd did you exchange\n\nA walk on part in the war\n\nFor a lead role in a cage?\n\nHow I wish\n\nHow I wish you were here\n\nWe're just two lost souls swimming in a fish bowl\n\nYear after year\n\nRunning over the same old ground\n\nWhat have we found?\n\nThe same old fears\n\nWish you were here\n","slug":"wish-you-were-here","published":1,"updated":"2024-10-22T07:09:54.630Z","_id":"cm2k3ve4i002hi8042jog553w","comments":1,"layout":"post","photos":[],"link":"","content":"<p>So</p>\n<p>So you think you can tell</p>\n<p>Heaven from Hell</p>\n<p>Blue skies from pain</p>\n<p>Can you tell a green field</p>\n<p>From a cold steel rail?</p>\n<p>A smile from a veil?</p>\n<p>Do you think you can tell?</p>\n<p>And did they get you to trade</p>\n<p>Your heroes for ghosts?</p>\n<p>Hot ashes for trees?</p>\n<p>Hot air for a cool breeze?</p>\n<p>Cold comfort for change?</p>\n<p>And did you exchange</p>\n<p>A walk on part in the war</p>\n<p>For a lead role in a cage?</p>\n<p>How I wish</p>\n<p>How I wish you were here</p>\n<p>We’re just two lost souls swimming in a fish bowl</p>\n<p>Year after year</p>\n<p>Running over the same old ground</p>\n<p>What have we found?</p>\n<p>The same old fears</p>\n<p>Wish you were here</p>\n","site":{"data":{}},"excerpt":"","more":"<p>So</p>\n<p>So you think you can tell</p>\n<p>Heaven from Hell</p>\n<p>Blue skies from pain</p>\n<p>Can you tell a green field</p>\n<p>From a cold steel rail?</p>\n<p>A smile from a veil?</p>\n<p>Do you think you can tell?</p>\n<p>And did they get you to trade</p>\n<p>Your heroes for ghosts?</p>\n<p>Hot ashes for trees?</p>\n<p>Hot air for a cool breeze?</p>\n<p>Cold comfort for change?</p>\n<p>And did you exchange</p>\n<p>A walk on part in the war</p>\n<p>For a lead role in a cage?</p>\n<p>How I wish</p>\n<p>How I wish you were here</p>\n<p>We’re just two lost souls swimming in a fish bowl</p>\n<p>Year after year</p>\n<p>Running over the same old ground</p>\n<p>What have we found?</p>\n<p>The same old fears</p>\n<p>Wish you were here</p>\n"},{"title":"生活啊","date":"2016-04-14T06:00:00.000Z","_content":"\n早晨起床 / 拉开窗帘 / 打开阳台的门 / 点燃一根香烟\n\n<br>\n\n昨夜的窗户没关 / 从外面飘进了一些柳絮 / 幽灵一样的小偷 / 偷窥着他的生活\n\n<br>\n\n缔造者们 / 习惯早起 / 给阳光梳头 / 用来羞辱懒虫\n\n<br>\n\n不为所动的懒虫 / 顶多有九秒钟的惆怅 / 惆怅过后 / 口中吐出白烟\n\n<br>\n\n毕竟世界变化太快 / 他每天有太多的事情需要审阅 / 夜幕降临的时候舍不得入睡 / 醒来赖床的时候已开始工作\n\n<br>\n\n毕竟好玩的事情太多 / 他似乎认为什么事都能掺和一脚 / 大脑越来越重 / 心越来越空\n\n<br>\n\n听别人演讲他也跃跃欲试 / 可还没轮到他发言就开始紧张 / 心里装了很多不满 / 口头禅却是没关系无所谓 / 人啊\n\n<br>\n\n总觉得自己无所不能 / 连柳絮的脾气也略知一二 / 可内心没一刻安生 / 充满了如果畏惧假设害怕","source":"_posts/what-a-life.md","raw":"---\ntitle: 生活啊\ndate: 2016-04-14 14:00\ntags:\n- life\n---\n\n早晨起床 / 拉开窗帘 / 打开阳台的门 / 点燃一根香烟\n\n<br>\n\n昨夜的窗户没关 / 从外面飘进了一些柳絮 / 幽灵一样的小偷 / 偷窥着他的生活\n\n<br>\n\n缔造者们 / 习惯早起 / 给阳光梳头 / 用来羞辱懒虫\n\n<br>\n\n不为所动的懒虫 / 顶多有九秒钟的惆怅 / 惆怅过后 / 口中吐出白烟\n\n<br>\n\n毕竟世界变化太快 / 他每天有太多的事情需要审阅 / 夜幕降临的时候舍不得入睡 / 醒来赖床的时候已开始工作\n\n<br>\n\n毕竟好玩的事情太多 / 他似乎认为什么事都能掺和一脚 / 大脑越来越重 / 心越来越空\n\n<br>\n\n听别人演讲他也跃跃欲试 / 可还没轮到他发言就开始紧张 / 心里装了很多不满 / 口头禅却是没关系无所谓 / 人啊\n\n<br>\n\n总觉得自己无所不能 / 连柳絮的脾气也略知一二 / 可内心没一刻安生 / 充满了如果畏惧假设害怕","slug":"what-a-life","published":1,"updated":"2024-10-22T07:12:34.411Z","_id":"cm2k3w8e9002ji804cgtgeaw5","comments":1,"layout":"post","photos":[],"link":"","content":"<p>早晨起床 / 拉开窗帘 / 打开阳台的门 / 点燃一根香烟</p>\n<br>\n<p>昨夜的窗户没关 / 从外面飘进了一些柳絮 / 幽灵一样的小偷 / 偷窥着他的生活</p>\n<br>\n<p>缔造者们 / 习惯早起 / 给阳光梳头 / 用来羞辱懒虫</p>\n<br>\n<p>不为所动的懒虫 / 顶多有九秒钟的惆怅 / 惆怅过后 / 口中吐出白烟</p>\n<br>\n<p>毕竟世界变化太快 / 他每天有太多的事情需要审阅 / 夜幕降临的时候舍不得入睡 / 醒来赖床的时候已开始工作</p>\n<br>\n<p>毕竟好玩的事情太多 / 他似乎认为什么事都能掺和一脚 / 大脑越来越重 / 心越来越空</p>\n<br>\n<p>听别人演讲他也跃跃欲试 / 可还没轮到他发言就开始紧张 / 心里装了很多不满 / 口头禅却是没关系无所谓 / 人啊</p>\n<br>\n<p>总觉得自己无所不能 / 连柳絮的脾气也略知一二 / 可内心没一刻安生 / 充满了如果畏惧假设害怕</p>\n","site":{"data":{}},"excerpt":"","more":"<p>早晨起床 / 拉开窗帘 / 打开阳台的门 / 点燃一根香烟</p>\n<br>\n<p>昨夜的窗户没关 / 从外面飘进了一些柳絮 / 幽灵一样的小偷 / 偷窥着他的生活</p>\n<br>\n<p>缔造者们 / 习惯早起 / 给阳光梳头 / 用来羞辱懒虫</p>\n<br>\n<p>不为所动的懒虫 / 顶多有九秒钟的惆怅 / 惆怅过后 / 口中吐出白烟</p>\n<br>\n<p>毕竟世界变化太快 / 他每天有太多的事情需要审阅 / 夜幕降临的时候舍不得入睡 / 醒来赖床的时候已开始工作</p>\n<br>\n<p>毕竟好玩的事情太多 / 他似乎认为什么事都能掺和一脚 / 大脑越来越重 / 心越来越空</p>\n<br>\n<p>听别人演讲他也跃跃欲试 / 可还没轮到他发言就开始紧张 / 心里装了很多不满 / 口头禅却是没关系无所谓 / 人啊</p>\n<br>\n<p>总觉得自己无所不能 / 连柳絮的脾气也略知一二 / 可内心没一刻安生 / 充满了如果畏惧假设害怕</p>\n"},{"title":"Comfortably numb","date":"2016-04-14T06:00:00.000Z","_content":"\nHello.\n\nIs there anybody in there?\n\nJust nod if you can hear me.\n\nIs there anyone home?\n\nCome on, now.\n\nI hear you're feeling down.\n\nWell I can ease your pain,\n\nGet you on your feet again.\n\nRelax.\n\nI need some information first.\n\nJust the basic facts:\n\nCan you show me where it hurts?\n\nThere is no pain, you are receding.\n\nA distant ship's smoke on the horizon.\n\nYou are only coming through in waves.\n\nYour lips move but I can't hear what you're sayin'.\n\nWhen I was a child I had a fever.\n\nMy hands felt just like two balloons.\n\nNow I got that feeling once again.\n\nI can't explain, you would not understand.\n\nThis is not how I am.\n\nI have become comfortably numb.\n\n<br>\n\nOk.\n\nJust a little pinprick.\n\nThere'll be no more --Aaaaaahhhhh!\n\nBut you may feel a little sick.\n\nCan you stand up?\n\nI do believe it's working. Good.\n\nThat'll keep you going for the show.\n\nCome on it's time to go.\n\nThere is no pain, you are receding.\n\nA distant ship's smoke on the horizon.\n\nYou are only coming through in waves.\n\nYour lips move but I can't hear what you're sayin'.\n\nWhen I was a child I caught a fleeting glimpse,\n\nOut of the corner of my eye.\n\nI turned to look but it was gone.\n\nI cannot put my finger on it now.\n\nThe child is grown, the dream is gone.\n\nI have become comfortably numb.\n\n","source":"_posts/comfortably-numb.md","raw":"---\ntitle: Comfortably numb\ndate: 2016-04-14 14:00\ntags:\n- life\n- music\n---\n\nHello.\n\nIs there anybody in there?\n\nJust nod if you can hear me.\n\nIs there anyone home?\n\nCome on, now.\n\nI hear you're feeling down.\n\nWell I can ease your pain,\n\nGet you on your feet again.\n\nRelax.\n\nI need some information first.\n\nJust the basic facts:\n\nCan you show me where it hurts?\n\nThere is no pain, you are receding.\n\nA distant ship's smoke on the horizon.\n\nYou are only coming through in waves.\n\nYour lips move but I can't hear what you're sayin'.\n\nWhen I was a child I had a fever.\n\nMy hands felt just like two balloons.\n\nNow I got that feeling once again.\n\nI can't explain, you would not understand.\n\nThis is not how I am.\n\nI have become comfortably numb.\n\n<br>\n\nOk.\n\nJust a little pinprick.\n\nThere'll be no more --Aaaaaahhhhh!\n\nBut you may feel a little sick.\n\nCan you stand up?\n\nI do believe it's working. Good.\n\nThat'll keep you going for the show.\n\nCome on it's time to go.\n\nThere is no pain, you are receding.\n\nA distant ship's smoke on the horizon.\n\nYou are only coming through in waves.\n\nYour lips move but I can't hear what you're sayin'.\n\nWhen I was a child I caught a fleeting glimpse,\n\nOut of the corner of my eye.\n\nI turned to look but it was gone.\n\nI cannot put my finger on it now.\n\nThe child is grown, the dream is gone.\n\nI have become comfortably numb.\n\n","slug":"comfortably-numb","published":1,"updated":"2024-10-22T07:12:01.446Z","_id":"cm2k3wzhw002ki804fbem63p5","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Hello.</p>\n<p>Is there anybody in there?</p>\n<p>Just nod if you can hear me.</p>\n<p>Is there anyone home?</p>\n<p>Come on, now.</p>\n<p>I hear you’re feeling down.</p>\n<p>Well I can ease your pain,</p>\n<p>Get you on your feet again.</p>\n<p>Relax.</p>\n<p>I need some information first.</p>\n<p>Just the basic facts:</p>\n<p>Can you show me where it hurts?</p>\n<p>There is no pain, you are receding.</p>\n<p>A distant ship’s smoke on the horizon.</p>\n<p>You are only coming through in waves.</p>\n<p>Your lips move but I can’t hear what you’re sayin’.</p>\n<p>When I was a child I had a fever.</p>\n<p>My hands felt just like two balloons.</p>\n<p>Now I got that feeling once again.</p>\n<p>I can’t explain, you would not understand.</p>\n<p>This is not how I am.</p>\n<p>I have become comfortably numb.</p>\n<br>\n<p>Ok.</p>\n<p>Just a little pinprick.</p>\n<p>There’ll be no more --Aaaaaahhhhh!</p>\n<p>But you may feel a little sick.</p>\n<p>Can you stand up?</p>\n<p>I do believe it’s working. Good.</p>\n<p>That’ll keep you going for the show.</p>\n<p>Come on it’s time to go.</p>\n<p>There is no pain, you are receding.</p>\n<p>A distant ship’s smoke on the horizon.</p>\n<p>You are only coming through in waves.</p>\n<p>Your lips move but I can’t hear what you’re sayin’.</p>\n<p>When I was a child I caught a fleeting glimpse,</p>\n<p>Out of the corner of my eye.</p>\n<p>I turned to look but it was gone.</p>\n<p>I cannot put my finger on it now.</p>\n<p>The child is grown, the dream is gone.</p>\n<p>I have become comfortably numb.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Hello.</p>\n<p>Is there anybody in there?</p>\n<p>Just nod if you can hear me.</p>\n<p>Is there anyone home?</p>\n<p>Come on, now.</p>\n<p>I hear you’re feeling down.</p>\n<p>Well I can ease your pain,</p>\n<p>Get you on your feet again.</p>\n<p>Relax.</p>\n<p>I need some information first.</p>\n<p>Just the basic facts:</p>\n<p>Can you show me where it hurts?</p>\n<p>There is no pain, you are receding.</p>\n<p>A distant ship’s smoke on the horizon.</p>\n<p>You are only coming through in waves.</p>\n<p>Your lips move but I can’t hear what you’re sayin’.</p>\n<p>When I was a child I had a fever.</p>\n<p>My hands felt just like two balloons.</p>\n<p>Now I got that feeling once again.</p>\n<p>I can’t explain, you would not understand.</p>\n<p>This is not how I am.</p>\n<p>I have become comfortably numb.</p>\n<br>\n<p>Ok.</p>\n<p>Just a little pinprick.</p>\n<p>There’ll be no more --Aaaaaahhhhh!</p>\n<p>But you may feel a little sick.</p>\n<p>Can you stand up?</p>\n<p>I do believe it’s working. Good.</p>\n<p>That’ll keep you going for the show.</p>\n<p>Come on it’s time to go.</p>\n<p>There is no pain, you are receding.</p>\n<p>A distant ship’s smoke on the horizon.</p>\n<p>You are only coming through in waves.</p>\n<p>Your lips move but I can’t hear what you’re sayin’.</p>\n<p>When I was a child I caught a fleeting glimpse,</p>\n<p>Out of the corner of my eye.</p>\n<p>I turned to look but it was gone.</p>\n<p>I cannot put my finger on it now.</p>\n<p>The child is grown, the dream is gone.</p>\n<p>I have become comfortably numb.</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cm2k34kjk000ri8041dxi1q75","tag_id":"cm2k35i0w000si804cf5y265h","_id":"cm2k35i10000ui8042nypdi9r"},{"post_id":"cm2k34kjk000ri8041dxi1q75","tag_id":"cm2k35i10000ti8046sh4dwj8","_id":"cm2k35i10000vi80409c8a9fe"},{"post_id":"cm2k2yhe5000oi804995f2v8p","tag_id":"cm2k35i0w000si804cf5y265h","_id":"cm2k364wp000wi80405ai0aln"},{"post_id":"cm2k30b8x000pi8042m5r51zp","tag_id":"cm2k36ekt000xi8045edt76c1","_id":"cm2k36ekw000yi80459fj6beh"},{"post_id":"cm2k33q5r000qi8046dzibo70","tag_id":"cm2k36sbk000zi80489s02xzy","_id":"cm2k36sbk0010i804fem9f66v"},{"post_id":"cm2k30b8x000pi8042m5r51zp","tag_id":"cm2k36sbk000zi80489s02xzy","_id":"cm2k36zrw0011i8048wnx2dbk"},{"post_id":"cm2k38af80014i804d25y781p","tag_id":"cm2k386un0012i804d4nzh55a","_id":"cm2k38af90015i804e5axca8r"},{"post_id":"cm2k39csy0017i804h3gxha28","tag_id":"cm2k386un0012i804d4nzh55a","_id":"cm2k39csz0018i80412sig30z"},{"post_id":"cm2k3bnmj001ai80480xk8289","tag_id":"cm2k386un0012i804d4nzh55a","_id":"cm2k3bnmn001bi8041h3cfgag"},{"post_id":"cm2k3gje6001di8040yi53qkt","tag_id":"cm2k386un0012i804d4nzh55a","_id":"cm2k3gje7001ei8048tmibzud"},{"post_id":"cm2k3hm68001gi804bx1vgy77","tag_id":"cm2k386un0012i804d4nzh55a","_id":"cm2k3hm69001hi804dw454do2"},{"post_id":"cm2k3iwhf001ji8041wuef02q","tag_id":"cm2k386un0012i804d4nzh55a","_id":"cm2k3iwhg001ki804dqg55u64"},{"post_id":"cm2k3jn3y001mi80409it7mdw","tag_id":"cm2k386un0012i804d4nzh55a","_id":"cm2k3jn3y001ni8049au4c7iv"},{"post_id":"cm2k3kj37001pi804brc6f5c3","tag_id":"cm2k386un0012i804d4nzh55a","_id":"cm2k3kj38001qi80458tqarmo"},{"post_id":"cm2k3l4dg001si804g70r0wya","tag_id":"cm2k386un0012i804d4nzh55a","_id":"cm2k3l4dh001ti8044kgse17e"},{"post_id":"cm2k3lo93001vi804f1018sdq","tag_id":"cm2k386un0012i804d4nzh55a","_id":"cm2k3lo9c001wi8041wqi4rag"},{"post_id":"cm2k3mg53001yi804fuci4pwg","tag_id":"cm2k386un0012i804d4nzh55a","_id":"cm2k3mg55001zi804duiz6blf"},{"post_id":"cm2k3npmi0021i80471i238iv","tag_id":"cm2k386un0012i804d4nzh55a","_id":"cm2k3npmk0022i8043f0basqx"},{"post_id":"cm2k3ognz0024i80410tr78ki","tag_id":"cm2k386un0012i804d4nzh55a","_id":"cm2k3ogo00025i8042h1d2eii"},{"post_id":"cm2k3rcme0028i804gfug6xho","tag_id":"cm2k3r9dh0026i804ggs4c5c1","_id":"cm2k3rcmf0029i8049ziwbiaj"},{"post_id":"cm2k3sf5w002bi804dnrybuzs","tag_id":"cm2k3r9dh0026i804ggs4c5c1","_id":"cm2k3sf5x002ci8043803ewmh"},{"post_id":"cm2k3uaxx002ei8045b5hdzkw","tag_id":"cm2k3r9dh0026i804ggs4c5c1","_id":"cm2k3uaxy002fi804gmdbctfr"},{"post_id":"cm2k3ve4i002hi8042jog553w","tag_id":"cm2k3r9dh0026i804ggs4c5c1","_id":"cm2k3ve4m002ii8048k920bx8"},{"post_id":"cm2k3wzhw002ki804fbem63p5","tag_id":"cm2k3r9dh0026i804ggs4c5c1","_id":"cm2k3x4e2002mi804aey8dmuj"},{"post_id":"cm2k3wzhw002ki804fbem63p5","tag_id":"cm2k3x4e1002li8047kqq34gz","_id":"cm2k3x4e2002ni80469i60yn0"},{"post_id":"cm2k3w8e9002ji804cgtgeaw5","tag_id":"cm2k3r9dh0026i804ggs4c5c1","_id":"cm2k3x621002oi804httk1lqp"}],"Tag":[{"name":"Test","_id":"cm2k1ul7l000jh404ec6v43oa"},{"name":"Foo","_id":"cm2k1ul7o000oh4043uxj5iei"},{"name":"Bar","_id":"cm2k1ul7r000uh404gxb27uoe"},{"name":"Baz","_id":"cm2k1ul7v000zh404djzt8fqh"},{"name":"自我介绍","_id":"cm2k27kef0000fs049luc3als"},{"name":"自我介绍 工作","_id":"cm2k27oxy0002fs04b9lb1kb1"},{"name":"自我介绍 工作 bad","_id":"cm2k2825z0004fs049donhv03"},{"name":"自我介绍, 工, bad","_id":"cm2k28ova0006fs04hkbv7b3f"},{"name":"speech","_id":"cm2k35i0w000si804cf5y265h"},{"name":"self improvement","_id":"cm2k35i10000ti8046sh4dwj8"},{"name":"ielts","_id":"cm2k36ekt000xi8045edt76c1"},{"name":"english learning","_id":"cm2k36sbk000zi80489s02xzy"},{"name":"tech","_id":"cm2k386un0012i804d4nzh55a"},{"name":"life","_id":"cm2k3r9dh0026i804ggs4c5c1"},{"name":"music","_id":"cm2k3x4e1002li8047kqq34gz"}]}}